
ES_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003790  08003790  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003790  08003790  00013790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003798  08003798  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800379c  0800379c  0001379c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080037ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080037ac  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b51d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000188d  00000000  00000000  0002b559  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce8  00000000  00000000  0002cde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c20  00000000  00000000  0002dad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001585d  00000000  00000000  0002e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000086ea  00000000  00000000  00043f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a1c0  00000000  00000000  0004c637  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d67f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036c8  00000000  00000000  000d6874  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003758 	.word	0x08003758

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003758 	.word	0x08003758

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <disp_buffer_update>:
static void MX_SPI1_Init(void);
static void MX_TIM10_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void disp_buffer_update(const uint8_t com, const char digit){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
  if(com >= 0 && com < 4){
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	f200 821c 	bhi.w	8000928 <disp_buffer_update+0x450>
    switch (digit){
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	3b2d      	subs	r3, #45	; 0x2d
 80004f4:	2b0c      	cmp	r3, #12
 80004f6:	f200 81ed 	bhi.w	80008d4 <disp_buffer_update+0x3fc>
 80004fa:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <disp_buffer_update+0x28>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000881 	.word	0x08000881
 8000504:	080008d5 	.word	0x080008d5
 8000508:	080008d5 	.word	0x080008d5
 800050c:	08000535 	.word	0x08000535
 8000510:	08000589 	.word	0x08000589
 8000514:	080005dd 	.word	0x080005dd
 8000518:	08000631 	.word	0x08000631
 800051c:	08000685 	.word	0x08000685
 8000520:	080006d9 	.word	0x080006d9
 8000524:	0800072d 	.word	0x0800072d
 8000528:	08000781 	.word	0x08000781
 800052c:	080007d9 	.word	0x080007d9
 8000530:	0800082d 	.word	0x0800082d
    
    case '0':  //put 0 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4aa7      	ldr	r2, [pc, #668]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000538:	2101      	movs	r1, #1
 800053a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	4aa4      	ldr	r2, [pc, #656]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000542:	00db      	lsls	r3, r3, #3
 8000544:	4413      	add	r3, r2
 8000546:	2201      	movs	r2, #1
 8000548:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	4aa1      	ldr	r2, [pc, #644]	; (80007d4 <disp_buffer_update+0x2fc>)
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	4413      	add	r3, r2
 8000552:	2201      	movs	r2, #1
 8000554:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	4a9e      	ldr	r2, [pc, #632]	; (80007d4 <disp_buffer_update+0x2fc>)
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	4413      	add	r3, r2
 800055e:	2201      	movs	r2, #1
 8000560:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	4a9b      	ldr	r2, [pc, #620]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000566:	00db      	lsls	r3, r3, #3
 8000568:	4413      	add	r3, r2
 800056a:	2201      	movs	r2, #1
 800056c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	4a98      	ldr	r2, [pc, #608]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000572:	00db      	lsls	r3, r3, #3
 8000574:	4413      	add	r3, r2
 8000576:	2201      	movs	r2, #1
 8000578:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	4a95      	ldr	r2, [pc, #596]	; (80007d4 <disp_buffer_update+0x2fc>)
 800057e:	00db      	lsls	r3, r3, #3
 8000580:	4413      	add	r3, r2
 8000582:	2200      	movs	r2, #0
 8000584:	719a      	strb	r2, [r3, #6]
      break;
 8000586:	e1d0      	b.n	800092a <disp_buffer_update+0x452>

    case '1':  //put 1 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000588:	79fb      	ldrb	r3, [r7, #7]
 800058a:	4a92      	ldr	r2, [pc, #584]	; (80007d4 <disp_buffer_update+0x2fc>)
 800058c:	2100      	movs	r1, #0
 800058e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	4a8f      	ldr	r2, [pc, #572]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	4413      	add	r3, r2
 800059a:	2201      	movs	r2, #1
 800059c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	4a8c      	ldr	r2, [pc, #560]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	4413      	add	r3, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	4a89      	ldr	r2, [pc, #548]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005ae:	00db      	lsls	r3, r3, #3
 80005b0:	4413      	add	r3, r2
 80005b2:	2200      	movs	r2, #0
 80005b4:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	4a86      	ldr	r2, [pc, #536]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005ba:	00db      	lsls	r3, r3, #3
 80005bc:	4413      	add	r3, r2
 80005be:	2200      	movs	r2, #0
 80005c0:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4a83      	ldr	r2, [pc, #524]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	4413      	add	r3, r2
 80005ca:	2200      	movs	r2, #0
 80005cc:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4a80      	ldr	r2, [pc, #512]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	4413      	add	r3, r2
 80005d6:	2200      	movs	r2, #0
 80005d8:	719a      	strb	r2, [r3, #6]
      break;
 80005da:	e1a6      	b.n	800092a <disp_buffer_update+0x452>

    case '2':  //put 2 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4a7d      	ldr	r2, [pc, #500]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005e0:	2101      	movs	r1, #1
 80005e2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	4a7a      	ldr	r2, [pc, #488]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	4413      	add	r3, r2
 80005ee:	2201      	movs	r2, #1
 80005f0:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4a77      	ldr	r2, [pc, #476]	; (80007d4 <disp_buffer_update+0x2fc>)
 80005f6:	00db      	lsls	r3, r3, #3
 80005f8:	4413      	add	r3, r2
 80005fa:	2200      	movs	r2, #0
 80005fc:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	4a74      	ldr	r2, [pc, #464]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000602:	00db      	lsls	r3, r3, #3
 8000604:	4413      	add	r3, r2
 8000606:	2201      	movs	r2, #1
 8000608:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	4a71      	ldr	r2, [pc, #452]	; (80007d4 <disp_buffer_update+0x2fc>)
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	4413      	add	r3, r2
 8000612:	2201      	movs	r2, #1
 8000614:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	4a6e      	ldr	r2, [pc, #440]	; (80007d4 <disp_buffer_update+0x2fc>)
 800061a:	00db      	lsls	r3, r3, #3
 800061c:	4413      	add	r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	4a6b      	ldr	r2, [pc, #428]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	2201      	movs	r2, #1
 800062c:	719a      	strb	r2, [r3, #6]
      break;
 800062e:	e17c      	b.n	800092a <disp_buffer_update+0x452>

    case '3':  //put 3 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4a68      	ldr	r2, [pc, #416]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000634:	2101      	movs	r1, #1
 8000636:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4a65      	ldr	r2, [pc, #404]	; (80007d4 <disp_buffer_update+0x2fc>)
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	4413      	add	r3, r2
 8000642:	2201      	movs	r2, #1
 8000644:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000646:	79fb      	ldrb	r3, [r7, #7]
 8000648:	4a62      	ldr	r2, [pc, #392]	; (80007d4 <disp_buffer_update+0x2fc>)
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	4413      	add	r3, r2
 800064e:	2201      	movs	r2, #1
 8000650:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000652:	79fb      	ldrb	r3, [r7, #7]
 8000654:	4a5f      	ldr	r2, [pc, #380]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000656:	00db      	lsls	r3, r3, #3
 8000658:	4413      	add	r3, r2
 800065a:	2201      	movs	r2, #1
 800065c:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4a5c      	ldr	r2, [pc, #368]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000662:	00db      	lsls	r3, r3, #3
 8000664:	4413      	add	r3, r2
 8000666:	2200      	movs	r2, #0
 8000668:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	4a59      	ldr	r2, [pc, #356]	; (80007d4 <disp_buffer_update+0x2fc>)
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	4413      	add	r3, r2
 8000672:	2200      	movs	r2, #0
 8000674:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	4a56      	ldr	r2, [pc, #344]	; (80007d4 <disp_buffer_update+0x2fc>)
 800067a:	00db      	lsls	r3, r3, #3
 800067c:	4413      	add	r3, r2
 800067e:	2201      	movs	r2, #1
 8000680:	719a      	strb	r2, [r3, #6]
      break;
 8000682:	e152      	b.n	800092a <disp_buffer_update+0x452>

    case '4':  //put 4 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4a53      	ldr	r2, [pc, #332]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000688:	2100      	movs	r1, #0
 800068a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	4a50      	ldr	r2, [pc, #320]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000692:	00db      	lsls	r3, r3, #3
 8000694:	4413      	add	r3, r2
 8000696:	2201      	movs	r2, #1
 8000698:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4a4d      	ldr	r2, [pc, #308]	; (80007d4 <disp_buffer_update+0x2fc>)
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	4413      	add	r3, r2
 80006a2:	2201      	movs	r2, #1
 80006a4:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4a4a      	ldr	r2, [pc, #296]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	4413      	add	r3, r2
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a47      	ldr	r2, [pc, #284]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	4413      	add	r3, r2
 80006ba:	2200      	movs	r2, #0
 80006bc:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 80006be:	79fb      	ldrb	r3, [r7, #7]
 80006c0:	4a44      	ldr	r2, [pc, #272]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	4413      	add	r3, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4a41      	ldr	r2, [pc, #260]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	4413      	add	r3, r2
 80006d2:	2201      	movs	r2, #1
 80006d4:	719a      	strb	r2, [r3, #6]
      break;
 80006d6:	e128      	b.n	800092a <disp_buffer_update+0x452>
    
    case '5':  //put 5 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	4a3e      	ldr	r2, [pc, #248]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006dc:	2101      	movs	r1, #1
 80006de:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4a3b      	ldr	r2, [pc, #236]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006e6:	00db      	lsls	r3, r3, #3
 80006e8:	4413      	add	r3, r2
 80006ea:	2200      	movs	r2, #0
 80006ec:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80006ee:	79fb      	ldrb	r3, [r7, #7]
 80006f0:	4a38      	ldr	r2, [pc, #224]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	4413      	add	r3, r2
 80006f6:	2201      	movs	r2, #1
 80006f8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	4a35      	ldr	r2, [pc, #212]	; (80007d4 <disp_buffer_update+0x2fc>)
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	4413      	add	r3, r2
 8000702:	2201      	movs	r2, #1
 8000704:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4a32      	ldr	r2, [pc, #200]	; (80007d4 <disp_buffer_update+0x2fc>)
 800070a:	00db      	lsls	r3, r3, #3
 800070c:	4413      	add	r3, r2
 800070e:	2200      	movs	r2, #0
 8000710:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	4a2f      	ldr	r2, [pc, #188]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000716:	00db      	lsls	r3, r3, #3
 8000718:	4413      	add	r3, r2
 800071a:	2201      	movs	r2, #1
 800071c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000722:	00db      	lsls	r3, r3, #3
 8000724:	4413      	add	r3, r2
 8000726:	2201      	movs	r2, #1
 8000728:	719a      	strb	r2, [r3, #6]
      break;
 800072a:	e0fe      	b.n	800092a <disp_buffer_update+0x452>

    case '6':  //put 6 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000730:	2101      	movs	r1, #1
 8000732:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	4a26      	ldr	r2, [pc, #152]	; (80007d4 <disp_buffer_update+0x2fc>)
 800073a:	00db      	lsls	r3, r3, #3
 800073c:	4413      	add	r3, r2
 800073e:	2200      	movs	r2, #0
 8000740:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4a23      	ldr	r2, [pc, #140]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	4413      	add	r3, r2
 800074a:	2201      	movs	r2, #1
 800074c:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	4a20      	ldr	r2, [pc, #128]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	4413      	add	r3, r2
 8000756:	2201      	movs	r2, #1
 8000758:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <disp_buffer_update+0x2fc>)
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	4413      	add	r3, r2
 8000762:	2201      	movs	r2, #1
 8000764:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4a1a      	ldr	r2, [pc, #104]	; (80007d4 <disp_buffer_update+0x2fc>)
 800076a:	00db      	lsls	r3, r3, #3
 800076c:	4413      	add	r3, r2
 800076e:	2201      	movs	r2, #1
 8000770:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000776:	00db      	lsls	r3, r3, #3
 8000778:	4413      	add	r3, r2
 800077a:	2201      	movs	r2, #1
 800077c:	719a      	strb	r2, [r3, #6]
      break;
 800077e:	e0d4      	b.n	800092a <disp_buffer_update+0x452>

    case '7':  //put 7 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4a14      	ldr	r2, [pc, #80]	; (80007d4 <disp_buffer_update+0x2fc>)
 8000784:	2101      	movs	r1, #1
 8000786:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	4a11      	ldr	r2, [pc, #68]	; (80007d4 <disp_buffer_update+0x2fc>)
 800078e:	00db      	lsls	r3, r3, #3
 8000790:	4413      	add	r3, r2
 8000792:	2201      	movs	r2, #1
 8000794:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4a0e      	ldr	r2, [pc, #56]	; (80007d4 <disp_buffer_update+0x2fc>)
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	2201      	movs	r2, #1
 80007a0:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	4a0b      	ldr	r2, [pc, #44]	; (80007d4 <disp_buffer_update+0x2fc>)
 80007a6:	00db      	lsls	r3, r3, #3
 80007a8:	4413      	add	r3, r2
 80007aa:	2200      	movs	r2, #0
 80007ac:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <disp_buffer_update+0x2fc>)
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	2200      	movs	r2, #0
 80007b8:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <disp_buffer_update+0x2fc>)
 80007be:	00db      	lsls	r3, r3, #3
 80007c0:	4413      	add	r3, r2
 80007c2:	2200      	movs	r2, #0
 80007c4:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 80007c6:	79fb      	ldrb	r3, [r7, #7]
 80007c8:	4a02      	ldr	r2, [pc, #8]	; (80007d4 <disp_buffer_update+0x2fc>)
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	4413      	add	r3, r2
 80007ce:	2200      	movs	r2, #0
 80007d0:	719a      	strb	r2, [r3, #6]
      break;
 80007d2:	e0aa      	b.n	800092a <disp_buffer_update+0x452>
 80007d4:	2000006c 	.word	0x2000006c

    case '8':  //put 8 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	4a57      	ldr	r2, [pc, #348]	; (8000938 <disp_buffer_update+0x460>)
 80007dc:	2101      	movs	r1, #1
 80007de:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	4a54      	ldr	r2, [pc, #336]	; (8000938 <disp_buffer_update+0x460>)
 80007e6:	00db      	lsls	r3, r3, #3
 80007e8:	4413      	add	r3, r2
 80007ea:	2201      	movs	r2, #1
 80007ec:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4a51      	ldr	r2, [pc, #324]	; (8000938 <disp_buffer_update+0x460>)
 80007f2:	00db      	lsls	r3, r3, #3
 80007f4:	4413      	add	r3, r2
 80007f6:	2201      	movs	r2, #1
 80007f8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4a4e      	ldr	r2, [pc, #312]	; (8000938 <disp_buffer_update+0x460>)
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	4413      	add	r3, r2
 8000802:	2201      	movs	r2, #1
 8000804:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	4a4b      	ldr	r2, [pc, #300]	; (8000938 <disp_buffer_update+0x460>)
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	4413      	add	r3, r2
 800080e:	2201      	movs	r2, #1
 8000810:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4a48      	ldr	r2, [pc, #288]	; (8000938 <disp_buffer_update+0x460>)
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	4413      	add	r3, r2
 800081a:	2201      	movs	r2, #1
 800081c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800081e:	79fb      	ldrb	r3, [r7, #7]
 8000820:	4a45      	ldr	r2, [pc, #276]	; (8000938 <disp_buffer_update+0x460>)
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	4413      	add	r3, r2
 8000826:	2201      	movs	r2, #1
 8000828:	719a      	strb	r2, [r3, #6]
      break;
 800082a:	e07e      	b.n	800092a <disp_buffer_update+0x452>

    case '9':  //put 9 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4a42      	ldr	r2, [pc, #264]	; (8000938 <disp_buffer_update+0x460>)
 8000830:	2101      	movs	r1, #1
 8000832:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4a3f      	ldr	r2, [pc, #252]	; (8000938 <disp_buffer_update+0x460>)
 800083a:	00db      	lsls	r3, r3, #3
 800083c:	4413      	add	r3, r2
 800083e:	2201      	movs	r2, #1
 8000840:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	4a3c      	ldr	r2, [pc, #240]	; (8000938 <disp_buffer_update+0x460>)
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	4413      	add	r3, r2
 800084a:	2201      	movs	r2, #1
 800084c:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4a39      	ldr	r2, [pc, #228]	; (8000938 <disp_buffer_update+0x460>)
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	4413      	add	r3, r2
 8000856:	2201      	movs	r2, #1
 8000858:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4a36      	ldr	r2, [pc, #216]	; (8000938 <disp_buffer_update+0x460>)
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	4413      	add	r3, r2
 8000862:	2200      	movs	r2, #0
 8000864:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	4a33      	ldr	r2, [pc, #204]	; (8000938 <disp_buffer_update+0x460>)
 800086a:	00db      	lsls	r3, r3, #3
 800086c:	4413      	add	r3, r2
 800086e:	2201      	movs	r2, #1
 8000870:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	4a30      	ldr	r2, [pc, #192]	; (8000938 <disp_buffer_update+0x460>)
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	4413      	add	r3, r2
 800087a:	2201      	movs	r2, #1
 800087c:	719a      	strb	r2, [r3, #6]
      break;
 800087e:	e054      	b.n	800092a <disp_buffer_update+0x452>
    
    case '-':  //put '-' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	4a2d      	ldr	r2, [pc, #180]	; (8000938 <disp_buffer_update+0x460>)
 8000884:	2100      	movs	r1, #0
 8000886:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	4a2a      	ldr	r2, [pc, #168]	; (8000938 <disp_buffer_update+0x460>)
 800088e:	00db      	lsls	r3, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	2200      	movs	r2, #0
 8000894:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	4a27      	ldr	r2, [pc, #156]	; (8000938 <disp_buffer_update+0x460>)
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	4413      	add	r3, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	4a24      	ldr	r2, [pc, #144]	; (8000938 <disp_buffer_update+0x460>)
 80008a6:	00db      	lsls	r3, r3, #3
 80008a8:	4413      	add	r3, r2
 80008aa:	2200      	movs	r2, #0
 80008ac:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a21      	ldr	r2, [pc, #132]	; (8000938 <disp_buffer_update+0x460>)
 80008b2:	00db      	lsls	r3, r3, #3
 80008b4:	4413      	add	r3, r2
 80008b6:	2200      	movs	r2, #0
 80008b8:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <disp_buffer_update+0x460>)
 80008be:	00db      	lsls	r3, r3, #3
 80008c0:	4413      	add	r3, r2
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	4a1b      	ldr	r2, [pc, #108]	; (8000938 <disp_buffer_update+0x460>)
 80008ca:	00db      	lsls	r3, r3, #3
 80008cc:	4413      	add	r3, r2
 80008ce:	2201      	movs	r2, #1
 80008d0:	719a      	strb	r2, [r3, #6]
      break;
 80008d2:	e02a      	b.n	800092a <disp_buffer_update+0x452>
    

    default:
      disp_state[com][0] = GPIO_PIN_RESET;
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	4a18      	ldr	r2, [pc, #96]	; (8000938 <disp_buffer_update+0x460>)
 80008d8:	2100      	movs	r1, #0
 80008da:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	4a15      	ldr	r2, [pc, #84]	; (8000938 <disp_buffer_update+0x460>)
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	4413      	add	r3, r2
 80008e6:	2200      	movs	r2, #0
 80008e8:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	4a12      	ldr	r2, [pc, #72]	; (8000938 <disp_buffer_update+0x460>)
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	4413      	add	r3, r2
 80008f2:	2200      	movs	r2, #0
 80008f4:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <disp_buffer_update+0x460>)
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4413      	add	r3, r2
 80008fe:	2200      	movs	r2, #0
 8000900:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000902:	79fb      	ldrb	r3, [r7, #7]
 8000904:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <disp_buffer_update+0x460>)
 8000906:	00db      	lsls	r3, r3, #3
 8000908:	4413      	add	r3, r2
 800090a:	2200      	movs	r2, #0
 800090c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <disp_buffer_update+0x460>)
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4413      	add	r3, r2
 8000916:	2200      	movs	r2, #0
 8000918:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <disp_buffer_update+0x460>)
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	4413      	add	r3, r2
 8000922:	2200      	movs	r2, #0
 8000924:	719a      	strb	r2, [r3, #6]
      break;
 8000926:	e000      	b.n	800092a <disp_buffer_update+0x452>
    }
  }
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	2000006c 	.word	0x2000006c

0800093c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	static uint8_t active_com = 0;
	if(htim->Instance==TIM10){
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a7c      	ldr	r2, [pc, #496]	; (8000b3c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800094a:	4293      	cmp	r3, r2
 800094c:	f040 80f1 	bne.w	8000b32 <HAL_TIM_PeriodElapsedCallback+0x1f6>

		++active_com;
 8000950:	4b7b      	ldr	r3, [pc, #492]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	3301      	adds	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b79      	ldr	r3, [pc, #484]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800095a:	701a      	strb	r2, [r3, #0]
		if(active_com >3 ) active_com = 0;
 800095c:	4b78      	ldr	r3, [pc, #480]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b03      	cmp	r3, #3
 8000962:	d902      	bls.n	800096a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000964:	4b76      	ldr	r3, [pc, #472]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]

		switch(active_com){
 800096a:	4b75      	ldr	r3, [pc, #468]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d86e      	bhi.n	8000a50 <HAL_TIM_PeriodElapsedCallback+0x114>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	08000989 	.word	0x08000989
 800097c:	080009bb 	.word	0x080009bb
 8000980:	080009ed 	.word	0x080009ed
 8000984:	08000a1f 	.word	0x08000a1f
		case 0:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800098e:	486d      	ldr	r0, [pc, #436]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000990:	f000 ffb8 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099a:	486a      	ldr	r0, [pc, #424]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800099c:	f000 ffb2 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a6:	4867      	ldr	r0, [pc, #412]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009a8:	f000 ffac 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009b2:	4864      	ldr	r0, [pc, #400]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009b4:	f000 ffa6 	bl	8001904 <HAL_GPIO_WritePin>
			break;
 80009b8:	e063      	b.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x146>

		case 1:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c0:	4860      	ldr	r0, [pc, #384]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009c2:	f000 ff9f 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009cc:	485d      	ldr	r0, [pc, #372]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009ce:	f000 ff99 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d8:	485a      	ldr	r0, [pc, #360]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009da:	f000 ff93 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e4:	4857      	ldr	r0, [pc, #348]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009e6:	f000 ff8d 	bl	8001904 <HAL_GPIO_WritePin>
			break;
 80009ea:	e04a      	b.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x146>

		case 2:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 80009ec:	2201      	movs	r2, #1
 80009ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009f2:	4854      	ldr	r0, [pc, #336]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80009f4:	f000 ff86 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 80009f8:	2201      	movs	r2, #1
 80009fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fe:	4851      	ldr	r0, [pc, #324]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a00:	f000 ff80 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_RESET);
 8000a04:	2200      	movs	r2, #0
 8000a06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0a:	484e      	ldr	r0, [pc, #312]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a0c:	f000 ff7a 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 8000a10:	2201      	movs	r2, #1
 8000a12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a16:	484b      	ldr	r0, [pc, #300]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a18:	f000 ff74 	bl	8001904 <HAL_GPIO_WritePin>
			break;
 8000a1c:	e031      	b.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x146>

		case 3:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 8000a1e:	2201      	movs	r2, #1
 8000a20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a24:	4847      	ldr	r0, [pc, #284]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a26:	f000 ff6d 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a30:	4844      	ldr	r0, [pc, #272]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a32:	f000 ff67 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a3c:	4841      	ldr	r0, [pc, #260]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a3e:	f000 ff61 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a48:	483e      	ldr	r0, [pc, #248]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a4a:	f000 ff5b 	bl	8001904 <HAL_GPIO_WritePin>
			break;
 8000a4e:	e018      	b.n	8000a82 <HAL_TIM_PeriodElapsedCallback+0x146>

		default:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_RESET);
 8000a50:	2200      	movs	r2, #0
 8000a52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a56:	483b      	ldr	r0, [pc, #236]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a58:	f000 ff54 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_RESET);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a62:	4838      	ldr	r0, [pc, #224]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a64:	f000 ff4e 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_RESET);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a6e:	4835      	ldr	r0, [pc, #212]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a70:	f000 ff48 	bl	8001904 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_RESET);
 8000a74:	2200      	movs	r2, #0
 8000a76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a7a:	4832      	ldr	r0, [pc, #200]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a7c:	f000 ff42 	bl	8001904 <HAL_GPIO_WritePin>
			break;
 8000a80:	bf00      	nop
		}

		HAL_GPIO_WritePin(disp_A_GPIO_Port, disp_A_Pin, disp_state[active_com][0]);
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000a8a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	482c      	ldr	r0, [pc, #176]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000a94:	f000 ff36 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_B_GPIO_Port, disp_B_Pin, disp_state[active_com][1]);
 8000a98:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	4413      	add	r3, r2
 8000aa2:	785b      	ldrb	r3, [r3, #1]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	2110      	movs	r1, #16
 8000aa8:	4826      	ldr	r0, [pc, #152]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000aaa:	f000 ff2b 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_C_GPIO_Port, disp_C_Pin, disp_state[active_com][2]);
 8000aae:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	4a25      	ldr	r2, [pc, #148]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	4413      	add	r3, r2
 8000ab8:	789b      	ldrb	r3, [r3, #2]
 8000aba:	461a      	mov	r2, r3
 8000abc:	2108      	movs	r1, #8
 8000abe:	4821      	ldr	r0, [pc, #132]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ac0:	f000 ff20 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_D_GPIO_Port, disp_D_Pin, disp_state[active_com][3]);
 8000ac4:	4b1e      	ldr	r3, [pc, #120]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	4a1f      	ldr	r2, [pc, #124]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000aca:	00db      	lsls	r3, r3, #3
 8000acc:	4413      	add	r3, r2
 8000ace:	78db      	ldrb	r3, [r3, #3]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	481b      	ldr	r0, [pc, #108]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ad6:	f000 ff15 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_E_GPIO_Port, disp_E_Pin, disp_state[active_com][4]);
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4816      	ldr	r0, [pc, #88]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000aec:	f000 ff0a 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_F_GPIO_Port, disp_F_Pin, disp_state[active_com][5]);
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	4413      	add	r3, r2
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	461a      	mov	r2, r3
 8000afe:	2120      	movs	r1, #32
 8000b00:	4810      	ldr	r0, [pc, #64]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000b02:	f000 feff 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_G_GPIO_Port, disp_G_Pin, disp_state[active_com][6]);
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000b0c:	00db      	lsls	r3, r3, #3
 8000b0e:	4413      	add	r3, r2
 8000b10:	799b      	ldrb	r3, [r3, #6]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2101      	movs	r1, #1
 8000b16:	480b      	ldr	r0, [pc, #44]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000b18:	f000 fef4 	bl	8001904 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_DP_GPIO_Port, disp_DP_Pin, disp_state[active_com][7]);
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4a09      	ldr	r2, [pc, #36]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4413      	add	r3, r2
 8000b26:	79db      	ldrb	r3, [r3, #7]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000b2e:	f000 fee9 	bl	8001904 <HAL_GPIO_WritePin>

	}
}
 8000b32:	bf00      	nop
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40014400 	.word	0x40014400
 8000b40:	20000028 	.word	0x20000028
 8000b44:	40020800 	.word	0x40020800
 8000b48:	2000006c 	.word	0x2000006c

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b088      	sub	sp, #32
 8000b50:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint8_t receive[2];


	uint8_t gyro_setup[2] =   {0b00100000, 0b01000111};
 8000b52:	4b4d      	ldr	r3, [pc, #308]	; (8000c88 <main+0x13c>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	823b      	strh	r3, [r7, #16]
	uint8_t gyro_s_check[2] = {0b10100000, 0b00000000};
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	733b      	strb	r3, [r7, #12]
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	737b      	strb	r3, [r7, #13]
	uint8_t gyro_x_check[2] = {0b10101001, 0b00000000};
 8000b60:	23a9      	movs	r3, #169	; 0xa9
 8000b62:	723b      	strb	r3, [r7, #8]
 8000b64:	2300      	movs	r3, #0
 8000b66:	727b      	strb	r3, [r7, #9]
	uint8_t gyro_y_check[2] = {0b10101011, 0b00000000};
 8000b68:	23ab      	movs	r3, #171	; 0xab
 8000b6a:	713b      	strb	r3, [r7, #4]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	717b      	strb	r3, [r7, #5]
	uint8_t gyro_z_check[2] = {0b10101101, 0b00000000};
 8000b70:	23ad      	movs	r3, #173	; 0xad
 8000b72:	703b      	strb	r3, [r7, #0]
 8000b74:	2300      	movs	r3, #0
 8000b76:	707b      	strb	r3, [r7, #1]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b78:	f000 fb9c 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7c:	f000 f88c 	bl	8000c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b80:	f000 f976 	bl	8000e70 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b84:	f000 f8f0 	bl	8000d68 <MX_SPI1_Init>
  MX_TIM10_Init();
 8000b88:	f000 f924 	bl	8000dd4 <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000b8c:	f000 f946 	bl	8000e1c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_TIM_Base_Start_IT(&htim10);

//  HAL_GPIO_WritePin(spi_CS_GPIO_Port, spi_CS_Pin, GPIO_PIN_RESET);
  HAL_Delay(1);
 8000b90:	2001      	movs	r0, #1
 8000b92:	f000 fc01 	bl	8001398 <HAL_Delay>
  HAL_SPI_Transmit(&hspi1, gyro_setup, 1, 1000);
 8000b96:	f107 0110 	add.w	r1, r7, #16
 8000b9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	483a      	ldr	r0, [pc, #232]	; (8000c8c <main+0x140>)
 8000ba2:	f001 fb8f 	bl	80022c4 <HAL_SPI_Transmit>

//  HAL_GPIO_WritePin(spi_CS_GPIO_Port, spi_CS_Pin, GPIO_PIN_SET);

  disp_buffer_update(0,'8');
 8000ba6:	2138      	movs	r1, #56	; 0x38
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fc95 	bl	80004d8 <disp_buffer_update>
  disp_buffer_update(1,'9');
 8000bae:	2139      	movs	r1, #57	; 0x39
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	f7ff fc91 	bl	80004d8 <disp_buffer_update>
  disp_buffer_update(2,'0');
 8000bb6:	2130      	movs	r1, #48	; 0x30
 8000bb8:	2002      	movs	r0, #2
 8000bba:	f7ff fc8d 	bl	80004d8 <disp_buffer_update>
  disp_buffer_update(3,'-');
 8000bbe:	212d      	movs	r1, #45	; 0x2d
 8000bc0:	2003      	movs	r0, #3
 8000bc2:	f7ff fc89 	bl	80004d8 <disp_buffer_update>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_SPI_TransmitReceive(&hspi1, gyro_s_check, receive, 2, 100);
 8000bc6:	f107 0214 	add.w	r2, r7, #20
 8000bca:	f107 010c 	add.w	r1, r7, #12
 8000bce:	2364      	movs	r3, #100	; 0x64
 8000bd0:	9300      	str	r3, [sp, #0]
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	482d      	ldr	r0, [pc, #180]	; (8000c8c <main+0x140>)
 8000bd6:	f001 fca9 	bl	800252c <HAL_SPI_TransmitReceive>
	  HAL_UART_Transmit(&huart2, receive, 2, 100);
 8000bda:	f107 0114 	add.w	r1, r7, #20
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	2202      	movs	r2, #2
 8000be2:	482b      	ldr	r0, [pc, #172]	; (8000c90 <main+0x144>)
 8000be4:	f002 f92d 	bl	8002e42 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, '\t', 1, 100);
 8000be8:	2364      	movs	r3, #100	; 0x64
 8000bea:	2201      	movs	r2, #1
 8000bec:	2109      	movs	r1, #9
 8000bee:	4828      	ldr	r0, [pc, #160]	; (8000c90 <main+0x144>)
 8000bf0:	f002 f927 	bl	8002e42 <HAL_UART_Transmit>

	  HAL_SPI_TransmitReceive(&hspi1, gyro_x_check, receive, 2, 100);
 8000bf4:	f107 0214 	add.w	r2, r7, #20
 8000bf8:	f107 0108 	add.w	r1, r7, #8
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	9300      	str	r3, [sp, #0]
 8000c00:	2302      	movs	r3, #2
 8000c02:	4822      	ldr	r0, [pc, #136]	; (8000c8c <main+0x140>)
 8000c04:	f001 fc92 	bl	800252c <HAL_SPI_TransmitReceive>
	  HAL_UART_Transmit(&huart2, receive, 2, 100);
 8000c08:	f107 0114 	add.w	r1, r7, #20
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	2202      	movs	r2, #2
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <main+0x144>)
 8000c12:	f002 f916 	bl	8002e42 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, '\t', 1, 100);
 8000c16:	2364      	movs	r3, #100	; 0x64
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2109      	movs	r1, #9
 8000c1c:	481c      	ldr	r0, [pc, #112]	; (8000c90 <main+0x144>)
 8000c1e:	f002 f910 	bl	8002e42 <HAL_UART_Transmit>

	  HAL_SPI_TransmitReceive(&hspi1, gyro_y_check, receive, 2, 100);
 8000c22:	f107 0214 	add.w	r2, r7, #20
 8000c26:	1d39      	adds	r1, r7, #4
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	9300      	str	r3, [sp, #0]
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	4817      	ldr	r0, [pc, #92]	; (8000c8c <main+0x140>)
 8000c30:	f001 fc7c 	bl	800252c <HAL_SPI_TransmitReceive>
	  HAL_UART_Transmit(&huart2, receive, 2, 100);
 8000c34:	f107 0114 	add.w	r1, r7, #20
 8000c38:	2364      	movs	r3, #100	; 0x64
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	4814      	ldr	r0, [pc, #80]	; (8000c90 <main+0x144>)
 8000c3e:	f002 f900 	bl	8002e42 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, '\t', 1, 100);uint16_t send = 0xA900;
 8000c42:	2364      	movs	r3, #100	; 0x64
 8000c44:	2201      	movs	r2, #1
 8000c46:	2109      	movs	r1, #9
 8000c48:	4811      	ldr	r0, [pc, #68]	; (8000c90 <main+0x144>)
 8000c4a:	f002 f8fa 	bl	8002e42 <HAL_UART_Transmit>
 8000c4e:	f44f 4329 	mov.w	r3, #43264	; 0xa900
 8000c52:	82fb      	strh	r3, [r7, #22]

	  HAL_SPI_TransmitReceive(&hspi1, gyro_z_check, receive, 2, 100);
 8000c54:	f107 0214 	add.w	r2, r7, #20
 8000c58:	4639      	mov	r1, r7
 8000c5a:	2364      	movs	r3, #100	; 0x64
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	2302      	movs	r3, #2
 8000c60:	480a      	ldr	r0, [pc, #40]	; (8000c8c <main+0x140>)
 8000c62:	f001 fc63 	bl	800252c <HAL_SPI_TransmitReceive>
	  HAL_UART_Transmit(&huart2, receive, 2, 100);
 8000c66:	f107 0114 	add.w	r1, r7, #20
 8000c6a:	2364      	movs	r3, #100	; 0x64
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	4808      	ldr	r0, [pc, #32]	; (8000c90 <main+0x144>)
 8000c70:	f002 f8e7 	bl	8002e42 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, "\n\r", 2, 100);
 8000c74:	2364      	movs	r3, #100	; 0x64
 8000c76:	2202      	movs	r2, #2
 8000c78:	4906      	ldr	r1, [pc, #24]	; (8000c94 <main+0x148>)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <main+0x144>)
 8000c7c:	f002 f8e1 	bl	8002e42 <HAL_UART_Transmit>

	  HAL_Delay(100);
 8000c80:	2064      	movs	r0, #100	; 0x64
 8000c82:	f000 fb89 	bl	8001398 <HAL_Delay>
  {
 8000c86:	e79e      	b.n	8000bc6 <main+0x7a>
 8000c88:	08003774 	.word	0x08003774
 8000c8c:	20000094 	.word	0x20000094
 8000c90:	200000ec 	.word	0x200000ec
 8000c94:	08003770 	.word	0x08003770

08000c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b094      	sub	sp, #80	; 0x50
 8000c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	2230      	movs	r2, #48	; 0x30
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 fd4e 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b27      	ldr	r3, [pc, #156]	; (8000d60 <SystemClock_Config+0xc8>)
 8000cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc4:	4a26      	ldr	r2, [pc, #152]	; (8000d60 <SystemClock_Config+0xc8>)
 8000cc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ccc:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <SystemClock_Config+0xc8>)
 8000cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cd8:	2300      	movs	r3, #0
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	4b21      	ldr	r3, [pc, #132]	; (8000d64 <SystemClock_Config+0xcc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <SystemClock_Config+0xcc>)
 8000ce2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ce6:	6013      	str	r3, [r2, #0]
 8000ce8:	4b1e      	ldr	r3, [pc, #120]	; (8000d64 <SystemClock_Config+0xcc>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cf0:	607b      	str	r3, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d0c:	2364      	movs	r3, #100	; 0x64
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d18:	f107 0320 	add.w	r3, r7, #32
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f000 fe0b 	bl	8001938 <HAL_RCC_OscConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d28:	f000 f944 	bl	8000fb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	2103      	movs	r1, #3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f001 f865 	bl	8001e18 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d54:	f000 f92e 	bl	8000fb4 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3750      	adds	r7, #80	; 0x50
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40007000 	.word	0x40007000

08000d68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <MX_SPI1_Init+0x68>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b16      	ldr	r3, [pc, #88]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d88:	2202      	movs	r2, #2
 8000d8a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d8e:	2201      	movs	r2, #1
 8000d90:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d98:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000d9c:	2218      	movs	r2, #24
 8000d9e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000db4:	220a      	movs	r2, #10
 8000db6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	; (8000dcc <MX_SPI1_Init+0x64>)
 8000dba:	f001 fa1f 	bl	80021fc <HAL_SPI_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000dc4:	f000 f8f6 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000094 	.word	0x20000094
 8000dd0:	40013000 	.word	0x40013000

08000dd4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000dda:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <MX_TIM10_Init+0x44>)
 8000ddc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4;
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000de0:	2204      	movs	r2, #4
 8000de2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 24999;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000dec:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000df0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_TIM10_Init+0x40>)
 8000e00:	f001 fde2 	bl	80029c8 <HAL_TIM_Base_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000e0a:	f000 f8d3 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	2000002c 	.word	0x2000002c
 8000e18:	40014400 	.word	0x40014400

08000e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e22:	4a12      	ldr	r2, [pc, #72]	; (8000e6c <MX_USART2_UART_Init+0x50>)
 8000e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e26:	4b10      	ldr	r3, [pc, #64]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e42:	220c      	movs	r2, #12
 8000e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_USART2_UART_Init+0x4c>)
 8000e54:	f001 ffa8 	bl	8002da8 <HAL_UART_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5e:	f000 f8a9 	bl	8000fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000ec 	.word	0x200000ec
 8000e6c:	40004400 	.word	0x40004400

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b44      	ldr	r3, [pc, #272]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	4a43      	ldr	r2, [pc, #268]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000e90:	f043 0304 	orr.w	r3, r3, #4
 8000e94:	6313      	str	r3, [r2, #48]	; 0x30
 8000e96:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	f003 0304 	and.w	r3, r3, #4
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b3d      	ldr	r3, [pc, #244]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a3c      	ldr	r2, [pc, #240]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a35      	ldr	r2, [pc, #212]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b33      	ldr	r3, [pc, #204]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b2c      	ldr	r3, [pc, #176]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, disp_G_Pin|disp_D_Pin|disp_E_Pin|disp_C_Pin 
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000efe:	f000 fd01 	bl	8001904 <HAL_GPIO_WritePin>
                          |disp_B_Pin|disp_F_Pin|disp_A_Pin|disp_DP_Pin 
                          |disp_COM4_Pin|disp_COM3_Pin|disp_COM2_Pin|disp_COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2120      	movs	r1, #32
 8000f06:	4827      	ldr	r0, [pc, #156]	; (8000fa4 <MX_GPIO_Init+0x134>)
 8000f08:	f000 fcfc 	bl	8001904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <MX_GPIO_Init+0x138>)
 8000f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000f22:	f000 fb6d 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pins : disp_G_Pin disp_D_Pin disp_E_Pin disp_C_Pin 
                           disp_B_Pin disp_F_Pin disp_A_Pin disp_DP_Pin 
                           disp_COM4_Pin disp_COM3_Pin disp_COM2_Pin disp_COM1_Pin */
  GPIO_InitStruct.Pin = disp_G_Pin|disp_D_Pin|disp_E_Pin|disp_C_Pin 
 8000f26:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000f2a:	617b      	str	r3, [r7, #20]
                          |disp_B_Pin|disp_F_Pin|disp_A_Pin|disp_DP_Pin 
                          |disp_COM4_Pin|disp_COM3_Pin|disp_COM2_Pin|disp_COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f38:	f107 0314 	add.w	r3, r7, #20
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <MX_GPIO_Init+0x130>)
 8000f40:	f000 fb5e 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f44:	2320      	movs	r3, #32
 8000f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4812      	ldr	r0, [pc, #72]	; (8000fa4 <MX_GPIO_Init+0x134>)
 8000f5c:	f000 fb50 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_1_Pin */
  GPIO_InitStruct.Pin = button_1_Pin;
 8000f60:	2301      	movs	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_1_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	480e      	ldr	r0, [pc, #56]	; (8000fac <MX_GPIO_Init+0x13c>)
 8000f74:	f000 fb44 	bl	8001600 <HAL_GPIO_Init>

  /*Configure GPIO pin : gyro_exti_Pin */
  GPIO_InitStruct.Pin = gyro_exti_Pin;
 8000f78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_GPIO_Init+0x140>)
 8000f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(gyro_exti_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_GPIO_Init+0x134>)
 8000f8e:	f000 fb37 	bl	8001600 <HAL_GPIO_Init>

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020000 	.word	0x40020000
 8000fa8:	10210000 	.word	0x10210000
 8000fac:	40020400 	.word	0x40020400
 8000fb0:	10110000 	.word	0x10110000

08000fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
 8000fce:	4b10      	ldr	r3, [pc, #64]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd2:	4a0f      	ldr	r2, [pc, #60]	; (8001010 <HAL_MspInit+0x4c>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HAL_MspInit+0x4c>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_MspInit+0x4c>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	603b      	str	r3, [r7, #0]
 8001000:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001002:	2007      	movs	r0, #7
 8001004:	f000 faba 	bl	800157c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a28      	ldr	r2, [pc, #160]	; (80010d4 <HAL_SPI_MspInit+0xc0>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d149      	bne.n	80010ca <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001044:	6453      	str	r3, [r2, #68]	; 0x44
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a1f      	ldr	r2, [pc, #124]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a18      	ldr	r2, [pc, #96]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <HAL_SPI_MspInit+0xc4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 800108a:	23d0      	movs	r3, #208	; 0xd0
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108e:	2302      	movs	r3, #2
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800109a:	2305      	movs	r3, #5
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <HAL_SPI_MspInit+0xc8>)
 80010a6:	f000 faab 	bl	8001600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010aa:	2308      	movs	r3, #8
 80010ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b6:	2303      	movs	r3, #3
 80010b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010ba:	2305      	movs	r3, #5
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <HAL_SPI_MspInit+0xcc>)
 80010c6:	f000 fa9b 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3728      	adds	r7, #40	; 0x28
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40013000 	.word	0x40013000
 80010d8:	40023800 	.word	0x40023800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400

080010e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b084      	sub	sp, #16
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0e      	ldr	r2, [pc, #56]	; (800112c <HAL_TIM_Base_MspInit+0x48>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d115      	bne.n	8001122 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	4b0d      	ldr	r3, [pc, #52]	; (8001130 <HAL_TIM_Base_MspInit+0x4c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	4a0c      	ldr	r2, [pc, #48]	; (8001130 <HAL_TIM_Base_MspInit+0x4c>)
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	6453      	str	r3, [r2, #68]	; 0x44
 8001106:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <HAL_TIM_Base_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001112:	2200      	movs	r2, #0
 8001114:	2100      	movs	r1, #0
 8001116:	2019      	movs	r0, #25
 8001118:	f000 fa3b 	bl	8001592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800111c:	2019      	movs	r0, #25
 800111e:	f000 fa54 	bl	80015ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40014400 	.word	0x40014400
 8001130:	40023800 	.word	0x40023800

08001134 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a19      	ldr	r2, [pc, #100]	; (80011b8 <HAL_UART_MspInit+0x84>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d12b      	bne.n	80011ae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	613b      	str	r3, [r7, #16]
 800115a:	4b18      	ldr	r3, [pc, #96]	; (80011bc <HAL_UART_MspInit+0x88>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <HAL_UART_MspInit+0x88>)
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	6413      	str	r3, [r2, #64]	; 0x40
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <HAL_UART_MspInit+0x88>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <HAL_UART_MspInit+0x88>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a10      	ldr	r2, [pc, #64]	; (80011bc <HAL_UART_MspInit+0x88>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_UART_MspInit+0x88>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118e:	230c      	movs	r3, #12
 8001190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119e:	2307      	movs	r3, #7
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a2:	f107 0314 	add.w	r3, r7, #20
 80011a6:	4619      	mov	r1, r3
 80011a8:	4805      	ldr	r0, [pc, #20]	; (80011c0 <HAL_UART_MspInit+0x8c>)
 80011aa:	f000 fa29 	bl	8001600 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40004400 	.word	0x40004400
 80011bc:	40023800 	.word	0x40023800
 80011c0:	40020000 	.word	0x40020000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <HardFault_Handler+0x4>

080011d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011dc:	e7fe      	b.n	80011dc <MemManage_Handler+0x4>

080011de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011de:	b480      	push	{r7}
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e2:	e7fe      	b.n	80011e2 <BusFault_Handler+0x4>

080011e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e8:	e7fe      	b.n	80011e8 <UsageFault_Handler+0x4>

080011ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001218:	f000 f89e 	bl	8001358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}

08001220 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001226:	f001 fbfa 	bl	8002a1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000002c 	.word	0x2000002c

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <SystemInit+0x28>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <SystemInit+0x28>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <SystemInit+0x28>)
 800124a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800124e:	609a      	str	r2, [r3, #8]
#endif
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001264:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001266:	e003      	b.n	8001270 <LoopCopyDataInit>

08001268 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800126a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800126c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800126e:	3104      	adds	r1, #4

08001270 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001274:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001276:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001278:	d3f6      	bcc.n	8001268 <CopyDataInit>
  ldr  r2, =_sbss
 800127a:	4a0b      	ldr	r2, [pc, #44]	; (80012a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800127c:	e002      	b.n	8001284 <LoopFillZerobss>

0800127e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800127e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001280:	f842 3b04 	str.w	r3, [r2], #4

08001284 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001284:	4b09      	ldr	r3, [pc, #36]	; (80012ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001286:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001288:	d3f9      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800128a:	f7ff ffd3 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128e:	f002 fa37 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fc5b 	bl	8000b4c <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800129c:	080037a0 	.word	0x080037a0
  ldr  r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012a4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80012a8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80012ac:	20000130 	.word	0x20000130

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	; (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f94d 	bl	800157c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f000 f808 	bl	80012f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fe6c 	bl	8000fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <HAL_InitTick+0x54>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b12      	ldr	r3, [pc, #72]	; (8001350 <HAL_InitTick+0x58>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4619      	mov	r1, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001312:	fbb2 f3f3 	udiv	r3, r2, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f000 f965 	bl	80015e6 <HAL_SYSTICK_Config>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e00e      	b.n	8001344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b0f      	cmp	r3, #15
 800132a:	d80a      	bhi.n	8001342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800132c:	2200      	movs	r2, #0
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001334:	f000 f92d 	bl	8001592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001338:	4a06      	ldr	r2, [pc, #24]	; (8001354 <HAL_InitTick+0x5c>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	e000      	b.n	8001344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000000 	.word	0x20000000
 8001350:	20000008 	.word	0x20000008
 8001354:	20000004 	.word	0x20000004

08001358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <HAL_IncTick+0x20>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	461a      	mov	r2, r3
 8001362:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x24>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4413      	add	r3, r2
 8001368:	4a04      	ldr	r2, [pc, #16]	; (800137c <HAL_IncTick+0x24>)
 800136a:	6013      	str	r3, [r2, #0]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000008 	.word	0x20000008
 800137c:	2000012c 	.word	0x2000012c

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	2000012c 	.word	0x2000012c

08001398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a0:	f7ff ffee 	bl	8001380 <HAL_GetTick>
 80013a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013b0:	d005      	beq.n	80013be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013b2:	4b09      	ldr	r3, [pc, #36]	; (80013d8 <HAL_Delay+0x40>)
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	461a      	mov	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013be:	bf00      	nop
 80013c0:	f7ff ffde 	bl	8001380 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d8f7      	bhi.n	80013c0 <HAL_Delay+0x28>
  {
  }
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	20000008 	.word	0x20000008

080013dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b480      	push	{r7}
 80013de:	b085      	sub	sp, #20
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ec:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013f2:	68ba      	ldr	r2, [r7, #8]
 80013f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f8:	4013      	ands	r3, r2
 80013fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800140c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140e:	4a04      	ldr	r2, [pc, #16]	; (8001420 <__NVIC_SetPriorityGrouping+0x44>)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	60d3      	str	r3, [r2, #12]
}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <__NVIC_GetPriorityGrouping+0x18>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	f003 0307 	and.w	r3, r3, #7
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00

08001440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	db0b      	blt.n	800146a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	f003 021f 	and.w	r2, r3, #31
 8001458:	4907      	ldr	r1, [pc, #28]	; (8001478 <__NVIC_EnableIRQ+0x38>)
 800145a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145e:	095b      	lsrs	r3, r3, #5
 8001460:	2001      	movs	r0, #1
 8001462:	fa00 f202 	lsl.w	r2, r0, r2
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000e100 	.word	0xe000e100

0800147c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148c:	2b00      	cmp	r3, #0
 800148e:	db0a      	blt.n	80014a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	b2da      	uxtb	r2, r3
 8001494:	490c      	ldr	r1, [pc, #48]	; (80014c8 <__NVIC_SetPriority+0x4c>)
 8001496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	440b      	add	r3, r1
 80014a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a4:	e00a      	b.n	80014bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <__NVIC_SetPriority+0x50>)
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	3b04      	subs	r3, #4
 80014b4:	0112      	lsls	r2, r2, #4
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	440b      	add	r3, r1
 80014ba:	761a      	strb	r2, [r3, #24]
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f003 0307 	and.w	r3, r3, #7
 80014e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	f1c3 0307 	rsb	r3, r3, #7
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	bf28      	it	cs
 80014ee:	2304      	movcs	r3, #4
 80014f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	3304      	adds	r3, #4
 80014f6:	2b06      	cmp	r3, #6
 80014f8:	d902      	bls.n	8001500 <NVIC_EncodePriority+0x30>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3b03      	subs	r3, #3
 80014fe:	e000      	b.n	8001502 <NVIC_EncodePriority+0x32>
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43da      	mvns	r2, r3
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	401a      	ands	r2, r3
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001518:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa01 f303 	lsl.w	r3, r1, r3
 8001522:	43d9      	mvns	r1, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	4313      	orrs	r3, r2
         );
}
 800152a:	4618      	mov	r0, r3
 800152c:	3724      	adds	r7, #36	; 0x24
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001548:	d301      	bcc.n	800154e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154a:	2301      	movs	r3, #1
 800154c:	e00f      	b.n	800156e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154e:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <SysTick_Config+0x40>)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3b01      	subs	r3, #1
 8001554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001556:	210f      	movs	r1, #15
 8001558:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800155c:	f7ff ff8e 	bl	800147c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <SysTick_Config+0x40>)
 8001562:	2200      	movs	r2, #0
 8001564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <SysTick_Config+0x40>)
 8001568:	2207      	movs	r2, #7
 800156a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	e000e010 	.word	0xe000e010

0800157c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ff29 	bl	80013dc <__NVIC_SetPriorityGrouping>
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a4:	f7ff ff3e 	bl	8001424 <__NVIC_GetPriorityGrouping>
 80015a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	6978      	ldr	r0, [r7, #20]
 80015b0:	f7ff ff8e 	bl	80014d0 <NVIC_EncodePriority>
 80015b4:	4602      	mov	r2, r0
 80015b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ba:	4611      	mov	r1, r2
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff5d 	bl	800147c <__NVIC_SetPriority>
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	4603      	mov	r3, r0
 80015d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff31 	bl	8001440 <__NVIC_EnableIRQ>
}
 80015de:	bf00      	nop
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b082      	sub	sp, #8
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ffa2 	bl	8001538 <SysTick_Config>
 80015f4:	4603      	mov	r3, r0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	; 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800160e:	2300      	movs	r3, #0
 8001610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001616:	2300      	movs	r3, #0
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	e159      	b.n	80018d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800161c:	2201      	movs	r2, #1
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	429a      	cmp	r2, r3
 8001636:	f040 8148 	bne.w	80018ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d00b      	beq.n	800165a <HAL_GPIO_Init+0x5a>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	2b02      	cmp	r3, #2
 8001648:	d007      	beq.n	800165a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800164e:	2b11      	cmp	r3, #17
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b12      	cmp	r3, #18
 8001658:	d130      	bne.n	80016bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	2203      	movs	r2, #3
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43db      	mvns	r3, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	68da      	ldr	r2, [r3, #12]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001690:	2201      	movs	r2, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	091b      	lsrs	r3, r3, #4
 80016a6:	f003 0201 	and.w	r2, r3, #1
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	69ba      	ldr	r2, [r7, #24]
 80016d0:	4013      	ands	r3, r2
 80016d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0xfc>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d123      	bne.n	8001744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	08da      	lsrs	r2, r3, #3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3208      	adds	r2, #8
 8001704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	f003 0307 	and.w	r3, r3, #7
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	691a      	ldr	r2, [r3, #16]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f003 0307 	and.w	r3, r3, #7
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4313      	orrs	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	69b9      	ldr	r1, [r7, #24]
 8001740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4013      	ands	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 0203 	and.w	r2, r3, #3
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4313      	orrs	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80a2 	beq.w	80018ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b56      	ldr	r3, [pc, #344]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a55      	ldr	r2, [pc, #340]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 8001790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_GPIO_Init+0x2e4>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017a2:	4a51      	ldr	r2, [pc, #324]	; (80018e8 <HAL_GPIO_Init+0x2e8>)
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	3302      	adds	r3, #2
 80017aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	220f      	movs	r2, #15
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a48      	ldr	r2, [pc, #288]	; (80018ec <HAL_GPIO_Init+0x2ec>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x202>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a47      	ldr	r2, [pc, #284]	; (80018f0 <HAL_GPIO_Init+0x2f0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x1fe>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a46      	ldr	r2, [pc, #280]	; (80018f4 <HAL_GPIO_Init+0x2f4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x1fa>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <HAL_GPIO_Init+0x2f8>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x1f6>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a44      	ldr	r2, [pc, #272]	; (80018fc <HAL_GPIO_Init+0x2fc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x1f2>
 80017ee:	2304      	movs	r3, #4
 80017f0:	e008      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017f6:	2303      	movs	r3, #3
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x204>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x204>
 8001802:	2300      	movs	r3, #0
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001814:	4934      	ldr	r1, [pc, #208]	; (80018e8 <HAL_GPIO_Init+0x2e8>)
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	43db      	mvns	r3, r3
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	4013      	ands	r3, r2
 8001830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001846:	4a2e      	ldr	r2, [pc, #184]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800184c:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <HAL_GPIO_Init+0x300>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001870:	4a23      	ldr	r2, [pc, #140]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <HAL_GPIO_Init+0x300>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800189a:	4a19      	ldr	r2, [pc, #100]	; (8001900 <HAL_GPIO_Init+0x300>)
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a0:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_GPIO_Init+0x300>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	43db      	mvns	r3, r3
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	4013      	ands	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c4:	4a0e      	ldr	r2, [pc, #56]	; (8001900 <HAL_GPIO_Init+0x300>)
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	3301      	adds	r3, #1
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	2b0f      	cmp	r3, #15
 80018d4:	f67f aea2 	bls.w	800161c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018d8:	bf00      	nop
 80018da:	3724      	adds	r7, #36	; 0x24
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40013800 	.word	0x40013800
 80018ec:	40020000 	.word	0x40020000
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40021000 	.word	0x40021000
 8001900:	40013c00 	.word	0x40013c00

08001904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	460b      	mov	r3, r1
 800190e:	807b      	strh	r3, [r7, #2]
 8001910:	4613      	mov	r3, r2
 8001912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001914:	787b      	ldrb	r3, [r7, #1]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800191a:	887a      	ldrh	r2, [r7, #2]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	041a      	lsls	r2, r3, #16
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	619a      	str	r2, [r3, #24]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
	...

08001938 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e25b      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d075      	beq.n	8001a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001956:	4ba3      	ldr	r3, [pc, #652]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d00c      	beq.n	800197c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001962:	4ba0      	ldr	r3, [pc, #640]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196a:	2b08      	cmp	r3, #8
 800196c:	d112      	bne.n	8001994 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800196e:	4b9d      	ldr	r3, [pc, #628]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800197a:	d10b      	bne.n	8001994 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800197c:	4b99      	ldr	r3, [pc, #612]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001984:	2b00      	cmp	r3, #0
 8001986:	d05b      	beq.n	8001a40 <HAL_RCC_OscConfig+0x108>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d157      	bne.n	8001a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e236      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800199c:	d106      	bne.n	80019ac <HAL_RCC_OscConfig+0x74>
 800199e:	4b91      	ldr	r3, [pc, #580]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a90      	ldr	r2, [pc, #576]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019a8:	6013      	str	r3, [r2, #0]
 80019aa:	e01d      	b.n	80019e8 <HAL_RCC_OscConfig+0xb0>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b4:	d10c      	bne.n	80019d0 <HAL_RCC_OscConfig+0x98>
 80019b6:	4b8b      	ldr	r3, [pc, #556]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a8a      	ldr	r2, [pc, #552]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019c0:	6013      	str	r3, [r2, #0]
 80019c2:	4b88      	ldr	r3, [pc, #544]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a87      	ldr	r2, [pc, #540]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	e00b      	b.n	80019e8 <HAL_RCC_OscConfig+0xb0>
 80019d0:	4b84      	ldr	r3, [pc, #528]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a83      	ldr	r2, [pc, #524]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b81      	ldr	r3, [pc, #516]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a80      	ldr	r2, [pc, #512]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f0:	f7ff fcc6 	bl	8001380 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fcc2 	bl	8001380 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e1fb      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	4b76      	ldr	r3, [pc, #472]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0xc0>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fcb2 	bl	8001380 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fcae 	bl	8001380 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1e7      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	4b6c      	ldr	r3, [pc, #432]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0xe8>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d063      	beq.n	8001b16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a4e:	4b65      	ldr	r3, [pc, #404]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d00b      	beq.n	8001a72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a5a:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d11c      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a66:	4b5f      	ldr	r3, [pc, #380]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d116      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a72:	4b5c      	ldr	r3, [pc, #368]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <HAL_RCC_OscConfig+0x152>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e1bb      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a8a:	4b56      	ldr	r3, [pc, #344]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	4952      	ldr	r1, [pc, #328]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9e:	e03a      	b.n	8001b16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d020      	beq.n	8001aea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa8:	4b4f      	ldr	r3, [pc, #316]	; (8001be8 <HAL_RCC_OscConfig+0x2b0>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aae:	f7ff fc67 	bl	8001380 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fc63 	bl	8001380 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e19c      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4940      	ldr	r1, [pc, #256]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	600b      	str	r3, [r1, #0]
 8001ae8:	e015      	b.n	8001b16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aea:	4b3f      	ldr	r3, [pc, #252]	; (8001be8 <HAL_RCC_OscConfig+0x2b0>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff fc46 	bl	8001380 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af8:	f7ff fc42 	bl	8001380 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e17b      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	4b36      	ldr	r3, [pc, #216]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d030      	beq.n	8001b84 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d016      	beq.n	8001b58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2a:	4b30      	ldr	r3, [pc, #192]	; (8001bec <HAL_RCC_OscConfig+0x2b4>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b30:	f7ff fc26 	bl	8001380 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b38:	f7ff fc22 	bl	8001380 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e15b      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x200>
 8001b56:	e015      	b.n	8001b84 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <HAL_RCC_OscConfig+0x2b4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b5e:	f7ff fc0f 	bl	8001380 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b66:	f7ff fc0b 	bl	8001380 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e144      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f0      	bne.n	8001b66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a0 	beq.w	8001cd2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10f      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b0f      	ldr	r3, [pc, #60]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a0e      	ldr	r2, [pc, #56]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b0c      	ldr	r3, [pc, #48]	; (8001be4 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_RCC_OscConfig+0x2b8>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d121      	bne.n	8001c12 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_RCC_OscConfig+0x2b8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_RCC_OscConfig+0x2b8>)
 8001bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bda:	f7ff fbd1 	bl	8001380 <HAL_GetTick>
 8001bde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be0:	e011      	b.n	8001c06 <HAL_RCC_OscConfig+0x2ce>
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	42470000 	.word	0x42470000
 8001bec:	42470e80 	.word	0x42470e80
 8001bf0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf4:	f7ff fbc4 	bl	8001380 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e0fd      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c06:	4b81      	ldr	r3, [pc, #516]	; (8001e0c <HAL_RCC_OscConfig+0x4d4>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d106      	bne.n	8001c28 <HAL_RCC_OscConfig+0x2f0>
 8001c1a:	4b7d      	ldr	r3, [pc, #500]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c1e:	4a7c      	ldr	r2, [pc, #496]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	6713      	str	r3, [r2, #112]	; 0x70
 8001c26:	e01c      	b.n	8001c62 <HAL_RCC_OscConfig+0x32a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d10c      	bne.n	8001c4a <HAL_RCC_OscConfig+0x312>
 8001c30:	4b77      	ldr	r3, [pc, #476]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c34:	4a76      	ldr	r2, [pc, #472]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c36:	f043 0304 	orr.w	r3, r3, #4
 8001c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c3c:	4b74      	ldr	r3, [pc, #464]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a73      	ldr	r2, [pc, #460]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	e00b      	b.n	8001c62 <HAL_RCC_OscConfig+0x32a>
 8001c4a:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a70      	ldr	r2, [pc, #448]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c50:	f023 0301 	bic.w	r3, r3, #1
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
 8001c56:	4b6e      	ldr	r3, [pc, #440]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5a:	4a6d      	ldr	r2, [pc, #436]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c5c:	f023 0304 	bic.w	r3, r3, #4
 8001c60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d015      	beq.n	8001c96 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c6a:	f7ff fb89 	bl	8001380 <HAL_GetTick>
 8001c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c70:	e00a      	b.n	8001c88 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c72:	f7ff fb85 	bl	8001380 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e0bc      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0ee      	beq.n	8001c72 <HAL_RCC_OscConfig+0x33a>
 8001c94:	e014      	b.n	8001cc0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fb73 	bl	8001380 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9c:	e00a      	b.n	8001cb4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9e:	f7ff fb6f 	bl	8001380 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e0a6      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb4:	4b56      	ldr	r3, [pc, #344]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ee      	bne.n	8001c9e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cc0:	7dfb      	ldrb	r3, [r7, #23]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc6:	4b52      	ldr	r3, [pc, #328]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a51      	ldr	r2, [pc, #324]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001ccc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8092 	beq.w	8001e00 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cdc:	4b4c      	ldr	r3, [pc, #304]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 030c 	and.w	r3, r3, #12
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d05c      	beq.n	8001da2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d141      	bne.n	8001d74 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf0:	4b48      	ldr	r3, [pc, #288]	; (8001e14 <HAL_RCC_OscConfig+0x4dc>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf6:	f7ff fb43 	bl	8001380 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cfe:	f7ff fb3f 	bl	8001380 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e078      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d10:	4b3f      	ldr	r3, [pc, #252]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	431a      	orrs	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2a:	019b      	lsls	r3, r3, #6
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d32:	085b      	lsrs	r3, r3, #1
 8001d34:	3b01      	subs	r3, #1
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	061b      	lsls	r3, r3, #24
 8001d40:	4933      	ldr	r1, [pc, #204]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d46:	4b33      	ldr	r3, [pc, #204]	; (8001e14 <HAL_RCC_OscConfig+0x4dc>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff fb18 	bl	8001380 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff fb14 	bl	8001380 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e04d      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x41c>
 8001d72:	e045      	b.n	8001e00 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <HAL_RCC_OscConfig+0x4dc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7ff fb01 	bl	8001380 <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d82:	f7ff fafd 	bl	8001380 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e036      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d94:	4b1e      	ldr	r3, [pc, #120]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x44a>
 8001da0:	e02e      	b.n	8001e00 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e029      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_RCC_OscConfig+0x4d8>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d11c      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d115      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dd0:	68fa      	ldr	r2, [r7, #12]
 8001dd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	687a      	ldr	r2, [r7, #4]
 8001dda:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10d      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d106      	bne.n	8001dfc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d001      	beq.n	8001e00 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	42470060 	.word	0x42470060

08001e18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0cc      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b68      	ldr	r3, [pc, #416]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d90c      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b65      	ldr	r3, [pc, #404]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	494d      	ldr	r1, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d044      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d119      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e07f      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d003      	beq.n	8001ed6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ed2:	2b03      	cmp	r3, #3
 8001ed4:	d107      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d109      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e06f      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e067      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f023 0203 	bic.w	r2, r3, #3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4934      	ldr	r1, [pc, #208]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f08:	f7ff fa3a 	bl	8001380 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff fa36 	bl	8001380 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e04f      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f26:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 020c 	and.w	r2, r3, #12
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d1eb      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f38:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 030f 	and.w	r3, r3, #15
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d20c      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f46:	4b22      	ldr	r3, [pc, #136]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e032      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4916      	ldr	r1, [pc, #88]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f9e:	f000 f821 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1c4>)
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1c8>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff f99a 	bl	80012f8 <HAL_InitTick>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023c00 	.word	0x40023c00
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	08003778 	.word	0x08003778
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	2b04      	cmp	r3, #4
 8002004:	d007      	beq.n	8002016 <HAL_RCC_GetSysClockFreq+0x32>
 8002006:	2b08      	cmp	r3, #8
 8002008:	d008      	beq.n	800201c <HAL_RCC_GetSysClockFreq+0x38>
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 80b4 	bne.w	8002178 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002010:	4b5e      	ldr	r3, [pc, #376]	; (800218c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002012:	60bb      	str	r3, [r7, #8]
       break;
 8002014:	e0b3      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002016:	4b5e      	ldr	r3, [pc, #376]	; (8002190 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002018:	60bb      	str	r3, [r7, #8]
      break;
 800201a:	e0b0      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800201c:	4b5a      	ldr	r3, [pc, #360]	; (8002188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002024:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002026:	4b58      	ldr	r3, [pc, #352]	; (8002188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d04a      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002032:	4b55      	ldr	r3, [pc, #340]	; (8002188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	099b      	lsrs	r3, r3, #6
 8002038:	f04f 0400 	mov.w	r4, #0
 800203c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	ea03 0501 	and.w	r5, r3, r1
 8002048:	ea04 0602 	and.w	r6, r4, r2
 800204c:	4629      	mov	r1, r5
 800204e:	4632      	mov	r2, r6
 8002050:	f04f 0300 	mov.w	r3, #0
 8002054:	f04f 0400 	mov.w	r4, #0
 8002058:	0154      	lsls	r4, r2, #5
 800205a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800205e:	014b      	lsls	r3, r1, #5
 8002060:	4619      	mov	r1, r3
 8002062:	4622      	mov	r2, r4
 8002064:	1b49      	subs	r1, r1, r5
 8002066:	eb62 0206 	sbc.w	r2, r2, r6
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	0194      	lsls	r4, r2, #6
 8002074:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002078:	018b      	lsls	r3, r1, #6
 800207a:	1a5b      	subs	r3, r3, r1
 800207c:	eb64 0402 	sbc.w	r4, r4, r2
 8002080:	f04f 0100 	mov.w	r1, #0
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	00e2      	lsls	r2, r4, #3
 800208a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800208e:	00d9      	lsls	r1, r3, #3
 8002090:	460b      	mov	r3, r1
 8002092:	4614      	mov	r4, r2
 8002094:	195b      	adds	r3, r3, r5
 8002096:	eb44 0406 	adc.w	r4, r4, r6
 800209a:	f04f 0100 	mov.w	r1, #0
 800209e:	f04f 0200 	mov.w	r2, #0
 80020a2:	0262      	lsls	r2, r4, #9
 80020a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020a8:	0259      	lsls	r1, r3, #9
 80020aa:	460b      	mov	r3, r1
 80020ac:	4614      	mov	r4, r2
 80020ae:	4618      	mov	r0, r3
 80020b0:	4621      	mov	r1, r4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f04f 0400 	mov.w	r4, #0
 80020b8:	461a      	mov	r2, r3
 80020ba:	4623      	mov	r3, r4
 80020bc:	f7fe f88c 	bl	80001d8 <__aeabi_uldivmod>
 80020c0:	4603      	mov	r3, r0
 80020c2:	460c      	mov	r4, r1
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	e049      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c8:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	099b      	lsrs	r3, r3, #6
 80020ce:	f04f 0400 	mov.w	r4, #0
 80020d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	ea03 0501 	and.w	r5, r3, r1
 80020de:	ea04 0602 	and.w	r6, r4, r2
 80020e2:	4629      	mov	r1, r5
 80020e4:	4632      	mov	r2, r6
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	f04f 0400 	mov.w	r4, #0
 80020ee:	0154      	lsls	r4, r2, #5
 80020f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020f4:	014b      	lsls	r3, r1, #5
 80020f6:	4619      	mov	r1, r3
 80020f8:	4622      	mov	r2, r4
 80020fa:	1b49      	subs	r1, r1, r5
 80020fc:	eb62 0206 	sbc.w	r2, r2, r6
 8002100:	f04f 0300 	mov.w	r3, #0
 8002104:	f04f 0400 	mov.w	r4, #0
 8002108:	0194      	lsls	r4, r2, #6
 800210a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800210e:	018b      	lsls	r3, r1, #6
 8002110:	1a5b      	subs	r3, r3, r1
 8002112:	eb64 0402 	sbc.w	r4, r4, r2
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	00e2      	lsls	r2, r4, #3
 8002120:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002124:	00d9      	lsls	r1, r3, #3
 8002126:	460b      	mov	r3, r1
 8002128:	4614      	mov	r4, r2
 800212a:	195b      	adds	r3, r3, r5
 800212c:	eb44 0406 	adc.w	r4, r4, r6
 8002130:	f04f 0100 	mov.w	r1, #0
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	02a2      	lsls	r2, r4, #10
 800213a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800213e:	0299      	lsls	r1, r3, #10
 8002140:	460b      	mov	r3, r1
 8002142:	4614      	mov	r4, r2
 8002144:	4618      	mov	r0, r3
 8002146:	4621      	mov	r1, r4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f04f 0400 	mov.w	r4, #0
 800214e:	461a      	mov	r2, r3
 8002150:	4623      	mov	r3, r4
 8002152:	f7fe f841 	bl	80001d8 <__aeabi_uldivmod>
 8002156:	4603      	mov	r3, r0
 8002158:	460c      	mov	r4, r1
 800215a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800215c:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	0c1b      	lsrs	r3, r3, #16
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	3301      	adds	r3, #1
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	fbb2 f3f3 	udiv	r3, r2, r3
 8002174:	60bb      	str	r3, [r7, #8]
      break;
 8002176:	e002      	b.n	800217e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800217a:	60bb      	str	r3, [r7, #8]
      break;
 800217c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800217e:	68bb      	ldr	r3, [r7, #8]
}
 8002180:	4618      	mov	r0, r3
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	00f42400 	.word	0x00f42400
 8002190:	007a1200 	.word	0x007a1200

08002194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000

080021ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021b0:	f7ff fff0 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021b4:	4601      	mov	r1, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0a9b      	lsrs	r3, r3, #10
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021c2:	5cd3      	ldrb	r3, [r2, r3]
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08003788 	.word	0x08003788

080021d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021d8:	f7ff ffdc 	bl	8002194 <HAL_RCC_GetHCLKFreq>
 80021dc:	4601      	mov	r1, r0
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	0b5b      	lsrs	r3, r3, #13
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	4a03      	ldr	r2, [pc, #12]	; (80021f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	08003788 	.word	0x08003788

080021fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e056      	b.n	80022bc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7fe fef3 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002244:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	431a      	orrs	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	699b      	ldr	r3, [r3, #24]
 8002266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	ea42 0103 	orr.w	r1, r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	f003 0104 	and.w	r1, r3, #4
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	69da      	ldr	r2, [r3, #28]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d101      	bne.n	80022e6 <HAL_SPI_Transmit+0x22>
 80022e2:	2302      	movs	r3, #2
 80022e4:	e11e      	b.n	8002524 <HAL_SPI_Transmit+0x260>
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022ee:	f7ff f847 	bl	8001380 <HAL_GetTick>
 80022f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80022f4:	88fb      	ldrh	r3, [r7, #6]
 80022f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	2b01      	cmp	r3, #1
 8002302:	d002      	beq.n	800230a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002304:	2302      	movs	r3, #2
 8002306:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002308:	e103      	b.n	8002512 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <HAL_SPI_Transmit+0x52>
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	77fb      	strb	r3, [r7, #31]
    goto error;
 800231a:	e0fa      	b.n	8002512 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2203      	movs	r2, #3
 8002320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002362:	d107      	bne.n	8002374 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002372:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800237e:	2b40      	cmp	r3, #64	; 0x40
 8002380:	d007      	beq.n	8002392 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800239a:	d14b      	bne.n	8002434 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_SPI_Transmit+0xe6>
 80023a4:	8afb      	ldrh	r3, [r7, #22]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d13e      	bne.n	8002428 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	881a      	ldrh	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	1c9a      	adds	r2, r3, #2
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80023ce:	e02b      	b.n	8002428 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d112      	bne.n	8002404 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	881a      	ldrh	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	1c9a      	adds	r2, r3, #2
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	86da      	strh	r2, [r3, #54]	; 0x36
 8002402:	e011      	b.n	8002428 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002404:	f7fe ffbc 	bl	8001380 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d803      	bhi.n	800241c <HAL_SPI_Transmit+0x158>
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241a:	d102      	bne.n	8002422 <HAL_SPI_Transmit+0x15e>
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002426:	e074      	b.n	8002512 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800242c:	b29b      	uxth	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1ce      	bne.n	80023d0 <HAL_SPI_Transmit+0x10c>
 8002432:	e04c      	b.n	80024ce <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <HAL_SPI_Transmit+0x17e>
 800243c:	8afb      	ldrh	r3, [r7, #22]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d140      	bne.n	80024c4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	330c      	adds	r3, #12
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800245e:	b29b      	uxth	r3, r3
 8002460:	3b01      	subs	r3, #1
 8002462:	b29a      	uxth	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002468:	e02c      	b.n	80024c4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b02      	cmp	r3, #2
 8002476:	d113      	bne.n	80024a0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	330c      	adds	r3, #12
 8002482:	7812      	ldrb	r2, [r2, #0]
 8002484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	1c5a      	adds	r2, r3, #1
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002494:	b29b      	uxth	r3, r3
 8002496:	3b01      	subs	r3, #1
 8002498:	b29a      	uxth	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	86da      	strh	r2, [r3, #54]	; 0x36
 800249e:	e011      	b.n	80024c4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024a0:	f7fe ff6e 	bl	8001380 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d803      	bhi.n	80024b8 <HAL_SPI_Transmit+0x1f4>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b6:	d102      	bne.n	80024be <HAL_SPI_Transmit+0x1fa>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80024c2:	e026      	b.n	8002512 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1cd      	bne.n	800246a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	6839      	ldr	r1, [r7, #0]
 80024d2:	68f8      	ldr	r0, [r7, #12]
 80024d4:	f000 fa36 	bl	8002944 <SPI_EndRxTxTransaction>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	77fb      	strb	r3, [r7, #31]
 800250e:	e000      	b.n	8002512 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002510:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002522:	7ffb      	ldrb	r3, [r7, #31]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3720      	adds	r7, #32
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	; 0x30
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800253a:	2301      	movs	r3, #1
 800253c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_SPI_TransmitReceive+0x26>
 800254e:	2302      	movs	r3, #2
 8002550:	e18a      	b.n	8002868 <HAL_SPI_TransmitReceive+0x33c>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800255a:	f7fe ff11 	bl	8001380 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002570:	887b      	ldrh	r3, [r7, #2]
 8002572:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002574:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002578:	2b01      	cmp	r3, #1
 800257a:	d00f      	beq.n	800259c <HAL_SPI_TransmitReceive+0x70>
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002582:	d107      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d103      	bne.n	8002594 <HAL_SPI_TransmitReceive+0x68>
 800258c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002590:	2b04      	cmp	r3, #4
 8002592:	d003      	beq.n	800259c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002594:	2302      	movs	r3, #2
 8002596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800259a:	e15b      	b.n	8002854 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x82>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <HAL_SPI_TransmitReceive+0x82>
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d103      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025b4:	e14e      	b.n	8002854 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d003      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2205      	movs	r2, #5
 80025c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	887a      	ldrh	r2, [r7, #2]
 80025da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	887a      	ldrh	r2, [r7, #2]
 80025ec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	887a      	ldrh	r2, [r7, #2]
 80025f2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d007      	beq.n	800261e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002626:	d178      	bne.n	800271a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <HAL_SPI_TransmitReceive+0x10a>
 8002630:	8b7b      	ldrh	r3, [r7, #26]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d166      	bne.n	8002704 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	881a      	ldrh	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002646:	1c9a      	adds	r2, r3, #2
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002650:	b29b      	uxth	r3, r3
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800265a:	e053      	b.n	8002704 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d11b      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x176>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800266e:	b29b      	uxth	r3, r3
 8002670:	2b00      	cmp	r3, #0
 8002672:	d016      	beq.n	80026a2 <HAL_SPI_TransmitReceive+0x176>
 8002674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002676:	2b01      	cmp	r3, #1
 8002678:	d113      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	881a      	ldrh	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	1c9a      	adds	r2, r3, #2
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002694:	b29b      	uxth	r3, r3
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <HAL_SPI_TransmitReceive+0x1b8>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d014      	beq.n	80026e4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	b292      	uxth	r2, r2
 80026c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	1c9a      	adds	r2, r3, #2
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026e0:	2301      	movs	r3, #1
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026e4:	f7fe fe4c 	bl	8001380 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d807      	bhi.n	8002704 <HAL_SPI_TransmitReceive+0x1d8>
 80026f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026fa:	d003      	beq.n	8002704 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002702:	e0a7      	b.n	8002854 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002708:	b29b      	uxth	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1a6      	bne.n	800265c <HAL_SPI_TransmitReceive+0x130>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002712:	b29b      	uxth	r3, r3
 8002714:	2b00      	cmp	r3, #0
 8002716:	d1a1      	bne.n	800265c <HAL_SPI_TransmitReceive+0x130>
 8002718:	e07c      	b.n	8002814 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x1fc>
 8002722:	8b7b      	ldrh	r3, [r7, #26]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d16b      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274e:	e057      	b.n	8002800 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d11c      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x26c>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d017      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x26c>
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	2b01      	cmp	r3, #1
 800276c:	d114      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d119      	bne.n	80027da <HAL_SPI_TransmitReceive+0x2ae>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d014      	beq.n	80027da <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c2:	1c5a      	adds	r2, r3, #1
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027da:	f7fe fdd1 	bl	8001380 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d803      	bhi.n	80027f2 <HAL_SPI_TransmitReceive+0x2c6>
 80027ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f0:	d102      	bne.n	80027f8 <HAL_SPI_TransmitReceive+0x2cc>
 80027f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d103      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80027fe:	e029      	b.n	8002854 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1a2      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x224>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d19d      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f893 	bl	8002944 <SPI_EndRxTxTransaction>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2220      	movs	r2, #32
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002830:	e010      	b.n	8002854 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	e000      	b.n	8002854 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002852:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002864:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002868:	4618      	mov	r0, r3
 800286a:	3730      	adds	r7, #48	; 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002880:	e04c      	b.n	800291c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002888:	d048      	beq.n	800291c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800288a:	f7fe fd79 	bl	8001380 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d902      	bls.n	80028a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d13d      	bne.n	800291c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028b8:	d111      	bne.n	80028de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028c2:	d004      	beq.n	80028ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028cc:	d107      	bne.n	80028de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d10f      	bne.n	8002908 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002906:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e00f      	b.n	800293c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	4013      	ands	r3, r2
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	429a      	cmp	r2, r3
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	429a      	cmp	r2, r3
 8002938:	d1a3      	bne.n	8002882 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b088      	sub	sp, #32
 8002948:	af02      	add	r7, sp, #8
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <SPI_EndRxTxTransaction+0x7c>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1b      	ldr	r2, [pc, #108]	; (80029c4 <SPI_EndRxTxTransaction+0x80>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0d5b      	lsrs	r3, r3, #21
 800295c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002960:	fb02 f303 	mul.w	r3, r2, r3
 8002964:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800296e:	d112      	bne.n	8002996 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	2200      	movs	r2, #0
 8002978:	2180      	movs	r1, #128	; 0x80
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f7ff ff78 	bl	8002870 <SPI_WaitFlagStateUntilTimeout>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	f043 0220 	orr.w	r2, r3, #32
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e00f      	b.n	80029b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3b01      	subs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d0f2      	beq.n	8002996 <SPI_EndRxTxTransaction+0x52>
 80029b0:	e000      	b.n	80029b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80029b2:	bf00      	nop
  }

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3718      	adds	r7, #24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	165e9f81 	.word	0x165e9f81

080029c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e01d      	b.n	8002a16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d106      	bne.n	80029f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fe fb78 	bl	80010e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2202      	movs	r2, #2
 80029f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	4619      	mov	r1, r3
 8002a06:	4610      	mov	r0, r2
 8002a08:	f000 f93a 	bl	8002c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d122      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d11b      	bne.n	8002a7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f06f 0202 	mvn.w	r2, #2
 8002a4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8ee 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002a66:	e005      	b.n	8002a74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f8e0 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f8f1 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d122      	bne.n	8002ace <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d11b      	bne.n	8002ace <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f06f 0204 	mvn.w	r2, #4
 8002a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8c4 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002aba:	e005      	b.n	8002ac8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f000 f8b6 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8c7 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d122      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0308 	and.w	r3, r3, #8
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d11b      	bne.n	8002b22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f06f 0208 	mvn.w	r2, #8
 8002af2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2204      	movs	r2, #4
 8002af8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f89a 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b0e:	e005      	b.n	8002b1c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 f88c 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f89d 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d122      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f003 0310 	and.w	r3, r3, #16
 8002b3a:	2b10      	cmp	r3, #16
 8002b3c:	d11b      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f06f 0210 	mvn.w	r2, #16
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2208      	movs	r2, #8
 8002b4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f870 	bl	8002c42 <HAL_TIM_IC_CaptureCallback>
 8002b62:	e005      	b.n	8002b70 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f862 	bl	8002c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f873 	bl	8002c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d10e      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0201 	mvn.w	r2, #1
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f7fd fecd 	bl	800093c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d10e      	bne.n	8002bce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bba:	2b80      	cmp	r3, #128	; 0x80
 8002bbc:	d107      	bne.n	8002bce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f8e3 	bl	8002d94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd8:	2b40      	cmp	r3, #64	; 0x40
 8002bda:	d10e      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b40      	cmp	r3, #64	; 0x40
 8002be8:	d107      	bne.n	8002bfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f838 	bl	8002c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b20      	cmp	r3, #32
 8002c06:	d10e      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d107      	bne.n	8002c26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0220 	mvn.w	r2, #32
 8002c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f8ad 	bl	8002d80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c5e:	bf00      	nop
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
	...

08002c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a34      	ldr	r2, [pc, #208]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d00f      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9e:	d00b      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a31      	ldr	r2, [pc, #196]	; (8002d68 <TIM_Base_SetConfig+0xe8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a30      	ldr	r2, [pc, #192]	; (8002d6c <TIM_Base_SetConfig+0xec>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d003      	beq.n	8002cb8 <TIM_Base_SetConfig+0x38>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2f      	ldr	r2, [pc, #188]	; (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d108      	bne.n	8002cca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d01b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd8:	d017      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	; (8002d68 <TIM_Base_SetConfig+0xe8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d013      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a21      	ldr	r2, [pc, #132]	; (8002d6c <TIM_Base_SetConfig+0xec>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00f      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a20      	ldr	r2, [pc, #128]	; (8002d70 <TIM_Base_SetConfig+0xf0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00b      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1f      	ldr	r2, [pc, #124]	; (8002d74 <TIM_Base_SetConfig+0xf4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d007      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1e      	ldr	r2, [pc, #120]	; (8002d78 <TIM_Base_SetConfig+0xf8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d003      	beq.n	8002d0a <TIM_Base_SetConfig+0x8a>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1d      	ldr	r2, [pc, #116]	; (8002d7c <TIM_Base_SetConfig+0xfc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d108      	bne.n	8002d1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a08      	ldr	r2, [pc, #32]	; (8002d64 <TIM_Base_SetConfig+0xe4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d103      	bne.n	8002d50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	615a      	str	r2, [r3, #20]
}
 8002d56:	bf00      	nop
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	40010000 	.word	0x40010000
 8002d68:	40000400 	.word	0x40000400
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40000c00 	.word	0x40000c00
 8002d74:	40014000 	.word	0x40014000
 8002d78:	40014400 	.word	0x40014400
 8002d7c:	40014800 	.word	0x40014800

08002d80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e03f      	b.n	8002e3a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7fe f9b0 	bl	8001134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2224      	movs	r2, #36	; 0x24
 8002dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f90b 	bl	8003008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695a      	ldr	r2, [r3, #20]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68da      	ldr	r2, [r3, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b088      	sub	sp, #32
 8002e46:	af02      	add	r7, sp, #8
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	603b      	str	r3, [r7, #0]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	2b20      	cmp	r3, #32
 8002e60:	f040 8083 	bne.w	8002f6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_UART_Transmit+0x2e>
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e07b      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_UART_Transmit+0x40>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e074      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2221      	movs	r2, #33	; 0x21
 8002e94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e98:	f7fe fa72 	bl	8001380 <HAL_GetTick>
 8002e9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	88fa      	ldrh	r2, [r7, #6]
 8002ea2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002eb2:	e042      	b.n	8002f3a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eca:	d122      	bne.n	8002f12 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f84c 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e042      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	461a      	mov	r2, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d103      	bne.n	8002f0a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	3302      	adds	r3, #2
 8002f06:	60bb      	str	r3, [r7, #8]
 8002f08:	e017      	b.n	8002f3a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	e013      	b.n	8002f3a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2180      	movs	r1, #128	; 0x80
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f829 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e01f      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	60ba      	str	r2, [r7, #8]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1b7      	bne.n	8002eb4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	2140      	movs	r1, #64	; 0x40
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f810 	bl	8002f74 <UART_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e006      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	e000      	b.n	8002f6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f6a:	2302      	movs	r3, #2
  }
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	603b      	str	r3, [r7, #0]
 8002f80:	4613      	mov	r3, r2
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f84:	e02c      	b.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f8c:	d028      	beq.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f94:	f7fe f9f4 	bl	8001380 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d21d      	bcs.n	8002fe0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68da      	ldr	r2, [r3, #12]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e00f      	b.n	8003000 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d0c3      	beq.n	8002f86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	430a      	orrs	r2, r1
 8003026:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69db      	ldr	r3, [r3, #28]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800304a:	f023 030c 	bic.w	r3, r3, #12
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6812      	ldr	r2, [r2, #0]
 8003052:	68f9      	ldr	r1, [r7, #12]
 8003054:	430b      	orrs	r3, r1
 8003056:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003076:	f040 818b 	bne.w	8003390 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4ac1      	ldr	r2, [pc, #772]	; (8003384 <UART_SetConfig+0x37c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d005      	beq.n	8003090 <UART_SetConfig+0x88>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4abf      	ldr	r2, [pc, #764]	; (8003388 <UART_SetConfig+0x380>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f040 80bd 	bne.w	800320a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003090:	f7ff f8a0 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 8003094:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	461d      	mov	r5, r3
 800309a:	f04f 0600 	mov.w	r6, #0
 800309e:	46a8      	mov	r8, r5
 80030a0:	46b1      	mov	r9, r6
 80030a2:	eb18 0308 	adds.w	r3, r8, r8
 80030a6:	eb49 0409 	adc.w	r4, r9, r9
 80030aa:	4698      	mov	r8, r3
 80030ac:	46a1      	mov	r9, r4
 80030ae:	eb18 0805 	adds.w	r8, r8, r5
 80030b2:	eb49 0906 	adc.w	r9, r9, r6
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030ca:	4688      	mov	r8, r1
 80030cc:	4691      	mov	r9, r2
 80030ce:	eb18 0005 	adds.w	r0, r8, r5
 80030d2:	eb49 0106 	adc.w	r1, r9, r6
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	461d      	mov	r5, r3
 80030dc:	f04f 0600 	mov.w	r6, #0
 80030e0:	196b      	adds	r3, r5, r5
 80030e2:	eb46 0406 	adc.w	r4, r6, r6
 80030e6:	461a      	mov	r2, r3
 80030e8:	4623      	mov	r3, r4
 80030ea:	f7fd f875 	bl	80001d8 <__aeabi_uldivmod>
 80030ee:	4603      	mov	r3, r0
 80030f0:	460c      	mov	r4, r1
 80030f2:	461a      	mov	r2, r3
 80030f4:	4ba5      	ldr	r3, [pc, #660]	; (800338c <UART_SetConfig+0x384>)
 80030f6:	fba3 2302 	umull	r2, r3, r3, r2
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	461d      	mov	r5, r3
 8003104:	f04f 0600 	mov.w	r6, #0
 8003108:	46a9      	mov	r9, r5
 800310a:	46b2      	mov	sl, r6
 800310c:	eb19 0309 	adds.w	r3, r9, r9
 8003110:	eb4a 040a 	adc.w	r4, sl, sl
 8003114:	4699      	mov	r9, r3
 8003116:	46a2      	mov	sl, r4
 8003118:	eb19 0905 	adds.w	r9, r9, r5
 800311c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003120:	f04f 0100 	mov.w	r1, #0
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800312c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003134:	4689      	mov	r9, r1
 8003136:	4692      	mov	sl, r2
 8003138:	eb19 0005 	adds.w	r0, r9, r5
 800313c:	eb4a 0106 	adc.w	r1, sl, r6
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	461d      	mov	r5, r3
 8003146:	f04f 0600 	mov.w	r6, #0
 800314a:	196b      	adds	r3, r5, r5
 800314c:	eb46 0406 	adc.w	r4, r6, r6
 8003150:	461a      	mov	r2, r3
 8003152:	4623      	mov	r3, r4
 8003154:	f7fd f840 	bl	80001d8 <__aeabi_uldivmod>
 8003158:	4603      	mov	r3, r0
 800315a:	460c      	mov	r4, r1
 800315c:	461a      	mov	r2, r3
 800315e:	4b8b      	ldr	r3, [pc, #556]	; (800338c <UART_SetConfig+0x384>)
 8003160:	fba3 1302 	umull	r1, r3, r3, r2
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	2164      	movs	r1, #100	; 0x64
 8003168:	fb01 f303 	mul.w	r3, r1, r3
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3332      	adds	r3, #50	; 0x32
 8003172:	4a86      	ldr	r2, [pc, #536]	; (800338c <UART_SetConfig+0x384>)
 8003174:	fba2 2303 	umull	r2, r3, r2, r3
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003180:	4498      	add	r8, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	461d      	mov	r5, r3
 8003186:	f04f 0600 	mov.w	r6, #0
 800318a:	46a9      	mov	r9, r5
 800318c:	46b2      	mov	sl, r6
 800318e:	eb19 0309 	adds.w	r3, r9, r9
 8003192:	eb4a 040a 	adc.w	r4, sl, sl
 8003196:	4699      	mov	r9, r3
 8003198:	46a2      	mov	sl, r4
 800319a:	eb19 0905 	adds.w	r9, r9, r5
 800319e:	eb4a 0a06 	adc.w	sl, sl, r6
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031b6:	4689      	mov	r9, r1
 80031b8:	4692      	mov	sl, r2
 80031ba:	eb19 0005 	adds.w	r0, r9, r5
 80031be:	eb4a 0106 	adc.w	r1, sl, r6
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	461d      	mov	r5, r3
 80031c8:	f04f 0600 	mov.w	r6, #0
 80031cc:	196b      	adds	r3, r5, r5
 80031ce:	eb46 0406 	adc.w	r4, r6, r6
 80031d2:	461a      	mov	r2, r3
 80031d4:	4623      	mov	r3, r4
 80031d6:	f7fc ffff 	bl	80001d8 <__aeabi_uldivmod>
 80031da:	4603      	mov	r3, r0
 80031dc:	460c      	mov	r4, r1
 80031de:	461a      	mov	r2, r3
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <UART_SetConfig+0x384>)
 80031e2:	fba3 1302 	umull	r1, r3, r3, r2
 80031e6:	095b      	lsrs	r3, r3, #5
 80031e8:	2164      	movs	r1, #100	; 0x64
 80031ea:	fb01 f303 	mul.w	r3, r1, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	3332      	adds	r3, #50	; 0x32
 80031f4:	4a65      	ldr	r2, [pc, #404]	; (800338c <UART_SetConfig+0x384>)
 80031f6:	fba2 2303 	umull	r2, r3, r2, r3
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	f003 0207 	and.w	r2, r3, #7
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4442      	add	r2, r8
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	e26f      	b.n	80036ea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800320a:	f7fe ffcf 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 800320e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	461d      	mov	r5, r3
 8003214:	f04f 0600 	mov.w	r6, #0
 8003218:	46a8      	mov	r8, r5
 800321a:	46b1      	mov	r9, r6
 800321c:	eb18 0308 	adds.w	r3, r8, r8
 8003220:	eb49 0409 	adc.w	r4, r9, r9
 8003224:	4698      	mov	r8, r3
 8003226:	46a1      	mov	r9, r4
 8003228:	eb18 0805 	adds.w	r8, r8, r5
 800322c:	eb49 0906 	adc.w	r9, r9, r6
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800323c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003240:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003244:	4688      	mov	r8, r1
 8003246:	4691      	mov	r9, r2
 8003248:	eb18 0005 	adds.w	r0, r8, r5
 800324c:	eb49 0106 	adc.w	r1, r9, r6
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	461d      	mov	r5, r3
 8003256:	f04f 0600 	mov.w	r6, #0
 800325a:	196b      	adds	r3, r5, r5
 800325c:	eb46 0406 	adc.w	r4, r6, r6
 8003260:	461a      	mov	r2, r3
 8003262:	4623      	mov	r3, r4
 8003264:	f7fc ffb8 	bl	80001d8 <__aeabi_uldivmod>
 8003268:	4603      	mov	r3, r0
 800326a:	460c      	mov	r4, r1
 800326c:	461a      	mov	r2, r3
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <UART_SetConfig+0x384>)
 8003270:	fba3 2302 	umull	r2, r3, r3, r2
 8003274:	095b      	lsrs	r3, r3, #5
 8003276:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	461d      	mov	r5, r3
 800327e:	f04f 0600 	mov.w	r6, #0
 8003282:	46a9      	mov	r9, r5
 8003284:	46b2      	mov	sl, r6
 8003286:	eb19 0309 	adds.w	r3, r9, r9
 800328a:	eb4a 040a 	adc.w	r4, sl, sl
 800328e:	4699      	mov	r9, r3
 8003290:	46a2      	mov	sl, r4
 8003292:	eb19 0905 	adds.w	r9, r9, r5
 8003296:	eb4a 0a06 	adc.w	sl, sl, r6
 800329a:	f04f 0100 	mov.w	r1, #0
 800329e:	f04f 0200 	mov.w	r2, #0
 80032a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032ae:	4689      	mov	r9, r1
 80032b0:	4692      	mov	sl, r2
 80032b2:	eb19 0005 	adds.w	r0, r9, r5
 80032b6:	eb4a 0106 	adc.w	r1, sl, r6
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	461d      	mov	r5, r3
 80032c0:	f04f 0600 	mov.w	r6, #0
 80032c4:	196b      	adds	r3, r5, r5
 80032c6:	eb46 0406 	adc.w	r4, r6, r6
 80032ca:	461a      	mov	r2, r3
 80032cc:	4623      	mov	r3, r4
 80032ce:	f7fc ff83 	bl	80001d8 <__aeabi_uldivmod>
 80032d2:	4603      	mov	r3, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <UART_SetConfig+0x384>)
 80032da:	fba3 1302 	umull	r1, r3, r3, r2
 80032de:	095b      	lsrs	r3, r3, #5
 80032e0:	2164      	movs	r1, #100	; 0x64
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	3332      	adds	r3, #50	; 0x32
 80032ec:	4a27      	ldr	r2, [pc, #156]	; (800338c <UART_SetConfig+0x384>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	095b      	lsrs	r3, r3, #5
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032fa:	4498      	add	r8, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	461d      	mov	r5, r3
 8003300:	f04f 0600 	mov.w	r6, #0
 8003304:	46a9      	mov	r9, r5
 8003306:	46b2      	mov	sl, r6
 8003308:	eb19 0309 	adds.w	r3, r9, r9
 800330c:	eb4a 040a 	adc.w	r4, sl, sl
 8003310:	4699      	mov	r9, r3
 8003312:	46a2      	mov	sl, r4
 8003314:	eb19 0905 	adds.w	r9, r9, r5
 8003318:	eb4a 0a06 	adc.w	sl, sl, r6
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800332c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003330:	4689      	mov	r9, r1
 8003332:	4692      	mov	sl, r2
 8003334:	eb19 0005 	adds.w	r0, r9, r5
 8003338:	eb4a 0106 	adc.w	r1, sl, r6
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	461d      	mov	r5, r3
 8003342:	f04f 0600 	mov.w	r6, #0
 8003346:	196b      	adds	r3, r5, r5
 8003348:	eb46 0406 	adc.w	r4, r6, r6
 800334c:	461a      	mov	r2, r3
 800334e:	4623      	mov	r3, r4
 8003350:	f7fc ff42 	bl	80001d8 <__aeabi_uldivmod>
 8003354:	4603      	mov	r3, r0
 8003356:	460c      	mov	r4, r1
 8003358:	461a      	mov	r2, r3
 800335a:	4b0c      	ldr	r3, [pc, #48]	; (800338c <UART_SetConfig+0x384>)
 800335c:	fba3 1302 	umull	r1, r3, r3, r2
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	2164      	movs	r1, #100	; 0x64
 8003364:	fb01 f303 	mul.w	r3, r1, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3332      	adds	r3, #50	; 0x32
 800336e:	4a07      	ldr	r2, [pc, #28]	; (800338c <UART_SetConfig+0x384>)
 8003370:	fba2 2303 	umull	r2, r3, r2, r3
 8003374:	095b      	lsrs	r3, r3, #5
 8003376:	f003 0207 	and.w	r2, r3, #7
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4442      	add	r2, r8
 8003380:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003382:	e1b2      	b.n	80036ea <UART_SetConfig+0x6e2>
 8003384:	40011000 	.word	0x40011000
 8003388:	40011400 	.word	0x40011400
 800338c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4ad7      	ldr	r2, [pc, #860]	; (80036f4 <UART_SetConfig+0x6ec>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d005      	beq.n	80033a6 <UART_SetConfig+0x39e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4ad6      	ldr	r2, [pc, #856]	; (80036f8 <UART_SetConfig+0x6f0>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	f040 80d1 	bne.w	8003548 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80033a6:	f7fe ff15 	bl	80021d4 <HAL_RCC_GetPCLK2Freq>
 80033aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	469a      	mov	sl, r3
 80033b0:	f04f 0b00 	mov.w	fp, #0
 80033b4:	46d0      	mov	r8, sl
 80033b6:	46d9      	mov	r9, fp
 80033b8:	eb18 0308 	adds.w	r3, r8, r8
 80033bc:	eb49 0409 	adc.w	r4, r9, r9
 80033c0:	4698      	mov	r8, r3
 80033c2:	46a1      	mov	r9, r4
 80033c4:	eb18 080a 	adds.w	r8, r8, sl
 80033c8:	eb49 090b 	adc.w	r9, r9, fp
 80033cc:	f04f 0100 	mov.w	r1, #0
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033e0:	4688      	mov	r8, r1
 80033e2:	4691      	mov	r9, r2
 80033e4:	eb1a 0508 	adds.w	r5, sl, r8
 80033e8:	eb4b 0609 	adc.w	r6, fp, r9
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	4619      	mov	r1, r3
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	f04f 0300 	mov.w	r3, #0
 80033fa:	f04f 0400 	mov.w	r4, #0
 80033fe:	0094      	lsls	r4, r2, #2
 8003400:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003404:	008b      	lsls	r3, r1, #2
 8003406:	461a      	mov	r2, r3
 8003408:	4623      	mov	r3, r4
 800340a:	4628      	mov	r0, r5
 800340c:	4631      	mov	r1, r6
 800340e:	f7fc fee3 	bl	80001d8 <__aeabi_uldivmod>
 8003412:	4603      	mov	r3, r0
 8003414:	460c      	mov	r4, r1
 8003416:	461a      	mov	r2, r3
 8003418:	4bb8      	ldr	r3, [pc, #736]	; (80036fc <UART_SetConfig+0x6f4>)
 800341a:	fba3 2302 	umull	r2, r3, r3, r2
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	469b      	mov	fp, r3
 8003428:	f04f 0c00 	mov.w	ip, #0
 800342c:	46d9      	mov	r9, fp
 800342e:	46e2      	mov	sl, ip
 8003430:	eb19 0309 	adds.w	r3, r9, r9
 8003434:	eb4a 040a 	adc.w	r4, sl, sl
 8003438:	4699      	mov	r9, r3
 800343a:	46a2      	mov	sl, r4
 800343c:	eb19 090b 	adds.w	r9, r9, fp
 8003440:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003444:	f04f 0100 	mov.w	r1, #0
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003450:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003454:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003458:	4689      	mov	r9, r1
 800345a:	4692      	mov	sl, r2
 800345c:	eb1b 0509 	adds.w	r5, fp, r9
 8003460:	eb4c 060a 	adc.w	r6, ip, sl
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4619      	mov	r1, r3
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	f04f 0400 	mov.w	r4, #0
 8003476:	0094      	lsls	r4, r2, #2
 8003478:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800347c:	008b      	lsls	r3, r1, #2
 800347e:	461a      	mov	r2, r3
 8003480:	4623      	mov	r3, r4
 8003482:	4628      	mov	r0, r5
 8003484:	4631      	mov	r1, r6
 8003486:	f7fc fea7 	bl	80001d8 <__aeabi_uldivmod>
 800348a:	4603      	mov	r3, r0
 800348c:	460c      	mov	r4, r1
 800348e:	461a      	mov	r2, r3
 8003490:	4b9a      	ldr	r3, [pc, #616]	; (80036fc <UART_SetConfig+0x6f4>)
 8003492:	fba3 1302 	umull	r1, r3, r3, r2
 8003496:	095b      	lsrs	r3, r3, #5
 8003498:	2164      	movs	r1, #100	; 0x64
 800349a:	fb01 f303 	mul.w	r3, r1, r3
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	011b      	lsls	r3, r3, #4
 80034a2:	3332      	adds	r3, #50	; 0x32
 80034a4:	4a95      	ldr	r2, [pc, #596]	; (80036fc <UART_SetConfig+0x6f4>)
 80034a6:	fba2 2303 	umull	r2, r3, r2, r3
 80034aa:	095b      	lsrs	r3, r3, #5
 80034ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034b0:	4498      	add	r8, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	469b      	mov	fp, r3
 80034b6:	f04f 0c00 	mov.w	ip, #0
 80034ba:	46d9      	mov	r9, fp
 80034bc:	46e2      	mov	sl, ip
 80034be:	eb19 0309 	adds.w	r3, r9, r9
 80034c2:	eb4a 040a 	adc.w	r4, sl, sl
 80034c6:	4699      	mov	r9, r3
 80034c8:	46a2      	mov	sl, r4
 80034ca:	eb19 090b 	adds.w	r9, r9, fp
 80034ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034d2:	f04f 0100 	mov.w	r1, #0
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e6:	4689      	mov	r9, r1
 80034e8:	4692      	mov	sl, r2
 80034ea:	eb1b 0509 	adds.w	r5, fp, r9
 80034ee:	eb4c 060a 	adc.w	r6, ip, sl
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0094      	lsls	r4, r2, #2
 8003506:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800350a:	008b      	lsls	r3, r1, #2
 800350c:	461a      	mov	r2, r3
 800350e:	4623      	mov	r3, r4
 8003510:	4628      	mov	r0, r5
 8003512:	4631      	mov	r1, r6
 8003514:	f7fc fe60 	bl	80001d8 <__aeabi_uldivmod>
 8003518:	4603      	mov	r3, r0
 800351a:	460c      	mov	r4, r1
 800351c:	461a      	mov	r2, r3
 800351e:	4b77      	ldr	r3, [pc, #476]	; (80036fc <UART_SetConfig+0x6f4>)
 8003520:	fba3 1302 	umull	r1, r3, r3, r2
 8003524:	095b      	lsrs	r3, r3, #5
 8003526:	2164      	movs	r1, #100	; 0x64
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	3332      	adds	r3, #50	; 0x32
 8003532:	4a72      	ldr	r2, [pc, #456]	; (80036fc <UART_SetConfig+0x6f4>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	f003 020f 	and.w	r2, r3, #15
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4442      	add	r2, r8
 8003544:	609a      	str	r2, [r3, #8]
 8003546:	e0d0      	b.n	80036ea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003548:	f7fe fe30 	bl	80021ac <HAL_RCC_GetPCLK1Freq>
 800354c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	469a      	mov	sl, r3
 8003552:	f04f 0b00 	mov.w	fp, #0
 8003556:	46d0      	mov	r8, sl
 8003558:	46d9      	mov	r9, fp
 800355a:	eb18 0308 	adds.w	r3, r8, r8
 800355e:	eb49 0409 	adc.w	r4, r9, r9
 8003562:	4698      	mov	r8, r3
 8003564:	46a1      	mov	r9, r4
 8003566:	eb18 080a 	adds.w	r8, r8, sl
 800356a:	eb49 090b 	adc.w	r9, r9, fp
 800356e:	f04f 0100 	mov.w	r1, #0
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800357a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800357e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003582:	4688      	mov	r8, r1
 8003584:	4691      	mov	r9, r2
 8003586:	eb1a 0508 	adds.w	r5, sl, r8
 800358a:	eb4b 0609 	adc.w	r6, fp, r9
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	4619      	mov	r1, r3
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	f04f 0400 	mov.w	r4, #0
 80035a0:	0094      	lsls	r4, r2, #2
 80035a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035a6:	008b      	lsls	r3, r1, #2
 80035a8:	461a      	mov	r2, r3
 80035aa:	4623      	mov	r3, r4
 80035ac:	4628      	mov	r0, r5
 80035ae:	4631      	mov	r1, r6
 80035b0:	f7fc fe12 	bl	80001d8 <__aeabi_uldivmod>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	461a      	mov	r2, r3
 80035ba:	4b50      	ldr	r3, [pc, #320]	; (80036fc <UART_SetConfig+0x6f4>)
 80035bc:	fba3 2302 	umull	r2, r3, r3, r2
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	469b      	mov	fp, r3
 80035ca:	f04f 0c00 	mov.w	ip, #0
 80035ce:	46d9      	mov	r9, fp
 80035d0:	46e2      	mov	sl, ip
 80035d2:	eb19 0309 	adds.w	r3, r9, r9
 80035d6:	eb4a 040a 	adc.w	r4, sl, sl
 80035da:	4699      	mov	r9, r3
 80035dc:	46a2      	mov	sl, r4
 80035de:	eb19 090b 	adds.w	r9, r9, fp
 80035e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035e6:	f04f 0100 	mov.w	r1, #0
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035fa:	4689      	mov	r9, r1
 80035fc:	4692      	mov	sl, r2
 80035fe:	eb1b 0509 	adds.w	r5, fp, r9
 8003602:	eb4c 060a 	adc.w	r6, ip, sl
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4619      	mov	r1, r3
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	0094      	lsls	r4, r2, #2
 800361a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800361e:	008b      	lsls	r3, r1, #2
 8003620:	461a      	mov	r2, r3
 8003622:	4623      	mov	r3, r4
 8003624:	4628      	mov	r0, r5
 8003626:	4631      	mov	r1, r6
 8003628:	f7fc fdd6 	bl	80001d8 <__aeabi_uldivmod>
 800362c:	4603      	mov	r3, r0
 800362e:	460c      	mov	r4, r1
 8003630:	461a      	mov	r2, r3
 8003632:	4b32      	ldr	r3, [pc, #200]	; (80036fc <UART_SetConfig+0x6f4>)
 8003634:	fba3 1302 	umull	r1, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	2164      	movs	r1, #100	; 0x64
 800363c:	fb01 f303 	mul.w	r3, r1, r3
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	3332      	adds	r3, #50	; 0x32
 8003646:	4a2d      	ldr	r2, [pc, #180]	; (80036fc <UART_SetConfig+0x6f4>)
 8003648:	fba2 2303 	umull	r2, r3, r2, r3
 800364c:	095b      	lsrs	r3, r3, #5
 800364e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003652:	4498      	add	r8, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	469b      	mov	fp, r3
 8003658:	f04f 0c00 	mov.w	ip, #0
 800365c:	46d9      	mov	r9, fp
 800365e:	46e2      	mov	sl, ip
 8003660:	eb19 0309 	adds.w	r3, r9, r9
 8003664:	eb4a 040a 	adc.w	r4, sl, sl
 8003668:	4699      	mov	r9, r3
 800366a:	46a2      	mov	sl, r4
 800366c:	eb19 090b 	adds.w	r9, r9, fp
 8003670:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003674:	f04f 0100 	mov.w	r1, #0
 8003678:	f04f 0200 	mov.w	r2, #0
 800367c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003680:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003684:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003688:	4689      	mov	r9, r1
 800368a:	4692      	mov	sl, r2
 800368c:	eb1b 0509 	adds.w	r5, fp, r9
 8003690:	eb4c 060a 	adc.w	r6, ip, sl
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	4619      	mov	r1, r3
 800369a:	f04f 0200 	mov.w	r2, #0
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	f04f 0400 	mov.w	r4, #0
 80036a6:	0094      	lsls	r4, r2, #2
 80036a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036ac:	008b      	lsls	r3, r1, #2
 80036ae:	461a      	mov	r2, r3
 80036b0:	4623      	mov	r3, r4
 80036b2:	4628      	mov	r0, r5
 80036b4:	4631      	mov	r1, r6
 80036b6:	f7fc fd8f 	bl	80001d8 <__aeabi_uldivmod>
 80036ba:	4603      	mov	r3, r0
 80036bc:	460c      	mov	r4, r1
 80036be:	461a      	mov	r2, r3
 80036c0:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <UART_SetConfig+0x6f4>)
 80036c2:	fba3 1302 	umull	r1, r3, r3, r2
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	2164      	movs	r1, #100	; 0x64
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	3332      	adds	r3, #50	; 0x32
 80036d4:	4a09      	ldr	r2, [pc, #36]	; (80036fc <UART_SetConfig+0x6f4>)
 80036d6:	fba2 2303 	umull	r2, r3, r2, r3
 80036da:	095b      	lsrs	r3, r3, #5
 80036dc:	f003 020f 	and.w	r2, r3, #15
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4442      	add	r2, r8
 80036e6:	609a      	str	r2, [r3, #8]
}
 80036e8:	e7ff      	b.n	80036ea <UART_SetConfig+0x6e2>
 80036ea:	bf00      	nop
 80036ec:	3714      	adds	r7, #20
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	51eb851f 	.word	0x51eb851f

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4e0d      	ldr	r6, [pc, #52]	; (8003738 <__libc_init_array+0x38>)
 8003704:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003706:	1ba4      	subs	r4, r4, r6
 8003708:	10a4      	asrs	r4, r4, #2
 800370a:	2500      	movs	r5, #0
 800370c:	42a5      	cmp	r5, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	4e0b      	ldr	r6, [pc, #44]	; (8003740 <__libc_init_array+0x40>)
 8003712:	4c0c      	ldr	r4, [pc, #48]	; (8003744 <__libc_init_array+0x44>)
 8003714:	f000 f820 	bl	8003758 <_init>
 8003718:	1ba4      	subs	r4, r4, r6
 800371a:	10a4      	asrs	r4, r4, #2
 800371c:	2500      	movs	r5, #0
 800371e:	42a5      	cmp	r5, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003728:	4798      	blx	r3
 800372a:	3501      	adds	r5, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003732:	4798      	blx	r3
 8003734:	3501      	adds	r5, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	08003798 	.word	0x08003798
 800373c:	08003798 	.word	0x08003798
 8003740:	08003798 	.word	0x08003798
 8003744:	0800379c 	.word	0x0800379c

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_init>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr

08003764 <_fini>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	bf00      	nop
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr
