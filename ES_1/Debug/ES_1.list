
ES_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000395c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b14  08003b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b1c  08003b1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  2000000c  08003b30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08003b30  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2de  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001aa1  00000000  00000000  0002c31a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  0002ddc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cc0  00000000  00000000  0002eb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015a2f  00000000  00000000  0002f818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090c3  00000000  00000000  00045247  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a4c3  00000000  00000000  0004e30a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d87cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000398c  00000000  00000000  000d8848  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003adc 	.word	0x08003adc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003adc 	.word	0x08003adc

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <disp_buffer_update>:
static void MX_SPI1_Init(void);
static void MX_TIM10_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void disp_buffer_update(uint8_t com, uint8_t digit){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	460a      	mov	r2, r1
 80004e2:	71fb      	strb	r3, [r7, #7]
 80004e4:	4613      	mov	r3, r2
 80004e6:	71bb      	strb	r3, [r7, #6]
  if(com >= 0 && com < 4){
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b03      	cmp	r3, #3
 80004ec:	f200 83de 	bhi.w	8000cac <disp_buffer_update+0x7d4>
    switch (digit){
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	2b68      	cmp	r3, #104	; 0x68
 80004f4:	f200 83aa 	bhi.w	8000c4c <disp_buffer_update+0x774>
 80004f8:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <disp_buffer_update+0x28>)
 80004fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004fe:	bf00      	nop
 8000500:	080006a5 	.word	0x080006a5
 8000504:	08000705 	.word	0x08000705
 8000508:	08000765 	.word	0x08000765
 800050c:	080007c5 	.word	0x080007c5
 8000510:	08000825 	.word	0x08000825
 8000514:	08000885 	.word	0x08000885
 8000518:	080008e5 	.word	0x080008e5
 800051c:	08000949 	.word	0x08000949
 8000520:	080009a9 	.word	0x080009a9
 8000524:	08000a09 	.word	0x08000a09
 8000528:	08000c4d 	.word	0x08000c4d
 800052c:	08000c4d 	.word	0x08000c4d
 8000530:	08000c4d 	.word	0x08000c4d
 8000534:	08000c4d 	.word	0x08000c4d
 8000538:	08000c4d 	.word	0x08000c4d
 800053c:	08000c4d 	.word	0x08000c4d
 8000540:	08000c4d 	.word	0x08000c4d
 8000544:	08000c4d 	.word	0x08000c4d
 8000548:	08000c4d 	.word	0x08000c4d
 800054c:	08000c4d 	.word	0x08000c4d
 8000550:	08000c4d 	.word	0x08000c4d
 8000554:	08000c4d 	.word	0x08000c4d
 8000558:	08000c4d 	.word	0x08000c4d
 800055c:	08000c4d 	.word	0x08000c4d
 8000560:	08000c4d 	.word	0x08000c4d
 8000564:	08000c4d 	.word	0x08000c4d
 8000568:	08000c4d 	.word	0x08000c4d
 800056c:	08000c4d 	.word	0x08000c4d
 8000570:	08000c4d 	.word	0x08000c4d
 8000574:	08000c4d 	.word	0x08000c4d
 8000578:	08000c4d 	.word	0x08000c4d
 800057c:	08000c4d 	.word	0x08000c4d
 8000580:	08000c4d 	.word	0x08000c4d
 8000584:	08000c4d 	.word	0x08000c4d
 8000588:	08000c4d 	.word	0x08000c4d
 800058c:	08000c4d 	.word	0x08000c4d
 8000590:	08000c4d 	.word	0x08000c4d
 8000594:	08000c4d 	.word	0x08000c4d
 8000598:	08000c4d 	.word	0x08000c4d
 800059c:	08000c4d 	.word	0x08000c4d
 80005a0:	08000c4d 	.word	0x08000c4d
 80005a4:	08000c4d 	.word	0x08000c4d
 80005a8:	08000c4d 	.word	0x08000c4d
 80005ac:	08000c4d 	.word	0x08000c4d
 80005b0:	08000c4d 	.word	0x08000c4d
 80005b4:	08000c4d 	.word	0x08000c4d
 80005b8:	08000c4d 	.word	0x08000c4d
 80005bc:	08000c4d 	.word	0x08000c4d
 80005c0:	08000c4d 	.word	0x08000c4d
 80005c4:	08000c4d 	.word	0x08000c4d
 80005c8:	08000c4d 	.word	0x08000c4d
 80005cc:	08000c4d 	.word	0x08000c4d
 80005d0:	08000c4d 	.word	0x08000c4d
 80005d4:	08000c4d 	.word	0x08000c4d
 80005d8:	08000c4d 	.word	0x08000c4d
 80005dc:	08000c4d 	.word	0x08000c4d
 80005e0:	08000c4d 	.word	0x08000c4d
 80005e4:	08000c4d 	.word	0x08000c4d
 80005e8:	08000c4d 	.word	0x08000c4d
 80005ec:	08000c4d 	.word	0x08000c4d
 80005f0:	08000c4d 	.word	0x08000c4d
 80005f4:	08000c4d 	.word	0x08000c4d
 80005f8:	08000c4d 	.word	0x08000c4d
 80005fc:	08000c4d 	.word	0x08000c4d
 8000600:	08000c4d 	.word	0x08000c4d
 8000604:	08000c4d 	.word	0x08000c4d
 8000608:	08000c4d 	.word	0x08000c4d
 800060c:	08000c4d 	.word	0x08000c4d
 8000610:	08000c4d 	.word	0x08000c4d
 8000614:	08000c4d 	.word	0x08000c4d
 8000618:	08000c4d 	.word	0x08000c4d
 800061c:	08000c4d 	.word	0x08000c4d
 8000620:	08000c4d 	.word	0x08000c4d
 8000624:	08000c4d 	.word	0x08000c4d
 8000628:	08000c4d 	.word	0x08000c4d
 800062c:	08000c4d 	.word	0x08000c4d
 8000630:	08000c4d 	.word	0x08000c4d
 8000634:	08000c4d 	.word	0x08000c4d
 8000638:	08000c4d 	.word	0x08000c4d
 800063c:	08000c4d 	.word	0x08000c4d
 8000640:	08000c4d 	.word	0x08000c4d
 8000644:	08000c4d 	.word	0x08000c4d
 8000648:	08000c4d 	.word	0x08000c4d
 800064c:	08000c4d 	.word	0x08000c4d
 8000650:	08000c4d 	.word	0x08000c4d
 8000654:	08000c4d 	.word	0x08000c4d
 8000658:	08000c4d 	.word	0x08000c4d
 800065c:	08000c4d 	.word	0x08000c4d
 8000660:	08000c4d 	.word	0x08000c4d
 8000664:	08000c4d 	.word	0x08000c4d
 8000668:	08000c4d 	.word	0x08000c4d
 800066c:	08000c4d 	.word	0x08000c4d
 8000670:	08000c4d 	.word	0x08000c4d
 8000674:	08000c4d 	.word	0x08000c4d
 8000678:	08000c4d 	.word	0x08000c4d
 800067c:	08000c4d 	.word	0x08000c4d
 8000680:	08000c4d 	.word	0x08000c4d
 8000684:	08000c4d 	.word	0x08000c4d
 8000688:	08000c4d 	.word	0x08000c4d
 800068c:	08000c4d 	.word	0x08000c4d
 8000690:	08000a69 	.word	0x08000a69
 8000694:	08000ac9 	.word	0x08000ac9
 8000698:	08000b29 	.word	0x08000b29
 800069c:	08000b89 	.word	0x08000b89
 80006a0:	08000bed 	.word	0x08000bed
    
    case 0:  //put 0 on <com> port of display buffer 
      disp_state[com][0] = GPIO_PIN_SET;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	4aa7      	ldr	r2, [pc, #668]	; (8000944 <disp_buffer_update+0x46c>)
 80006a8:	2101      	movs	r1, #1
 80006aa:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	4aa4      	ldr	r2, [pc, #656]	; (8000944 <disp_buffer_update+0x46c>)
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	4413      	add	r3, r2
 80006b6:	2201      	movs	r2, #1
 80006b8:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4aa1      	ldr	r2, [pc, #644]	; (8000944 <disp_buffer_update+0x46c>)
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	4413      	add	r3, r2
 80006c2:	2201      	movs	r2, #1
 80006c4:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4a9e      	ldr	r2, [pc, #632]	; (8000944 <disp_buffer_update+0x46c>)
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	4413      	add	r3, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 80006d2:	79fb      	ldrb	r3, [r7, #7]
 80006d4:	4a9b      	ldr	r2, [pc, #620]	; (8000944 <disp_buffer_update+0x46c>)
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	4413      	add	r3, r2
 80006da:	2201      	movs	r2, #1
 80006dc:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4a98      	ldr	r2, [pc, #608]	; (8000944 <disp_buffer_update+0x46c>)
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	4413      	add	r3, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4a95      	ldr	r2, [pc, #596]	; (8000944 <disp_buffer_update+0x46c>)
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	4413      	add	r3, r2
 80006f2:	2200      	movs	r2, #0
 80006f4:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	4a92      	ldr	r2, [pc, #584]	; (8000944 <disp_buffer_update+0x46c>)
 80006fa:	00db      	lsls	r3, r3, #3
 80006fc:	4413      	add	r3, r2
 80006fe:	2200      	movs	r2, #0
 8000700:	71da      	strb	r2, [r3, #7]
      break;
 8000702:	e2d4      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 1:  //put 1 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	4a8f      	ldr	r2, [pc, #572]	; (8000944 <disp_buffer_update+0x46c>)
 8000708:	2101      	movs	r1, #1
 800070a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4a8c      	ldr	r2, [pc, #560]	; (8000944 <disp_buffer_update+0x46c>)
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	4413      	add	r3, r2
 8000716:	2201      	movs	r2, #1
 8000718:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 800071a:	79fb      	ldrb	r3, [r7, #7]
 800071c:	4a89      	ldr	r2, [pc, #548]	; (8000944 <disp_buffer_update+0x46c>)
 800071e:	00db      	lsls	r3, r3, #3
 8000720:	4413      	add	r3, r2
 8000722:	2200      	movs	r2, #0
 8000724:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	4a86      	ldr	r2, [pc, #536]	; (8000944 <disp_buffer_update+0x46c>)
 800072a:	00db      	lsls	r3, r3, #3
 800072c:	4413      	add	r3, r2
 800072e:	2200      	movs	r2, #0
 8000730:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4a83      	ldr	r2, [pc, #524]	; (8000944 <disp_buffer_update+0x46c>)
 8000736:	00db      	lsls	r3, r3, #3
 8000738:	4413      	add	r3, r2
 800073a:	2200      	movs	r2, #0
 800073c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 800073e:	79fb      	ldrb	r3, [r7, #7]
 8000740:	4a80      	ldr	r2, [pc, #512]	; (8000944 <disp_buffer_update+0x46c>)
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	4413      	add	r3, r2
 8000746:	2200      	movs	r2, #0
 8000748:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	4a7d      	ldr	r2, [pc, #500]	; (8000944 <disp_buffer_update+0x46c>)
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	4413      	add	r3, r2
 8000752:	2200      	movs	r2, #0
 8000754:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4a7a      	ldr	r2, [pc, #488]	; (8000944 <disp_buffer_update+0x46c>)
 800075a:	00db      	lsls	r3, r3, #3
 800075c:	4413      	add	r3, r2
 800075e:	2200      	movs	r2, #0
 8000760:	71da      	strb	r2, [r3, #7]
      break;
 8000762:	e2a4      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 2:  //put 2 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4a77      	ldr	r2, [pc, #476]	; (8000944 <disp_buffer_update+0x46c>)
 8000768:	2101      	movs	r1, #1
 800076a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4a74      	ldr	r2, [pc, #464]	; (8000944 <disp_buffer_update+0x46c>)
 8000772:	00db      	lsls	r3, r3, #3
 8000774:	4413      	add	r3, r2
 8000776:	2201      	movs	r2, #1
 8000778:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	4a71      	ldr	r2, [pc, #452]	; (8000944 <disp_buffer_update+0x46c>)
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	4413      	add	r3, r2
 8000782:	2200      	movs	r2, #0
 8000784:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4a6e      	ldr	r2, [pc, #440]	; (8000944 <disp_buffer_update+0x46c>)
 800078a:	00db      	lsls	r3, r3, #3
 800078c:	4413      	add	r3, r2
 800078e:	2201      	movs	r2, #1
 8000790:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	4a6b      	ldr	r2, [pc, #428]	; (8000944 <disp_buffer_update+0x46c>)
 8000796:	00db      	lsls	r3, r3, #3
 8000798:	4413      	add	r3, r2
 800079a:	2201      	movs	r2, #1
 800079c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	4a68      	ldr	r2, [pc, #416]	; (8000944 <disp_buffer_update+0x46c>)
 80007a2:	00db      	lsls	r3, r3, #3
 80007a4:	4413      	add	r3, r2
 80007a6:	2200      	movs	r2, #0
 80007a8:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4a65      	ldr	r2, [pc, #404]	; (8000944 <disp_buffer_update+0x46c>)
 80007ae:	00db      	lsls	r3, r3, #3
 80007b0:	4413      	add	r3, r2
 80007b2:	2201      	movs	r2, #1
 80007b4:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4a62      	ldr	r2, [pc, #392]	; (8000944 <disp_buffer_update+0x46c>)
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4413      	add	r3, r2
 80007be:	2200      	movs	r2, #0
 80007c0:	71da      	strb	r2, [r3, #7]
      break;
 80007c2:	e274      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 3:  //put 3 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4a5f      	ldr	r2, [pc, #380]	; (8000944 <disp_buffer_update+0x46c>)
 80007c8:	2101      	movs	r1, #1
 80007ca:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a5c      	ldr	r2, [pc, #368]	; (8000944 <disp_buffer_update+0x46c>)
 80007d2:	00db      	lsls	r3, r3, #3
 80007d4:	4413      	add	r3, r2
 80007d6:	2201      	movs	r2, #1
 80007d8:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	4a59      	ldr	r2, [pc, #356]	; (8000944 <disp_buffer_update+0x46c>)
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4413      	add	r3, r2
 80007e2:	2201      	movs	r2, #1
 80007e4:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	4a56      	ldr	r2, [pc, #344]	; (8000944 <disp_buffer_update+0x46c>)
 80007ea:	00db      	lsls	r3, r3, #3
 80007ec:	4413      	add	r3, r2
 80007ee:	2201      	movs	r2, #1
 80007f0:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	4a53      	ldr	r2, [pc, #332]	; (8000944 <disp_buffer_update+0x46c>)
 80007f6:	00db      	lsls	r3, r3, #3
 80007f8:	4413      	add	r3, r2
 80007fa:	2200      	movs	r2, #0
 80007fc:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	4a50      	ldr	r2, [pc, #320]	; (8000944 <disp_buffer_update+0x46c>)
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	4413      	add	r3, r2
 8000806:	2200      	movs	r2, #0
 8000808:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	4a4d      	ldr	r2, [pc, #308]	; (8000944 <disp_buffer_update+0x46c>)
 800080e:	00db      	lsls	r3, r3, #3
 8000810:	4413      	add	r3, r2
 8000812:	2201      	movs	r2, #1
 8000814:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	4a4a      	ldr	r2, [pc, #296]	; (8000944 <disp_buffer_update+0x46c>)
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	4413      	add	r3, r2
 800081e:	2200      	movs	r2, #0
 8000820:	71da      	strb	r2, [r3, #7]
      break;
 8000822:	e244      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 4:  //put 4 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	4a47      	ldr	r2, [pc, #284]	; (8000944 <disp_buffer_update+0x46c>)
 8000828:	2100      	movs	r1, #0
 800082a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	4a44      	ldr	r2, [pc, #272]	; (8000944 <disp_buffer_update+0x46c>)
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	4413      	add	r3, r2
 8000836:	2201      	movs	r2, #1
 8000838:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4a41      	ldr	r2, [pc, #260]	; (8000944 <disp_buffer_update+0x46c>)
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	4413      	add	r3, r2
 8000842:	2201      	movs	r2, #1
 8000844:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <disp_buffer_update+0x46c>)
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	4413      	add	r3, r2
 800084e:	2200      	movs	r2, #0
 8000850:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000852:	79fb      	ldrb	r3, [r7, #7]
 8000854:	4a3b      	ldr	r2, [pc, #236]	; (8000944 <disp_buffer_update+0x46c>)
 8000856:	00db      	lsls	r3, r3, #3
 8000858:	4413      	add	r3, r2
 800085a:	2200      	movs	r2, #0
 800085c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	4a38      	ldr	r2, [pc, #224]	; (8000944 <disp_buffer_update+0x46c>)
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	4413      	add	r3, r2
 8000866:	2201      	movs	r2, #1
 8000868:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4a35      	ldr	r2, [pc, #212]	; (8000944 <disp_buffer_update+0x46c>)
 800086e:	00db      	lsls	r3, r3, #3
 8000870:	4413      	add	r3, r2
 8000872:	2201      	movs	r2, #1
 8000874:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000876:	79fb      	ldrb	r3, [r7, #7]
 8000878:	4a32      	ldr	r2, [pc, #200]	; (8000944 <disp_buffer_update+0x46c>)
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	4413      	add	r3, r2
 800087e:	2200      	movs	r2, #0
 8000880:	71da      	strb	r2, [r3, #7]
      break;
 8000882:	e214      	b.n	8000cae <disp_buffer_update+0x7d6>
    
    case 5:  //put 5 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	4a2f      	ldr	r2, [pc, #188]	; (8000944 <disp_buffer_update+0x46c>)
 8000888:	2101      	movs	r1, #1
 800088a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <disp_buffer_update+0x46c>)
 8000892:	00db      	lsls	r3, r3, #3
 8000894:	4413      	add	r3, r2
 8000896:	2200      	movs	r2, #0
 8000898:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a29      	ldr	r2, [pc, #164]	; (8000944 <disp_buffer_update+0x46c>)
 800089e:	00db      	lsls	r3, r3, #3
 80008a0:	4413      	add	r3, r2
 80008a2:	2201      	movs	r2, #1
 80008a4:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	4a26      	ldr	r2, [pc, #152]	; (8000944 <disp_buffer_update+0x46c>)
 80008aa:	00db      	lsls	r3, r3, #3
 80008ac:	4413      	add	r3, r2
 80008ae:	2201      	movs	r2, #1
 80008b0:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4a23      	ldr	r2, [pc, #140]	; (8000944 <disp_buffer_update+0x46c>)
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4413      	add	r3, r2
 80008ba:	2200      	movs	r2, #0
 80008bc:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a20      	ldr	r2, [pc, #128]	; (8000944 <disp_buffer_update+0x46c>)
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	4413      	add	r3, r2
 80008c6:	2201      	movs	r2, #1
 80008c8:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <disp_buffer_update+0x46c>)
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	4413      	add	r3, r2
 80008d2:	2201      	movs	r2, #1
 80008d4:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <disp_buffer_update+0x46c>)
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	4413      	add	r3, r2
 80008de:	2200      	movs	r2, #0
 80008e0:	71da      	strb	r2, [r3, #7]
      break;
 80008e2:	e1e4      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 6:  //put 6 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <disp_buffer_update+0x46c>)
 80008e8:	2101      	movs	r1, #1
 80008ea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	4a14      	ldr	r2, [pc, #80]	; (8000944 <disp_buffer_update+0x46c>)
 80008f2:	00db      	lsls	r3, r3, #3
 80008f4:	4413      	add	r3, r2
 80008f6:	2200      	movs	r2, #0
 80008f8:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	4a11      	ldr	r2, [pc, #68]	; (8000944 <disp_buffer_update+0x46c>)
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4413      	add	r3, r2
 8000902:	2201      	movs	r2, #1
 8000904:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <disp_buffer_update+0x46c>)
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	4413      	add	r3, r2
 800090e:	2201      	movs	r2, #1
 8000910:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a0b      	ldr	r2, [pc, #44]	; (8000944 <disp_buffer_update+0x46c>)
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	4413      	add	r3, r2
 800091a:	2201      	movs	r2, #1
 800091c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	4a08      	ldr	r2, [pc, #32]	; (8000944 <disp_buffer_update+0x46c>)
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4413      	add	r3, r2
 8000926:	2201      	movs	r2, #1
 8000928:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <disp_buffer_update+0x46c>)
 800092e:	00db      	lsls	r3, r3, #3
 8000930:	4413      	add	r3, r2
 8000932:	2201      	movs	r2, #1
 8000934:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	4a02      	ldr	r2, [pc, #8]	; (8000944 <disp_buffer_update+0x46c>)
 800093a:	00db      	lsls	r3, r3, #3
 800093c:	4413      	add	r3, r2
 800093e:	2200      	movs	r2, #0
 8000940:	71da      	strb	r2, [r3, #7]
      break;
 8000942:	e1b4      	b.n	8000cae <disp_buffer_update+0x7d6>
 8000944:	2000006c 	.word	0x2000006c

    case 7:  //put 7 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	4aa7      	ldr	r2, [pc, #668]	; (8000be8 <disp_buffer_update+0x710>)
 800094c:	2101      	movs	r1, #1
 800094e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000952:	79fb      	ldrb	r3, [r7, #7]
 8000954:	4aa4      	ldr	r2, [pc, #656]	; (8000be8 <disp_buffer_update+0x710>)
 8000956:	00db      	lsls	r3, r3, #3
 8000958:	4413      	add	r3, r2
 800095a:	2201      	movs	r2, #1
 800095c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	4aa1      	ldr	r2, [pc, #644]	; (8000be8 <disp_buffer_update+0x710>)
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	4413      	add	r3, r2
 8000966:	2201      	movs	r2, #1
 8000968:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	4a9e      	ldr	r2, [pc, #632]	; (8000be8 <disp_buffer_update+0x710>)
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	2200      	movs	r2, #0
 8000974:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	4a9b      	ldr	r2, [pc, #620]	; (8000be8 <disp_buffer_update+0x710>)
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	4413      	add	r3, r2
 800097e:	2200      	movs	r2, #0
 8000980:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	4a98      	ldr	r2, [pc, #608]	; (8000be8 <disp_buffer_update+0x710>)
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	4413      	add	r3, r2
 800098a:	2200      	movs	r2, #0
 800098c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	4a95      	ldr	r2, [pc, #596]	; (8000be8 <disp_buffer_update+0x710>)
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	4413      	add	r3, r2
 8000996:	2200      	movs	r2, #0
 8000998:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	4a92      	ldr	r2, [pc, #584]	; (8000be8 <disp_buffer_update+0x710>)
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4413      	add	r3, r2
 80009a2:	2200      	movs	r2, #0
 80009a4:	71da      	strb	r2, [r3, #7]
      break;
 80009a6:	e182      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 8:  //put 8 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4a8f      	ldr	r2, [pc, #572]	; (8000be8 <disp_buffer_update+0x710>)
 80009ac:	2101      	movs	r1, #1
 80009ae:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80009b2:	79fb      	ldrb	r3, [r7, #7]
 80009b4:	4a8c      	ldr	r2, [pc, #560]	; (8000be8 <disp_buffer_update+0x710>)
 80009b6:	00db      	lsls	r3, r3, #3
 80009b8:	4413      	add	r3, r2
 80009ba:	2201      	movs	r2, #1
 80009bc:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	4a89      	ldr	r2, [pc, #548]	; (8000be8 <disp_buffer_update+0x710>)
 80009c2:	00db      	lsls	r3, r3, #3
 80009c4:	4413      	add	r3, r2
 80009c6:	2201      	movs	r2, #1
 80009c8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4a86      	ldr	r2, [pc, #536]	; (8000be8 <disp_buffer_update+0x710>)
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	4413      	add	r3, r2
 80009d2:	2201      	movs	r2, #1
 80009d4:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	4a83      	ldr	r2, [pc, #524]	; (8000be8 <disp_buffer_update+0x710>)
 80009da:	00db      	lsls	r3, r3, #3
 80009dc:	4413      	add	r3, r2
 80009de:	2201      	movs	r2, #1
 80009e0:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	4a80      	ldr	r2, [pc, #512]	; (8000be8 <disp_buffer_update+0x710>)
 80009e6:	00db      	lsls	r3, r3, #3
 80009e8:	4413      	add	r3, r2
 80009ea:	2201      	movs	r2, #1
 80009ec:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4a7d      	ldr	r2, [pc, #500]	; (8000be8 <disp_buffer_update+0x710>)
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	4413      	add	r3, r2
 80009f6:	2201      	movs	r2, #1
 80009f8:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a7a      	ldr	r2, [pc, #488]	; (8000be8 <disp_buffer_update+0x710>)
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	4413      	add	r3, r2
 8000a02:	2200      	movs	r2, #0
 8000a04:	71da      	strb	r2, [r3, #7]
      break;
 8000a06:	e152      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 9:  //put 9 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	4a77      	ldr	r2, [pc, #476]	; (8000be8 <disp_buffer_update+0x710>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	4a74      	ldr	r2, [pc, #464]	; (8000be8 <disp_buffer_update+0x710>)
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	4413      	add	r3, r2
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	4a71      	ldr	r2, [pc, #452]	; (8000be8 <disp_buffer_update+0x710>)
 8000a22:	00db      	lsls	r3, r3, #3
 8000a24:	4413      	add	r3, r2
 8000a26:	2201      	movs	r2, #1
 8000a28:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	4a6e      	ldr	r2, [pc, #440]	; (8000be8 <disp_buffer_update+0x710>)
 8000a2e:	00db      	lsls	r3, r3, #3
 8000a30:	4413      	add	r3, r2
 8000a32:	2201      	movs	r2, #1
 8000a34:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4a6b      	ldr	r2, [pc, #428]	; (8000be8 <disp_buffer_update+0x710>)
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2200      	movs	r2, #0
 8000a40:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4a68      	ldr	r2, [pc, #416]	; (8000be8 <disp_buffer_update+0x710>)
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	4413      	add	r3, r2
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a65      	ldr	r2, [pc, #404]	; (8000be8 <disp_buffer_update+0x710>)
 8000a52:	00db      	lsls	r3, r3, #3
 8000a54:	4413      	add	r3, r2
 8000a56:	2201      	movs	r2, #1
 8000a58:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	4a62      	ldr	r2, [pc, #392]	; (8000be8 <disp_buffer_update+0x710>)
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	4413      	add	r3, r2
 8000a62:	2200      	movs	r2, #0
 8000a64:	71da      	strb	r2, [r3, #7]
      break;
 8000a66:	e122      	b.n	8000cae <disp_buffer_update+0x7d6>
    
    case 100:  //put '-' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4a5f      	ldr	r2, [pc, #380]	; (8000be8 <disp_buffer_update+0x710>)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	4a5c      	ldr	r2, [pc, #368]	; (8000be8 <disp_buffer_update+0x710>)
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	4413      	add	r3, r2
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a59      	ldr	r2, [pc, #356]	; (8000be8 <disp_buffer_update+0x710>)
 8000a82:	00db      	lsls	r3, r3, #3
 8000a84:	4413      	add	r3, r2
 8000a86:	2200      	movs	r2, #0
 8000a88:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a56      	ldr	r2, [pc, #344]	; (8000be8 <disp_buffer_update+0x710>)
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	4413      	add	r3, r2
 8000a92:	2200      	movs	r2, #0
 8000a94:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000a96:	79fb      	ldrb	r3, [r7, #7]
 8000a98:	4a53      	ldr	r2, [pc, #332]	; (8000be8 <disp_buffer_update+0x710>)
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4a50      	ldr	r2, [pc, #320]	; (8000be8 <disp_buffer_update+0x710>)
 8000aa6:	00db      	lsls	r3, r3, #3
 8000aa8:	4413      	add	r3, r2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	; (8000be8 <disp_buffer_update+0x710>)
 8000ab2:	00db      	lsls	r3, r3, #3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4a4a      	ldr	r2, [pc, #296]	; (8000be8 <disp_buffer_update+0x710>)
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	4413      	add	r3, r2
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	71da      	strb	r2, [r3, #7]
      break;
 8000ac6:	e0f2      	b.n	8000cae <disp_buffer_update+0x7d6>
    
    case 101:  //put 'P' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a47      	ldr	r2, [pc, #284]	; (8000be8 <disp_buffer_update+0x710>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4a44      	ldr	r2, [pc, #272]	; (8000be8 <disp_buffer_update+0x710>)
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	4413      	add	r3, r2
 8000ada:	2201      	movs	r2, #1
 8000adc:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a41      	ldr	r2, [pc, #260]	; (8000be8 <disp_buffer_update+0x710>)
 8000ae2:	00db      	lsls	r3, r3, #3
 8000ae4:	4413      	add	r3, r2
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	4a3e      	ldr	r2, [pc, #248]	; (8000be8 <disp_buffer_update+0x710>)
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	4413      	add	r3, r2
 8000af2:	2200      	movs	r2, #0
 8000af4:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4a3b      	ldr	r2, [pc, #236]	; (8000be8 <disp_buffer_update+0x710>)
 8000afa:	00db      	lsls	r3, r3, #3
 8000afc:	4413      	add	r3, r2
 8000afe:	2201      	movs	r2, #1
 8000b00:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4a38      	ldr	r2, [pc, #224]	; (8000be8 <disp_buffer_update+0x710>)
 8000b06:	00db      	lsls	r3, r3, #3
 8000b08:	4413      	add	r3, r2
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	4a35      	ldr	r2, [pc, #212]	; (8000be8 <disp_buffer_update+0x710>)
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	4413      	add	r3, r2
 8000b16:	2201      	movs	r2, #1
 8000b18:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a32      	ldr	r2, [pc, #200]	; (8000be8 <disp_buffer_update+0x710>)
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	4413      	add	r3, r2
 8000b22:	2200      	movs	r2, #0
 8000b24:	71da      	strb	r2, [r3, #7]
      break;
 8000b26:	e0c2      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 102:  //put 'A' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	4a2f      	ldr	r2, [pc, #188]	; (8000be8 <disp_buffer_update+0x710>)
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	4a2c      	ldr	r2, [pc, #176]	; (8000be8 <disp_buffer_update+0x710>)
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	4413      	add	r3, r2
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	4a29      	ldr	r2, [pc, #164]	; (8000be8 <disp_buffer_update+0x710>)
 8000b42:	00db      	lsls	r3, r3, #3
 8000b44:	4413      	add	r3, r2
 8000b46:	2201      	movs	r2, #1
 8000b48:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4a26      	ldr	r2, [pc, #152]	; (8000be8 <disp_buffer_update+0x710>)
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	4413      	add	r3, r2
 8000b52:	2200      	movs	r2, #0
 8000b54:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <disp_buffer_update+0x710>)
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	2201      	movs	r2, #1
 8000b60:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	4a20      	ldr	r2, [pc, #128]	; (8000be8 <disp_buffer_update+0x710>)
 8000b66:	00db      	lsls	r3, r3, #3
 8000b68:	4413      	add	r3, r2
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <disp_buffer_update+0x710>)
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4413      	add	r3, r2
 8000b76:	2201      	movs	r2, #1
 8000b78:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	4a1a      	ldr	r2, [pc, #104]	; (8000be8 <disp_buffer_update+0x710>)
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	4413      	add	r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	71da      	strb	r2, [r3, #7]
      break;
 8000b86:	e092      	b.n	8000cae <disp_buffer_update+0x7d6>

    case 103:  //put left half 'T' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <disp_buffer_update+0x710>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <disp_buffer_update+0x710>)
 8000b96:	00db      	lsls	r3, r3, #3
 8000b98:	4413      	add	r3, r2
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a11      	ldr	r2, [pc, #68]	; (8000be8 <disp_buffer_update+0x710>)
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	4413      	add	r3, r2
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4a0e      	ldr	r2, [pc, #56]	; (8000be8 <disp_buffer_update+0x710>)
 8000bae:	00db      	lsls	r3, r3, #3
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <disp_buffer_update+0x710>)
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <disp_buffer_update+0x710>)
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	4413      	add	r3, r2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <disp_buffer_update+0x710>)
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	4413      	add	r3, r2
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	4a02      	ldr	r2, [pc, #8]	; (8000be8 <disp_buffer_update+0x710>)
 8000bde:	00db      	lsls	r3, r3, #3
 8000be0:	4413      	add	r3, r2
 8000be2:	2200      	movs	r2, #0
 8000be4:	71da      	strb	r2, [r3, #7]
      break;
 8000be6:	e062      	b.n	8000cae <disp_buffer_update+0x7d6>
 8000be8:	2000006c 	.word	0x2000006c
    
    case 104:  //put right half 'T' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000bec:	79fb      	ldrb	r3, [r7, #7]
 8000bee:	4a33      	ldr	r2, [pc, #204]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	4a30      	ldr	r2, [pc, #192]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	2200      	movs	r2, #0
 8000c00:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4a2d      	ldr	r2, [pc, #180]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c06:	00db      	lsls	r3, r3, #3
 8000c08:	4413      	add	r3, r2
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	4a2a      	ldr	r2, [pc, #168]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	4413      	add	r3, r2
 8000c16:	2200      	movs	r2, #0
 8000c18:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	4a27      	ldr	r2, [pc, #156]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c1e:	00db      	lsls	r3, r3, #3
 8000c20:	4413      	add	r3, r2
 8000c22:	2200      	movs	r2, #0
 8000c24:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	4a24      	ldr	r2, [pc, #144]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	2200      	movs	r2, #0
 8000c30:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4a21      	ldr	r2, [pc, #132]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c36:	00db      	lsls	r3, r3, #3
 8000c38:	4413      	add	r3, r2
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c42:	00db      	lsls	r3, r3, #3
 8000c44:	4413      	add	r3, r2
 8000c46:	2200      	movs	r2, #0
 8000c48:	71da      	strb	r2, [r3, #7]
      break;
 8000c4a:	e030      	b.n	8000cae <disp_buffer_update+0x7d6>

    default:
      disp_state[com][0] = GPIO_PIN_RESET;
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c50:	2100      	movs	r1, #0
 8000c52:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	4a18      	ldr	r2, [pc, #96]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	4413      	add	r3, r2
 8000c5e:	2200      	movs	r2, #0
 8000c60:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c66:	00db      	lsls	r3, r3, #3
 8000c68:	4413      	add	r3, r2
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4a12      	ldr	r2, [pc, #72]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	4413      	add	r3, r2
 8000c76:	2200      	movs	r2, #0
 8000c78:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	4a0f      	ldr	r2, [pc, #60]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c7e:	00db      	lsls	r3, r3, #3
 8000c80:	4413      	add	r3, r2
 8000c82:	2200      	movs	r2, #0
 8000c84:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	4a0c      	ldr	r2, [pc, #48]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	2200      	movs	r2, #0
 8000c90:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4413      	add	r3, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	719a      	strb	r2, [r3, #6]
      disp_state[com][7] = GPIO_PIN_RESET;
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	4a06      	ldr	r2, [pc, #24]	; (8000cbc <disp_buffer_update+0x7e4>)
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	71da      	strb	r2, [r3, #7]
      break;
 8000caa:	e000      	b.n	8000cae <disp_buffer_update+0x7d6>
    }
  }
 8000cac:	bf00      	nop
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	2000006c 	.word	0x2000006c

08000cc0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
	static uint8_t active_com = 0;
	if(htim->Instance==TIM10){
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a7c      	ldr	r2, [pc, #496]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f040 80f1 	bne.w	8000eb6 <HAL_TIM_PeriodElapsedCallback+0x1f6>

		++active_com;
 8000cd4:	4b7b      	ldr	r3, [pc, #492]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b79      	ldr	r3, [pc, #484]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cde:	701a      	strb	r2, [r3, #0]
		if(active_com >3 ) active_com = 0;
 8000ce0:	4b78      	ldr	r3, [pc, #480]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d902      	bls.n	8000cee <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000ce8:	4b76      	ldr	r3, [pc, #472]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]

		switch(active_com){
 8000cee:	4b75      	ldr	r3, [pc, #468]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d86e      	bhi.n	8000dd4 <HAL_TIM_PeriodElapsedCallback+0x114>
 8000cf6:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000d3f 	.word	0x08000d3f
 8000d04:	08000d71 	.word	0x08000d71
 8000d08:	08000da3 	.word	0x08000da3
		case 0:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_RESET);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d12:	486d      	ldr	r0, [pc, #436]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d14:	f001 fada 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1e:	486a      	ldr	r0, [pc, #424]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d20:	f001 fad4 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 8000d24:	2201      	movs	r2, #1
 8000d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2a:	4867      	ldr	r0, [pc, #412]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d2c:	f001 face 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 8000d30:	2201      	movs	r2, #1
 8000d32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d36:	4864      	ldr	r0, [pc, #400]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d38:	f001 fac8 	bl	80022cc <HAL_GPIO_WritePin>
			break;
 8000d3c:	e063      	b.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x146>

		case 1:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d44:	4860      	ldr	r0, [pc, #384]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d46:	f001 fac1 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d50:	485d      	ldr	r0, [pc, #372]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d52:	f001 fabb 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 8000d56:	2201      	movs	r2, #1
 8000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5c:	485a      	ldr	r0, [pc, #360]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d5e:	f001 fab5 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d68:	4857      	ldr	r0, [pc, #348]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d6a:	f001 faaf 	bl	80022cc <HAL_GPIO_WritePin>
			break;
 8000d6e:	e04a      	b.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x146>

		case 2:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d76:	4854      	ldr	r0, [pc, #336]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d78:	f001 faa8 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d82:	4851      	ldr	r0, [pc, #324]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d84:	f001 faa2 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8e:	484e      	ldr	r0, [pc, #312]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d90:	f001 fa9c 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	484b      	ldr	r0, [pc, #300]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d9c:	f001 fa96 	bl	80022cc <HAL_GPIO_WritePin>
			break;
 8000da0:	e031      	b.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x146>

		case 3:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000da8:	4847      	ldr	r0, [pc, #284]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000daa:	f001 fa8f 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8000dae:	2201      	movs	r2, #1
 8000db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000db4:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000db6:	f001 fa89 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc0:	4841      	ldr	r0, [pc, #260]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000dc2:	f001 fa83 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dcc:	483e      	ldr	r0, [pc, #248]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000dce:	f001 fa7d 	bl	80022cc <HAL_GPIO_WritePin>
			break;
 8000dd2:	e018      	b.n	8000e06 <HAL_TIM_PeriodElapsedCallback+0x146>

		default:
			HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dda:	483b      	ldr	r0, [pc, #236]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ddc:	f001 fa76 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000de6:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000de8:	f001 fa70 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df2:	4835      	ldr	r0, [pc, #212]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000df4:	f001 fa6a 	bl	80022cc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dfe:	4832      	ldr	r0, [pc, #200]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e00:	f001 fa64 	bl	80022cc <HAL_GPIO_WritePin>
			break;
 8000e04:	bf00      	nop
		}

		HAL_GPIO_WritePin(disp_A_GPIO_Port, disp_A_Pin, disp_state[active_com][0]);
 8000e06:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e0e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000e12:	461a      	mov	r2, r3
 8000e14:	2140      	movs	r1, #64	; 0x40
 8000e16:	482c      	ldr	r0, [pc, #176]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e18:	f001 fa58 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_B_GPIO_Port, disp_B_Pin, disp_state[active_com][1]);
 8000e1c:	4b29      	ldr	r3, [pc, #164]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	4a2a      	ldr	r2, [pc, #168]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e22:	00db      	lsls	r3, r3, #3
 8000e24:	4413      	add	r3, r2
 8000e26:	785b      	ldrb	r3, [r3, #1]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	4826      	ldr	r0, [pc, #152]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e2e:	f001 fa4d 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_C_GPIO_Port, disp_C_Pin, disp_state[active_com][2]);
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	461a      	mov	r2, r3
 8000e40:	2108      	movs	r1, #8
 8000e42:	4821      	ldr	r0, [pc, #132]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e44:	f001 fa42 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_D_GPIO_Port, disp_D_Pin, disp_state[active_com][3]);
 8000e48:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	4a1f      	ldr	r2, [pc, #124]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e4e:	00db      	lsls	r3, r3, #3
 8000e50:	4413      	add	r3, r2
 8000e52:	78db      	ldrb	r3, [r3, #3]
 8000e54:	461a      	mov	r2, r3
 8000e56:	2102      	movs	r1, #2
 8000e58:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e5a:	f001 fa37 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_E_GPIO_Port, disp_E_Pin, disp_state[active_com][4]);
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	791b      	ldrb	r3, [r3, #4]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2104      	movs	r1, #4
 8000e6e:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e70:	f001 fa2c 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_F_GPIO_Port, disp_F_Pin, disp_state[active_com][5]);
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4413      	add	r3, r2
 8000e7e:	795b      	ldrb	r3, [r3, #5]
 8000e80:	461a      	mov	r2, r3
 8000e82:	2120      	movs	r1, #32
 8000e84:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e86:	f001 fa21 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_G_GPIO_Port, disp_G_Pin, disp_state[active_com][6]);
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	4413      	add	r3, r2
 8000e94:	799b      	ldrb	r3, [r3, #6]
 8000e96:	461a      	mov	r2, r3
 8000e98:	2101      	movs	r1, #1
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e9c:	f001 fa16 	bl	80022cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_DP_GPIO_Port, disp_DP_Pin, disp_state[active_com][7]);
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4a09      	ldr	r2, [pc, #36]	; (8000ecc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4413      	add	r3, r2
 8000eaa:	79db      	ldrb	r3, [r3, #7]
 8000eac:	461a      	mov	r2, r3
 8000eae:	2180      	movs	r1, #128	; 0x80
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000eb2:	f001 fa0b 	bl	80022cc <HAL_GPIO_WritePin>

	}
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40014400 	.word	0x40014400
 8000ec4:	20000028 	.word	0x20000028
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	2000006c 	.word	0x2000006c

08000ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed4:	f000 fbea 	bl	80016ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed8:	f000 f820 	bl	8000f1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000edc:	f000 f934 	bl	8001148 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee0:	f000 f90a 	bl	80010f8 <MX_DMA_Init>
  MX_SPI1_Init();
 8000ee4:	f000 f882 	bl	8000fec <MX_SPI1_Init>
  MX_TIM10_Init();
 8000ee8:	f000 f8b8 	bl	800105c <MX_TIM10_Init>
  MX_USART2_UART_Init();
 8000eec:	f000 f8da 	bl	80010a4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000ef0:	4809      	ldr	r0, [pc, #36]	; (8000f18 <main+0x48>)
 8000ef2:	f002 f814 	bl	8002f1e <HAL_TIM_Base_Start_IT>

  // TODO spi peripherial init

  disp_buffer_update(0,101);
 8000ef6:	2165      	movs	r1, #101	; 0x65
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff faed 	bl	80004d8 <disp_buffer_update>
  disp_buffer_update(1,102);
 8000efe:	2166      	movs	r1, #102	; 0x66
 8000f00:	2001      	movs	r0, #1
 8000f02:	f7ff fae9 	bl	80004d8 <disp_buffer_update>
  disp_buffer_update(2,103);
 8000f06:	2167      	movs	r1, #103	; 0x67
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f7ff fae5 	bl	80004d8 <disp_buffer_update>
  disp_buffer_update(3,104);
 8000f0e:	2168      	movs	r1, #104	; 0x68
 8000f10:	2003      	movs	r0, #3
 8000f12:	f7ff fae1 	bl	80004d8 <disp_buffer_update>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f16:	e7fe      	b.n	8000f16 <main+0x46>
 8000f18:	2000002c 	.word	0x2000002c

08000f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b094      	sub	sp, #80	; 0x50
 8000f20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f22:	f107 0320 	add.w	r3, r7, #32
 8000f26:	2230      	movs	r2, #48	; 0x30
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f002 fdce 	bl	8003acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f30:	f107 030c 	add.w	r3, r7, #12
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a26      	ldr	r2, [pc, #152]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <SystemClock_Config+0xc8>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a20      	ldr	r2, [pc, #128]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f6a:	6013      	str	r3, [r2, #0]
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <SystemClock_Config+0xcc>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f82:	2302      	movs	r3, #2
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f8c:	2304      	movs	r3, #4
 8000f8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000f90:	2364      	movs	r3, #100	; 0x64
 8000f92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f94:	2302      	movs	r3, #2
 8000f96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9c:	f107 0320 	add.w	r3, r7, #32
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f001 f9ad 	bl	8002300 <HAL_RCC_OscConfig>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fac:	f000 f96e 	bl	800128c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb0:	230f      	movs	r3, #15
 8000fb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2103      	movs	r1, #3
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 fc07 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fd8:	f000 f958 	bl	800128c <Error_Handler>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3750      	adds	r7, #80	; 0x50
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000

08000fec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_SPI1_Init+0x68>)
 8000ff2:	4a19      	ldr	r2, [pc, #100]	; (8001058 <MX_SPI1_Init+0x6c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_SPI1_Init+0x68>)
 8000ff8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ffc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_SPI1_Init+0x68>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_SPI1_Init+0x68>)
 8001006:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800100a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_SPI1_Init+0x68>)
 800100e:	2202      	movs	r2, #2
 8001010:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_SPI1_Init+0x68>)
 8001014:	2200      	movs	r2, #0
 8001016:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_SPI1_Init+0x68>)
 800101a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800101e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <MX_SPI1_Init+0x68>)
 8001022:	2210      	movs	r2, #16
 8001024:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_SPI1_Init+0x68>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_SPI1_Init+0x68>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_SPI1_Init+0x68>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_SPI1_Init+0x68>)
 800103a:	220a      	movs	r2, #10
 800103c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_SPI1_Init+0x68>)
 8001040:	f001 fdc0 	bl	8002bc4 <HAL_SPI_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800104a:	f000 f91f 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000094 	.word	0x20000094
 8001058:	40013000 	.word	0x40013000

0800105c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <MX_TIM10_Init+0x40>)
 8001062:	4a0f      	ldr	r2, [pc, #60]	; (80010a0 <MX_TIM10_Init+0x44>)
 8001064:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9;
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <MX_TIM10_Init+0x40>)
 8001068:	2209      	movs	r2, #9
 800106a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <MX_TIM10_Init+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <MX_TIM10_Init+0x40>)
 8001074:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001078:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <MX_TIM10_Init+0x40>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <MX_TIM10_Init+0x40>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001086:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_TIM10_Init+0x40>)
 8001088:	f001 ff1e 	bl	8002ec8 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001092:	f000 f8fb 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000002c 	.word	0x2000002c
 80010a0:	40014400 	.word	0x40014400

080010a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010aa:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <MX_USART2_UART_Init+0x50>)
 80010ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010bc:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010c2:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010c8:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010ca:	220c      	movs	r2, #12
 80010cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ce:	4b08      	ldr	r3, [pc, #32]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010da:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_USART2_UART_Init+0x4c>)
 80010dc:	f002 f908 	bl	80032f0 <HAL_UART_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010e6:	f000 f8d1 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200000ec 	.word	0x200000ec
 80010f4:	40004400 	.word	0x40004400

080010f8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <MX_DMA_Init+0x4c>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <MX_DMA_Init+0x4c>)
 8001108:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0d      	ldr	r3, [pc, #52]	; (8001144 <MX_DMA_Init+0x4c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2038      	movs	r0, #56	; 0x38
 8001120:	f000 fc11 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001124:	2038      	movs	r0, #56	; 0x38
 8001126:	f000 fc2a 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	203a      	movs	r0, #58	; 0x3a
 8001130:	f000 fc09 	bl	8001946 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001134:	203a      	movs	r0, #58	; 0x3a
 8001136:	f000 fc22 	bl	800197e <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
 800115a:	60da      	str	r2, [r3, #12]
 800115c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a43      	ldr	r2, [pc, #268]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b41      	ldr	r3, [pc, #260]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a3c      	ldr	r2, [pc, #240]	; (8001274 <MX_GPIO_Init+0x12c>)
 8001184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <MX_GPIO_Init+0x12c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	4b36      	ldr	r3, [pc, #216]	; (8001274 <MX_GPIO_Init+0x12c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a35      	ldr	r2, [pc, #212]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b33      	ldr	r3, [pc, #204]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <MX_GPIO_Init+0x12c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, disp_G_Pin|disp_D_Pin|disp_E_Pin|disp_C_Pin 
 80011ce:	2200      	movs	r2, #0
 80011d0:	f640 71ff 	movw	r1, #4095	; 0xfff
 80011d4:	4828      	ldr	r0, [pc, #160]	; (8001278 <MX_GPIO_Init+0x130>)
 80011d6:	f001 f879 	bl	80022cc <HAL_GPIO_WritePin>
                          |disp_B_Pin|disp_F_Pin|disp_A_Pin|disp_DP_Pin 
                          |disp_COM4_Pin|disp_COM3_Pin|disp_COM2_Pin|disp_COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2120      	movs	r1, #32
 80011de:	4827      	ldr	r0, [pc, #156]	; (800127c <MX_GPIO_Init+0x134>)
 80011e0:	f001 f874 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <MX_GPIO_Init+0x138>)
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	4619      	mov	r1, r3
 80011f8:	481f      	ldr	r0, [pc, #124]	; (8001278 <MX_GPIO_Init+0x130>)
 80011fa:	f000 fee5 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : disp_G_Pin disp_D_Pin disp_E_Pin disp_C_Pin 
                           disp_B_Pin disp_F_Pin disp_A_Pin disp_DP_Pin 
                           disp_COM4_Pin disp_COM3_Pin disp_COM2_Pin disp_COM1_Pin */
  GPIO_InitStruct.Pin = disp_G_Pin|disp_D_Pin|disp_E_Pin|disp_C_Pin 
 80011fe:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001202:	617b      	str	r3, [r7, #20]
                          |disp_B_Pin|disp_F_Pin|disp_A_Pin|disp_DP_Pin 
                          |disp_COM4_Pin|disp_COM3_Pin|disp_COM2_Pin|disp_COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2300      	movs	r3, #0
 800120e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <MX_GPIO_Init+0x130>)
 8001218:	f000 fed6 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800121c:	2320      	movs	r3, #32
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001220:	2301      	movs	r3, #1
 8001222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4812      	ldr	r0, [pc, #72]	; (800127c <MX_GPIO_Init+0x134>)
 8001234:	f000 fec8 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_1_Pin */
  GPIO_InitStruct.Pin = button_1_Pin;
 8001238:	2301      	movs	r3, #1
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_1_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	480e      	ldr	r0, [pc, #56]	; (8001284 <MX_GPIO_Init+0x13c>)
 800124c:	f000 febc 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001250:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <MX_GPIO_Init+0x140>)
 8001258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4805      	ldr	r0, [pc, #20]	; (800127c <MX_GPIO_Init+0x134>)
 8001266:	f000 feaf 	bl	8001fc8 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40020800 	.word	0x40020800
 800127c:	40020000 	.word	0x40020000
 8001280:	10210000 	.word	0x10210000
 8001284:	40020400 	.word	0x40020400
 8001288:	10110000 	.word	0x10110000

0800128c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <HAL_MspInit+0x4c>)
 80012a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012aa:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <HAL_MspInit+0x4c>)
 80012ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012b0:	6453      	str	r3, [r2, #68]	; 0x44
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <HAL_MspInit+0x4c>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a08      	ldr	r2, [pc, #32]	; (80012e8 <HAL_MspInit+0x4c>)
 80012c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_MspInit+0x4c>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012da:	2007      	movs	r0, #7
 80012dc:	f000 fb28 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a5d      	ldr	r2, [pc, #372]	; (8001480 <HAL_SPI_MspInit+0x194>)
 800130a:	4293      	cmp	r3, r2
 800130c:	f040 80b4 	bne.w	8001478 <HAL_SPI_MspInit+0x18c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_SPI_MspInit+0x198>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001318:	4a5a      	ldr	r2, [pc, #360]	; (8001484 <HAL_SPI_MspInit+0x198>)
 800131a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800131e:	6453      	str	r3, [r2, #68]	; 0x44
 8001320:	4b58      	ldr	r3, [pc, #352]	; (8001484 <HAL_SPI_MspInit+0x198>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	2300      	movs	r3, #0
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	4b54      	ldr	r3, [pc, #336]	; (8001484 <HAL_SPI_MspInit+0x198>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a53      	ldr	r2, [pc, #332]	; (8001484 <HAL_SPI_MspInit+0x198>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_SPI_MspInit+0x198>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001348:	2300      	movs	r3, #0
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_SPI_MspInit+0x198>)
 800134e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_SPI_MspInit+0x198>)
 8001352:	f043 0302 	orr.w	r3, r3, #2
 8001356:	6313      	str	r3, [r2, #48]	; 0x30
 8001358:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_SPI_MspInit+0x198>)
 800135a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001364:	23d0      	movs	r3, #208	; 0xd0
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	2302      	movs	r3, #2
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001374:	2305      	movs	r3, #5
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4842      	ldr	r0, [pc, #264]	; (8001488 <HAL_SPI_MspInit+0x19c>)
 8001380:	f000 fe22 	bl	8001fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001384:	2308      	movs	r3, #8
 8001386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001390:	2303      	movs	r3, #3
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001394:	2305      	movs	r3, #5
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	4619      	mov	r1, r3
 800139e:	483b      	ldr	r0, [pc, #236]	; (800148c <HAL_SPI_MspInit+0x1a0>)
 80013a0:	f000 fe12 	bl	8001fc8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 80013a4:	4b3a      	ldr	r3, [pc, #232]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013a6:	4a3b      	ldr	r2, [pc, #236]	; (8001494 <HAL_SPI_MspInit+0x1a8>)
 80013a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 80013aa:	4b39      	ldr	r3, [pc, #228]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80013b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b8:	4b35      	ldr	r3, [pc, #212]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80013be:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013c6:	4b32      	ldr	r3, [pc, #200]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013cc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013ce:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80013d6:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80013ea:	4829      	ldr	r0, [pc, #164]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013ec:	f000 fae2 	bl	80019b4 <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 80013f6:	f7ff ff49 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a24      	ldr	r2, [pc, #144]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 80013fe:	649a      	str	r2, [r3, #72]	; 0x48
 8001400:	4a23      	ldr	r2, [pc, #140]	; (8001490 <HAL_SPI_MspInit+0x1a4>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001406:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001408:	4a24      	ldr	r2, [pc, #144]	; (800149c <HAL_SPI_MspInit+0x1b0>)
 800140a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 800140e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001412:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800141a:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 800141c:	2200      	movs	r2, #0
 800141e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001420:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001422:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001426:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001428:	4b1b      	ldr	r3, [pc, #108]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 800142a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001436:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 800143a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800143e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001448:	2200      	movs	r2, #0
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800144c:	4812      	ldr	r0, [pc, #72]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 800144e:	f000 fab1 	bl	80019b4 <HAL_DMA_Init>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_SPI_MspInit+0x170>
    {
      Error_Handler();
 8001458:	f7ff ff18 	bl	800128c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0e      	ldr	r2, [pc, #56]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001460:	64da      	str	r2, [r3, #76]	; 0x4c
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <HAL_SPI_MspInit+0x1ac>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2023      	movs	r0, #35	; 0x23
 800146e:	f000 fa6a 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001472:	2023      	movs	r0, #35	; 0x23
 8001474:	f000 fa83 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001478:	bf00      	nop
 800147a:	3728      	adds	r7, #40	; 0x28
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40013000 	.word	0x40013000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	2000018c 	.word	0x2000018c
 8001494:	40026440 	.word	0x40026440
 8001498:	2000012c 	.word	0x2000012c
 800149c:	40026410 	.word	0x40026410

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_TIM_Base_MspInit+0x48>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d115      	bne.n	80014de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_TIM_Base_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <HAL_TIM_Base_MspInit+0x4c>)
 80014bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c0:	6453      	str	r3, [r2, #68]	; 0x44
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_TIM_Base_MspInit+0x4c>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2100      	movs	r1, #0
 80014d2:	2019      	movs	r0, #25
 80014d4:	f000 fa37 	bl	8001946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80014d8:	2019      	movs	r0, #25
 80014da:	f000 fa50 	bl	800197e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80014de:	bf00      	nop
 80014e0:	3710      	adds	r7, #16
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	40014400 	.word	0x40014400
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_UART_MspInit+0x84>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12b      	bne.n	800156a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_UART_MspInit+0x88>)
 800151c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_UART_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800154a:	230c      	movs	r3, #12
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155a:	2307      	movs	r3, #7
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_UART_MspInit+0x8c>)
 8001566:	f000 fd2f 	bl	8001fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40004400 	.word	0x40004400
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f8bc 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80015e0:	4802      	ldr	r0, [pc, #8]	; (80015ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015e2:	f001 fcc0 	bl	8002f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000002c 	.word	0x2000002c

080015f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80015f4:	4802      	ldr	r0, [pc, #8]	; (8001600 <SPI1_IRQHandler+0x10>)
 80015f6:	f001 fb49 	bl	8002c8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000094 	.word	0x20000094

08001604 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001608:	4802      	ldr	r0, [pc, #8]	; (8001614 <DMA2_Stream0_IRQHandler+0x10>)
 800160a:	f000 faa3 	bl	8001b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000012c 	.word	0x2000012c

08001618 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA2_Stream2_IRQHandler+0x10>)
 800161e:	f000 fa99 	bl	8001b54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	2000018c 	.word	0x2000018c

0800162c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <SystemInit+0x28>)
 8001632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001636:	4a07      	ldr	r2, [pc, #28]	; (8001654 <SystemInit+0x28>)
 8001638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800163c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001640:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SystemInit+0x28>)
 8001642:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001646:	609a      	str	r2, [r3, #8]
#endif
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800165c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800165e:	e003      	b.n	8001668 <LoopCopyDataInit>

08001660 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001662:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001664:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001666:	3104      	adds	r1, #4

08001668 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800166c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800166e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001670:	d3f6      	bcc.n	8001660 <CopyDataInit>
  ldr  r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001674:	e002      	b.n	800167c <LoopFillZerobss>

08001676 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001676:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001678:	f842 3b04 	str.w	r3, [r2], #4

0800167c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800167e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001680:	d3f9      	bcc.n	8001676 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001682:	f7ff ffd3 	bl	800162c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f002 f9fd 	bl	8003a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fc21 	bl	8000ed0 <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001690:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001694:	08003b24 	.word	0x08003b24
  ldr  r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800169c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80016a0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80016a4:	200001f0 	.word	0x200001f0

080016a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <ADC_IRQHandler>
	...

080016ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <HAL_Init+0x40>)
 80016b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_Init+0x40>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <HAL_Init+0x40>)
 80016c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c8:	4b08      	ldr	r3, [pc, #32]	; (80016ec <HAL_Init+0x40>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a07      	ldr	r2, [pc, #28]	; (80016ec <HAL_Init+0x40>)
 80016ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d4:	2003      	movs	r0, #3
 80016d6:	f000 f92b 	bl	8001930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016da:	2000      	movs	r0, #0
 80016dc:	f000 f808 	bl	80016f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016e0:	f7ff fddc 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	40023c00 	.word	0x40023c00

080016f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <HAL_InitTick+0x54>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x58>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f943 	bl	800199a <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800172c:	f000 f90b 	bl	8001946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	; (800174c <HAL_InitTick+0x5c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000000 	.word	0x20000000
 8001748:	20000008 	.word	0x20000008
 800174c:	20000004 	.word	0x20000004

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	; (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000008 	.word	0x20000008
 8001774:	200001ec 	.word	0x200001ec

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	200001ec 	.word	0x200001ec

08001790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017ac:	4013      	ands	r3, r2
 80017ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c2:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <__NVIC_SetPriorityGrouping+0x44>)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	60d3      	str	r3, [r2, #12]
}
 80017c8:	bf00      	nop
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017dc:	4b04      	ldr	r3, [pc, #16]	; (80017f0 <__NVIC_GetPriorityGrouping+0x18>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	f003 0307 	and.w	r3, r3, #7
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	2b00      	cmp	r3, #0
 8001804:	db0b      	blt.n	800181e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 021f 	and.w	r2, r3, #31
 800180c:	4907      	ldr	r1, [pc, #28]	; (800182c <__NVIC_EnableIRQ+0x38>)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	2001      	movs	r0, #1
 8001816:	fa00 f202 	lsl.w	r2, r0, r2
 800181a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000e100 	.word	0xe000e100

08001830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	6039      	str	r1, [r7, #0]
 800183a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800183c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001840:	2b00      	cmp	r3, #0
 8001842:	db0a      	blt.n	800185a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	490c      	ldr	r1, [pc, #48]	; (800187c <__NVIC_SetPriority+0x4c>)
 800184a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184e:	0112      	lsls	r2, r2, #4
 8001850:	b2d2      	uxtb	r2, r2
 8001852:	440b      	add	r3, r1
 8001854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001858:	e00a      	b.n	8001870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4908      	ldr	r1, [pc, #32]	; (8001880 <__NVIC_SetPriority+0x50>)
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	f003 030f 	and.w	r3, r3, #15
 8001866:	3b04      	subs	r3, #4
 8001868:	0112      	lsls	r2, r2, #4
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	440b      	add	r3, r1
 800186e:	761a      	strb	r2, [r3, #24]
}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000e100 	.word	0xe000e100
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001884:	b480      	push	{r7}
 8001886:	b089      	sub	sp, #36	; 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f1c3 0307 	rsb	r3, r3, #7
 800189e:	2b04      	cmp	r3, #4
 80018a0:	bf28      	it	cs
 80018a2:	2304      	movcs	r3, #4
 80018a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3304      	adds	r3, #4
 80018aa:	2b06      	cmp	r3, #6
 80018ac:	d902      	bls.n	80018b4 <NVIC_EncodePriority+0x30>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3b03      	subs	r3, #3
 80018b2:	e000      	b.n	80018b6 <NVIC_EncodePriority+0x32>
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43da      	mvns	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	401a      	ands	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	fa01 f303 	lsl.w	r3, r1, r3
 80018d6:	43d9      	mvns	r1, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018dc:	4313      	orrs	r3, r2
         );
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3724      	adds	r7, #36	; 0x24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018fc:	d301      	bcc.n	8001902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fe:	2301      	movs	r3, #1
 8001900:	e00f      	b.n	8001922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <SysTick_Config+0x40>)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800190a:	210f      	movs	r1, #15
 800190c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001910:	f7ff ff8e 	bl	8001830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SysTick_Config+0x40>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x40>)
 800191c:	2207      	movs	r2, #7
 800191e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff ff29 	bl	8001790 <__NVIC_SetPriorityGrouping>
}
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	4603      	mov	r3, r0
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
 8001952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001958:	f7ff ff3e 	bl	80017d8 <__NVIC_GetPriorityGrouping>
 800195c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	6978      	ldr	r0, [r7, #20]
 8001964:	f7ff ff8e 	bl	8001884 <NVIC_EncodePriority>
 8001968:	4602      	mov	r2, r0
 800196a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800196e:	4611      	mov	r1, r2
 8001970:	4618      	mov	r0, r3
 8001972:	f7ff ff5d 	bl	8001830 <__NVIC_SetPriority>
}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	4603      	mov	r3, r0
 8001986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff ff31 	bl	80017f4 <__NVIC_EnableIRQ>
}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ffa2 	bl	80018ec <SysTick_Config>
 80019a8:	4603      	mov	r3, r0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff feda 	bl	8001778 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e099      	b.n	8001b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2202      	movs	r2, #2
 80019dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f0:	e00f      	b.n	8001a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f2:	f7ff fec1 	bl	8001778 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d908      	bls.n	8001a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e078      	b.n	8001b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e8      	bne.n	80019f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_DMA_Init+0x158>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d107      	bne.n	8001a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4313      	orrs	r3, r2
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d117      	bne.n	8001ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fa0b 	bl	8001ed4 <DMA_CheckFifoParam>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e016      	b.n	8001b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f9c2 	bl	8001e68 <DMA_CalcBaseAndBitshift>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	223f      	movs	r2, #63	; 0x3f
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	f010803f 	.word	0xf010803f

08001b10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d004      	beq.n	8001b2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e00c      	b.n	8001b48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2205      	movs	r2, #5
 8001b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b60:	4b92      	ldr	r3, [pc, #584]	; (8001dac <HAL_DMA_IRQHandler+0x258>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_DMA_IRQHandler+0x25c>)
 8001b66:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6a:	0a9b      	lsrs	r3, r3, #10
 8001b6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7e:	2208      	movs	r2, #8
 8001b80:	409a      	lsls	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d01a      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d013      	beq.n	8001bc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f022 0204 	bic.w	r2, r2, #4
 8001ba6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bac:	2208      	movs	r2, #8
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	409a      	lsls	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d012      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d00b      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be2:	2201      	movs	r2, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bee:	f043 0202 	orr.w	r2, r3, #2
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d012      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d00b      	beq.n	8001c2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c18:	2204      	movs	r2, #4
 8001c1a:	409a      	lsls	r2, r3
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c24:	f043 0204 	orr.w	r2, r3, #4
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c30:	2210      	movs	r2, #16
 8001c32:	409a      	lsls	r2, r3
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d043      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d03c      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2210      	movs	r2, #16
 8001c50:	409a      	lsls	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d018      	beq.n	8001c96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d024      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	4798      	blx	r3
 8001c82:	e01f      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01b      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	4798      	blx	r3
 8001c94:	e016      	b.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d107      	bne.n	8001cb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 0208 	bic.w	r2, r2, #8
 8001cb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2220      	movs	r2, #32
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 808e 	beq.w	8001df2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0310 	and.w	r3, r3, #16
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 8086 	beq.w	8001df2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cea:	2220      	movs	r2, #32
 8001cec:	409a      	lsls	r2, r3
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b05      	cmp	r3, #5
 8001cfc:	d136      	bne.n	8001d6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0216 	bic.w	r2, r2, #22
 8001d0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <HAL_DMA_IRQHandler+0x1da>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0208 	bic.w	r2, r2, #8
 8001d3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d42:	223f      	movs	r2, #63	; 0x3f
 8001d44:	409a      	lsls	r2, r3
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d07d      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
        }
        return;
 8001d6a:	e078      	b.n	8001e5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d01c      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d108      	bne.n	8001d9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d030      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
 8001d98:	e02b      	b.n	8001df2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d027      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	4798      	blx	r3
 8001daa:	e022      	b.n	8001df2 <HAL_DMA_IRQHandler+0x29e>
 8001dac:	20000000 	.word	0x20000000
 8001db0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0210 	bic.w	r2, r2, #16
 8001dd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d032      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d022      	beq.n	8001e4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d307      	bcc.n	8001e3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1f2      	bne.n	8001e1e <HAL_DMA_IRQHandler+0x2ca>
 8001e38:	e000      	b.n	8001e3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	4798      	blx	r3
 8001e5c:	e000      	b.n	8001e60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e5e:	bf00      	nop
    }
  }
}
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop

08001e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3b10      	subs	r3, #16
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <DMA_CalcBaseAndBitshift+0x64>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d909      	bls.n	8001eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ea8:	e007      	b.n	8001eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab
 8001ed0:	08003b0c 	.word	0x08003b0c

08001ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11f      	bne.n	8001f2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d855      	bhi.n	8001fa0 <DMA_CheckFifoParam+0xcc>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <DMA_CheckFifoParam+0x28>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f1f 	.word	0x08001f1f
 8001f04:	08001f0d 	.word	0x08001f0d
 8001f08:	08001fa1 	.word	0x08001fa1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d045      	beq.n	8001fa4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1c:	e042      	b.n	8001fa4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f26:	d13f      	bne.n	8001fa8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2c:	e03c      	b.n	8001fa8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f36:	d121      	bne.n	8001f7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d836      	bhi.n	8001fac <DMA_CheckFifoParam+0xd8>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <DMA_CheckFifoParam+0x70>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5b 	.word	0x08001f5b
 8001f4c:	08001f55 	.word	0x08001f55
 8001f50:	08001f6d 	.word	0x08001f6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	e02f      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6a:	e021      	b.n	8001fb0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f74:	d11e      	bne.n	8001fb4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7a:	e01b      	b.n	8001fb4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d902      	bls.n	8001f88 <DMA_CheckFifoParam+0xb4>
 8001f82:	2b03      	cmp	r3, #3
 8001f84:	d003      	beq.n	8001f8e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f86:	e018      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8c:	e015      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00e      	beq.n	8001fb8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f9e:	e00b      	b.n	8001fb8 <DMA_CheckFifoParam+0xe4>
      break;
 8001fa0:	bf00      	nop
 8001fa2:	e00a      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fa4:	bf00      	nop
 8001fa6:	e008      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fa8:	bf00      	nop
 8001faa:	e006      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fac:	bf00      	nop
 8001fae:	e004      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fb0:	bf00      	nop
 8001fb2:	e002      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;   
 8001fb4:	bf00      	nop
 8001fb6:	e000      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fb8:	bf00      	nop
    }
  } 
  
  return status; 
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
 8001fe2:	e159      	b.n	8002298 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	f040 8148 	bne.w	8002292 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d00b      	beq.n	8002022 <HAL_GPIO_Init+0x5a>
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b02      	cmp	r3, #2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002016:	2b11      	cmp	r3, #17
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b12      	cmp	r3, #18
 8002020:	d130      	bne.n	8002084 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	2203      	movs	r2, #3
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002058:	2201      	movs	r2, #1
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	091b      	lsrs	r3, r3, #4
 800206e:	f003 0201 	and.w	r2, r3, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0xfc>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	2b12      	cmp	r3, #18
 80020c2:	d123      	bne.n	800210c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	08da      	lsrs	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3208      	adds	r2, #8
 80020cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	220f      	movs	r2, #15
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	08da      	lsrs	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3208      	adds	r2, #8
 8002106:	69b9      	ldr	r1, [r7, #24]
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	2203      	movs	r2, #3
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0203 	and.w	r2, r3, #3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 80a2 	beq.w	8002292 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_GPIO_Init+0x2e4>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a55      	ldr	r2, [pc, #340]	; (80022ac <HAL_GPIO_Init+0x2e4>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b53      	ldr	r3, [pc, #332]	; (80022ac <HAL_GPIO_Init+0x2e4>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216a:	4a51      	ldr	r2, [pc, #324]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	089b      	lsrs	r3, r3, #2
 8002170:	3302      	adds	r3, #2
 8002172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	220f      	movs	r2, #15
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2ec>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x202>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_GPIO_Init+0x2f0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x1fe>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a46      	ldr	r2, [pc, #280]	; (80022bc <HAL_GPIO_Init+0x2f4>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a45      	ldr	r2, [pc, #276]	; (80022c0 <HAL_GPIO_Init+0x2f8>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x1f6>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a44      	ldr	r2, [pc, #272]	; (80022c4 <HAL_GPIO_Init+0x2fc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x1f2>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021ba:	2307      	movs	r3, #7
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x204>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021dc:	4934      	ldr	r1, [pc, #208]	; (80022b0 <HAL_GPIO_Init+0x2e8>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_GPIO_Init+0x300>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220e:	4a2e      	ldr	r2, [pc, #184]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002238:	4a23      	ldr	r2, [pc, #140]	; (80022c8 <HAL_GPIO_Init+0x300>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a19      	ldr	r2, [pc, #100]	; (80022c8 <HAL_GPIO_Init+0x300>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <HAL_GPIO_Init+0x300>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_GPIO_Init+0x300>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f aea2 	bls.w	8001fe4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	3724      	adds	r7, #36	; 0x24
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40020400 	.word	0x40020400
 80022bc:	40020800 	.word	0x40020800
 80022c0:	40020c00 	.word	0x40020c00
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40013c00 	.word	0x40013c00

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e8:	e003      	b.n	80022f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e25b      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d075      	beq.n	800240a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	4ba3      	ldr	r3, [pc, #652]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d00c      	beq.n	8002344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4ba0      	ldr	r3, [pc, #640]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d112      	bne.n	800235c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002336:	4b9d      	ldr	r3, [pc, #628]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002342:	d10b      	bne.n	800235c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4b99      	ldr	r3, [pc, #612]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05b      	beq.n	8002408 <HAL_RCC_OscConfig+0x108>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d157      	bne.n	8002408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e236      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d106      	bne.n	8002374 <HAL_RCC_OscConfig+0x74>
 8002366:	4b91      	ldr	r3, [pc, #580]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a90      	ldr	r2, [pc, #576]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e01d      	b.n	80023b0 <HAL_RCC_OscConfig+0xb0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x98>
 800237e:	4b8b      	ldr	r3, [pc, #556]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a8a      	ldr	r2, [pc, #552]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b88      	ldr	r3, [pc, #544]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a87      	ldr	r2, [pc, #540]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0xb0>
 8002398:	4b84      	ldr	r3, [pc, #528]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a83      	ldr	r2, [pc, #524]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b81      	ldr	r3, [pc, #516]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a80      	ldr	r2, [pc, #512]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff f9de 	bl	8001778 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff f9da 	bl	8001778 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e1fb      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b76      	ldr	r3, [pc, #472]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0xc0>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f9ca 	bl	8001778 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff f9c6 	bl	8001778 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1e7      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b6c      	ldr	r3, [pc, #432]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0xe8>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d063      	beq.n	80024de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	4b65      	ldr	r3, [pc, #404]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b62      	ldr	r3, [pc, #392]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b5f      	ldr	r3, [pc, #380]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	4b5c      	ldr	r3, [pc, #368]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x152>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1bb      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b56      	ldr	r3, [pc, #344]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4952      	ldr	r1, [pc, #328]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e03a      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <HAL_RCC_OscConfig+0x2b0>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7ff f97f 	bl	8001778 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247e:	f7ff f97b 	bl	8001778 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e19c      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	4b46      	ldr	r3, [pc, #280]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4940      	ldr	r1, [pc, #256]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b3f      	ldr	r3, [pc, #252]	; (80025b0 <HAL_RCC_OscConfig+0x2b0>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff f95e 	bl	8001778 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c0:	f7ff f95a 	bl	8001778 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e17b      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	4b36      	ldr	r3, [pc, #216]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d030      	beq.n	800254c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCC_OscConfig+0x2b4>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff f93e 	bl	8001778 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7ff f93a 	bl	8001778 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e15b      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b26      	ldr	r3, [pc, #152]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x200>
 800251e:	e015      	b.n	800254c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <HAL_RCC_OscConfig+0x2b4>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7ff f927 	bl	8001778 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252e:	f7ff f923 	bl	8001778 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e144      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002540:	4b1a      	ldr	r3, [pc, #104]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f0      	bne.n	800252e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a0 	beq.w	800269a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 8002574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_RCC_OscConfig+0x2ac>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002586:	2301      	movs	r3, #1
 8002588:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800258a:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_OscConfig+0x2b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002592:	2b00      	cmp	r3, #0
 8002594:	d121      	bne.n	80025da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002596:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <HAL_RCC_OscConfig+0x2b8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a07      	ldr	r2, [pc, #28]	; (80025b8 <HAL_RCC_OscConfig+0x2b8>)
 800259c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a2:	f7ff f8e9 	bl	8001778 <HAL_GetTick>
 80025a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e011      	b.n	80025ce <HAL_RCC_OscConfig+0x2ce>
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	42470000 	.word	0x42470000
 80025b4:	42470e80 	.word	0x42470e80
 80025b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025bc:	f7ff f8dc 	bl	8001778 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0fd      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ce:	4b81      	ldr	r3, [pc, #516]	; (80027d4 <HAL_RCC_OscConfig+0x4d4>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0f0      	beq.n	80025bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d106      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2f0>
 80025e2:	4b7d      	ldr	r3, [pc, #500]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e6:	4a7c      	ldr	r2, [pc, #496]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6713      	str	r3, [r2, #112]	; 0x70
 80025ee:	e01c      	b.n	800262a <HAL_RCC_OscConfig+0x32a>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	2b05      	cmp	r3, #5
 80025f6:	d10c      	bne.n	8002612 <HAL_RCC_OscConfig+0x312>
 80025f8:	4b77      	ldr	r3, [pc, #476]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a76      	ldr	r2, [pc, #472]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 80025fe:	f043 0304 	orr.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	4b74      	ldr	r3, [pc, #464]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	4a73      	ldr	r2, [pc, #460]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 800260a:	f043 0301 	orr.w	r3, r3, #1
 800260e:	6713      	str	r3, [r2, #112]	; 0x70
 8002610:	e00b      	b.n	800262a <HAL_RCC_OscConfig+0x32a>
 8002612:	4b71      	ldr	r3, [pc, #452]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a70      	ldr	r2, [pc, #448]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002618:	f023 0301 	bic.w	r3, r3, #1
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
 800261e:	4b6e      	ldr	r3, [pc, #440]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002622:	4a6d      	ldr	r2, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d015      	beq.n	800265e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff f8a1 	bl	8001778 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002638:	e00a      	b.n	8002650 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800263a:	f7ff f89d 	bl	8001778 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	f241 3288 	movw	r2, #5000	; 0x1388
 8002648:	4293      	cmp	r3, r2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e0bc      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002650:	4b61      	ldr	r3, [pc, #388]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ee      	beq.n	800263a <HAL_RCC_OscConfig+0x33a>
 800265c:	e014      	b.n	8002688 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265e:	f7ff f88b 	bl	8001778 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff f887 	bl	8001778 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e0a6      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800267c:	4b56      	ldr	r3, [pc, #344]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 800267e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ee      	bne.n	8002666 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002688:	7dfb      	ldrb	r3, [r7, #23]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d105      	bne.n	800269a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b52      	ldr	r3, [pc, #328]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	4a51      	ldr	r2, [pc, #324]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8092 	beq.w	80027c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026a4:	4b4c      	ldr	r3, [pc, #304]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 030c 	and.w	r3, r3, #12
 80026ac:	2b08      	cmp	r3, #8
 80026ae:	d05c      	beq.n	800276a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d141      	bne.n	800273c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b8:	4b48      	ldr	r3, [pc, #288]	; (80027dc <HAL_RCC_OscConfig+0x4dc>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026be:	f7ff f85b 	bl	8001778 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c6:	f7ff f857 	bl	8001778 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e078      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d8:	4b3f      	ldr	r3, [pc, #252]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1f0      	bne.n	80026c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	69da      	ldr	r2, [r3, #28]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	019b      	lsls	r3, r3, #6
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	085b      	lsrs	r3, r3, #1
 80026fc:	3b01      	subs	r3, #1
 80026fe:	041b      	lsls	r3, r3, #16
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002706:	061b      	lsls	r3, r3, #24
 8002708:	4933      	ldr	r1, [pc, #204]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_RCC_OscConfig+0x4dc>)
 8002710:	2201      	movs	r2, #1
 8002712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002714:	f7ff f830 	bl	8001778 <HAL_GetTick>
 8002718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800271a:	e008      	b.n	800272e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271c:	f7ff f82c 	bl	8001778 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d901      	bls.n	800272e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	e04d      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800272e:	4b2a      	ldr	r3, [pc, #168]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0f0      	beq.n	800271c <HAL_RCC_OscConfig+0x41c>
 800273a:	e045      	b.n	80027c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800273c:	4b27      	ldr	r3, [pc, #156]	; (80027dc <HAL_RCC_OscConfig+0x4dc>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002742:	f7ff f819 	bl	8001778 <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274a:	f7ff f815 	bl	8001778 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e036      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275c:	4b1e      	ldr	r3, [pc, #120]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1f0      	bne.n	800274a <HAL_RCC_OscConfig+0x44a>
 8002768:	e02e      	b.n	80027c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e029      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_RCC_OscConfig+0x4d8>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	429a      	cmp	r2, r3
 8002788:	d11c      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d115      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800279e:	4013      	ands	r3, r2
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d10d      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d106      	bne.n	80027c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3718      	adds	r7, #24
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40007000 	.word	0x40007000
 80027d8:	40023800 	.word	0x40023800
 80027dc:	42470060 	.word	0x42470060

080027e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e0cc      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f4:	4b68      	ldr	r3, [pc, #416]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 030f 	and.w	r3, r3, #15
 80027fc:	683a      	ldr	r2, [r7, #0]
 80027fe:	429a      	cmp	r2, r3
 8002800:	d90c      	bls.n	800281c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	b2d2      	uxtb	r2, r2
 8002808:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d001      	beq.n	800281c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e0b8      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d020      	beq.n	800286a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0304 	and.w	r3, r3, #4
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002834:	4b59      	ldr	r3, [pc, #356]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	4a58      	ldr	r2, [pc, #352]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800283e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800284c:	4b53      	ldr	r3, [pc, #332]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a52      	ldr	r2, [pc, #328]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002856:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b50      	ldr	r3, [pc, #320]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	494d      	ldr	r1, [pc, #308]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d044      	beq.n	8002900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d107      	bne.n	800288e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287e:	4b47      	ldr	r3, [pc, #284]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d119      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e07f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d003      	beq.n	800289e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289a:	2b03      	cmp	r3, #3
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e06f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ae:	4b3b      	ldr	r3, [pc, #236]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e067      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028be:	4b37      	ldr	r3, [pc, #220]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f023 0203 	bic.w	r2, r3, #3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4934      	ldr	r1, [pc, #208]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d0:	f7fe ff52 	bl	8001778 <HAL_GetTick>
 80028d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	e00a      	b.n	80028ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d8:	f7fe ff4e 	bl	8001778 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e04f      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	4b2b      	ldr	r3, [pc, #172]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 020c 	and.w	r2, r3, #12
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d1eb      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002900:	4b25      	ldr	r3, [pc, #148]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d20c      	bcs.n	8002928 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b22      	ldr	r3, [pc, #136]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e032      	b.n	800298e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d008      	beq.n	8002946 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002934:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4916      	ldr	r1, [pc, #88]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	4313      	orrs	r3, r2
 8002944:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d009      	beq.n	8002966 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	490e      	ldr	r1, [pc, #56]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002966:	f000 f821 	bl	80029ac <HAL_RCC_GetSysClockFreq>
 800296a:	4601      	mov	r1, r0
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	091b      	lsrs	r3, r3, #4
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	fa21 f303 	lsr.w	r3, r1, r3
 800297e:	4a09      	ldr	r2, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1c4>)
 8002980:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002982:	4b09      	ldr	r3, [pc, #36]	; (80029a8 <HAL_RCC_ClockConfig+0x1c8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f7fe feb2 	bl	80016f0 <HAL_InitTick>

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	40023c00 	.word	0x40023c00
 800299c:	40023800 	.word	0x40023800
 80029a0:	08003af4 	.word	0x08003af4
 80029a4:	20000000 	.word	0x20000000
 80029a8:	20000004 	.word	0x20000004

080029ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	2300      	movs	r3, #0
 80029bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c2:	4b63      	ldr	r3, [pc, #396]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 030c 	and.w	r3, r3, #12
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d007      	beq.n	80029de <HAL_RCC_GetSysClockFreq+0x32>
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d008      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x38>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80b4 	bne.w	8002b40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029d8:	4b5e      	ldr	r3, [pc, #376]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029da:	60bb      	str	r3, [r7, #8]
       break;
 80029dc:	e0b3      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029de:	4b5e      	ldr	r3, [pc, #376]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029e0:	60bb      	str	r3, [r7, #8]
      break;
 80029e2:	e0b0      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e4:	4b5a      	ldr	r3, [pc, #360]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029ee:	4b58      	ldr	r3, [pc, #352]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d04a      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fa:	4b55      	ldr	r3, [pc, #340]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	099b      	lsrs	r3, r3, #6
 8002a00:	f04f 0400 	mov.w	r4, #0
 8002a04:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	ea03 0501 	and.w	r5, r3, r1
 8002a10:	ea04 0602 	and.w	r6, r4, r2
 8002a14:	4629      	mov	r1, r5
 8002a16:	4632      	mov	r2, r6
 8002a18:	f04f 0300 	mov.w	r3, #0
 8002a1c:	f04f 0400 	mov.w	r4, #0
 8002a20:	0154      	lsls	r4, r2, #5
 8002a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a26:	014b      	lsls	r3, r1, #5
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	1b49      	subs	r1, r1, r5
 8002a2e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	f04f 0400 	mov.w	r4, #0
 8002a3a:	0194      	lsls	r4, r2, #6
 8002a3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a40:	018b      	lsls	r3, r1, #6
 8002a42:	1a5b      	subs	r3, r3, r1
 8002a44:	eb64 0402 	sbc.w	r4, r4, r2
 8002a48:	f04f 0100 	mov.w	r1, #0
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	00e2      	lsls	r2, r4, #3
 8002a52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a56:	00d9      	lsls	r1, r3, #3
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4614      	mov	r4, r2
 8002a5c:	195b      	adds	r3, r3, r5
 8002a5e:	eb44 0406 	adc.w	r4, r4, r6
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	0262      	lsls	r2, r4, #9
 8002a6c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a70:	0259      	lsls	r1, r3, #9
 8002a72:	460b      	mov	r3, r1
 8002a74:	4614      	mov	r4, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	4621      	mov	r1, r4
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f04f 0400 	mov.w	r4, #0
 8002a80:	461a      	mov	r2, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	f7fd fba8 	bl	80001d8 <__aeabi_uldivmod>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	460c      	mov	r4, r1
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	e049      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a90:	4b2f      	ldr	r3, [pc, #188]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	099b      	lsrs	r3, r3, #6
 8002a96:	f04f 0400 	mov.w	r4, #0
 8002a9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a9e:	f04f 0200 	mov.w	r2, #0
 8002aa2:	ea03 0501 	and.w	r5, r3, r1
 8002aa6:	ea04 0602 	and.w	r6, r4, r2
 8002aaa:	4629      	mov	r1, r5
 8002aac:	4632      	mov	r2, r6
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	f04f 0400 	mov.w	r4, #0
 8002ab6:	0154      	lsls	r4, r2, #5
 8002ab8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002abc:	014b      	lsls	r3, r1, #5
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	1b49      	subs	r1, r1, r5
 8002ac4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	f04f 0400 	mov.w	r4, #0
 8002ad0:	0194      	lsls	r4, r2, #6
 8002ad2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ad6:	018b      	lsls	r3, r1, #6
 8002ad8:	1a5b      	subs	r3, r3, r1
 8002ada:	eb64 0402 	sbc.w	r4, r4, r2
 8002ade:	f04f 0100 	mov.w	r1, #0
 8002ae2:	f04f 0200 	mov.w	r2, #0
 8002ae6:	00e2      	lsls	r2, r4, #3
 8002ae8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aec:	00d9      	lsls	r1, r3, #3
 8002aee:	460b      	mov	r3, r1
 8002af0:	4614      	mov	r4, r2
 8002af2:	195b      	adds	r3, r3, r5
 8002af4:	eb44 0406 	adc.w	r4, r4, r6
 8002af8:	f04f 0100 	mov.w	r1, #0
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	02a2      	lsls	r2, r4, #10
 8002b02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b06:	0299      	lsls	r1, r3, #10
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4614      	mov	r4, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	4621      	mov	r1, r4
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f04f 0400 	mov.w	r4, #0
 8002b16:	461a      	mov	r2, r3
 8002b18:	4623      	mov	r3, r4
 8002b1a:	f7fd fb5d 	bl	80001d8 <__aeabi_uldivmod>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	460c      	mov	r4, r1
 8002b22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b24:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b34:	68fa      	ldr	r2, [r7, #12]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	60bb      	str	r3, [r7, #8]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b04      	ldr	r3, [pc, #16]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b42:	60bb      	str	r3, [r7, #8]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	68bb      	ldr	r3, [r7, #8]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b7c:	4601      	mov	r1, r0
 8002b7e:	4b05      	ldr	r3, [pc, #20]	; (8002b94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0a9b      	lsrs	r3, r3, #10
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4a03      	ldr	r2, [pc, #12]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8a:	5cd3      	ldrb	r3, [r2, r3]
 8002b8c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	40023800 	.word	0x40023800
 8002b98:	08003b04 	.word	0x08003b04

08002b9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ba0:	f7ff ffdc 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002ba4:	4601      	mov	r1, r0
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	0b5b      	lsrs	r3, r3, #13
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	4a03      	ldr	r2, [pc, #12]	; (8002bc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb2:	5cd3      	ldrb	r3, [r2, r3]
 8002bb4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	08003b04 	.word	0x08003b04

08002bc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e056      	b.n	8002c84 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe fb7b 	bl	80012ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c0c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	ea42 0103 	orr.w	r1, r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	0c1b      	lsrs	r3, r3, #16
 8002c54:	f003 0104 	and.w	r1, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c72:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10f      	bne.n	8002cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d004      	beq.n	8002cd0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
    return;
 8002cce:	e0d8      	b.n	8002e82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	085b      	lsrs	r3, r3, #1
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00a      	beq.n	8002cf2 <HAL_SPI_IRQHandler+0x66>
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	09db      	lsrs	r3, r3, #7
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d004      	beq.n	8002cf2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
    return;
 8002cf0:	e0c7      	b.n	8002e82 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_SPI_IRQHandler+0x8c>
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	0a1b      	lsrs	r3, r3, #8
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f000 80b5 	beq.w	8002e82 <HAL_SPI_IRQHandler+0x1f6>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80ae 	beq.w	8002e82 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	099b      	lsrs	r3, r3, #6
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d023      	beq.n	8002d7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d011      	beq.n	8002d62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d42:	f043 0204 	orr.w	r2, r3, #4
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	617b      	str	r3, [r7, #20]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	e00b      	b.n	8002d7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]
        return;
 8002d78:	e083      	b.n	8002e82 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d014      	beq.n	8002db0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8a:	f043 0201 	orr.w	r2, r3, #1
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	60fb      	str	r3, [r7, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	0a1b      	lsrs	r3, r3, #8
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00c      	beq.n	8002dd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc0:	f043 0208 	orr.w	r2, r3, #8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002dc8:	2300      	movs	r3, #0
 8002dca:	60bb      	str	r3, [r7, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d050      	beq.n	8002e80 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002dec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d104      	bne.n	8002e0a <HAL_SPI_IRQHandler+0x17e>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d034      	beq.n	8002e74 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0203 	bic.w	r2, r2, #3
 8002e18:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d011      	beq.n	8002e46 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <HAL_SPI_IRQHandler+0x1fc>)
 8002e28:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe fe6e 	bl	8001b10 <HAL_DMA_Abort_IT>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_SPI_IRQHandler+0x1fc>)
 8002e54:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fe58 	bl	8001b10 <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d00a      	beq.n	8002e7c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002e72:	e003      	b.n	8002e7c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f809 	bl	8002e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002e7a:	e000      	b.n	8002e7e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8002e7c:	bf00      	nop
    return;
 8002e7e:	bf00      	nop
 8002e80:	bf00      	nop
  }
}
 8002e82:	3720      	adds	r7, #32
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	08002ea1 	.word	0x08002ea1

08002e8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f7ff ffe6 	bl	8002e8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e01d      	b.n	8002f16 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d106      	bne.n	8002ef4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7fe fad6 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	4610      	mov	r0, r2
 8002f08:	f000 f95e 	bl	80031c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b085      	sub	sp, #20
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68da      	ldr	r2, [r3, #12]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2b06      	cmp	r3, #6
 8002f46:	d007      	beq.n	8002f58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3714      	adds	r7, #20
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d122      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d11b      	bne.n	8002fc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f06f 0202 	mvn.w	r2, #2
 8002f92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f8ee 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8002fae:	e005      	b.n	8002fbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f8e0 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 f8f1 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d122      	bne.n	8003016 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	f003 0304 	and.w	r3, r3, #4
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d11b      	bne.n	8003016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f06f 0204 	mvn.w	r2, #4
 8002fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8c4 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8003002:	e005      	b.n	8003010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f8b6 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f8c7 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b08      	cmp	r3, #8
 8003022:	d122      	bne.n	800306a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b08      	cmp	r3, #8
 8003030:	d11b      	bne.n	800306a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f06f 0208 	mvn.w	r2, #8
 800303a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2204      	movs	r2, #4
 8003040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69db      	ldr	r3, [r3, #28]
 8003048:	f003 0303 	and.w	r3, r3, #3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f89a 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 8003056:	e005      	b.n	8003064 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f88c 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f89d 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b10      	cmp	r3, #16
 8003076:	d122      	bne.n	80030be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b10      	cmp	r3, #16
 8003084:	d11b      	bne.n	80030be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f06f 0210 	mvn.w	r2, #16
 800308e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2208      	movs	r2, #8
 8003094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f000 f870 	bl	800318a <HAL_TIM_IC_CaptureCallback>
 80030aa:	e005      	b.n	80030b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f862 	bl	8003176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f873 	bl	800319e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f003 0301 	and.w	r3, r3, #1
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10e      	bne.n	80030ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f06f 0201 	mvn.w	r2, #1
 80030e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7fd fdeb 	bl	8000cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b80      	cmp	r3, #128	; 0x80
 80030f6:	d10e      	bne.n	8003116 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d107      	bne.n	8003116 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f8e3 	bl	80032dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d10e      	bne.n	8003142 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d107      	bne.n	8003142 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800313a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 f838 	bl	80031b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d10e      	bne.n	800316e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	f003 0320 	and.w	r3, r3, #32
 800315a:	2b20      	cmp	r3, #32
 800315c:	d107      	bne.n	800316e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f06f 0220 	mvn.w	r2, #32
 8003166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f000 f8ad 	bl	80032c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr

0800318a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003192:	bf00      	nop
 8003194:	370c      	adds	r7, #12
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031a6:	bf00      	nop
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ba:	bf00      	nop
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
	...

080031c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a34      	ldr	r2, [pc, #208]	; (80032ac <TIM_Base_SetConfig+0xe4>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d00f      	beq.n	8003200 <TIM_Base_SetConfig+0x38>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031e6:	d00b      	beq.n	8003200 <TIM_Base_SetConfig+0x38>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a31      	ldr	r2, [pc, #196]	; (80032b0 <TIM_Base_SetConfig+0xe8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d007      	beq.n	8003200 <TIM_Base_SetConfig+0x38>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <TIM_Base_SetConfig+0xec>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d003      	beq.n	8003200 <TIM_Base_SetConfig+0x38>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a2f      	ldr	r2, [pc, #188]	; (80032b8 <TIM_Base_SetConfig+0xf0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d108      	bne.n	8003212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a25      	ldr	r2, [pc, #148]	; (80032ac <TIM_Base_SetConfig+0xe4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d01b      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003220:	d017      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a22      	ldr	r2, [pc, #136]	; (80032b0 <TIM_Base_SetConfig+0xe8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <TIM_Base_SetConfig+0xec>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00f      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a20      	ldr	r2, [pc, #128]	; (80032b8 <TIM_Base_SetConfig+0xf0>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <TIM_Base_SetConfig+0xf4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <TIM_Base_SetConfig+0xf8>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_Base_SetConfig+0x8a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a1d      	ldr	r2, [pc, #116]	; (80032c4 <TIM_Base_SetConfig+0xfc>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d108      	bne.n	8003264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4313      	orrs	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <TIM_Base_SetConfig+0xe4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d103      	bne.n	8003298 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	615a      	str	r2, [r3, #20]
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40010000 	.word	0x40010000
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40000c00 	.word	0x40000c00
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400
 80032c4:	40014800 	.word	0x40014800

080032c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e03f      	b.n	8003382 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d106      	bne.n	800331c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7fe f8ea 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2224      	movs	r2, #36	; 0x24
 8003320:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003332:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f829 	bl	800338c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003348:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003358:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003368:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}
	...

0800338c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68da      	ldr	r2, [r3, #12]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69db      	ldr	r3, [r3, #28]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033ce:	f023 030c 	bic.w	r3, r3, #12
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	68f9      	ldr	r1, [r7, #12]
 80033d8:	430b      	orrs	r3, r1
 80033da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033fa:	f040 818b 	bne.w	8003714 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4ac1      	ldr	r2, [pc, #772]	; (8003708 <UART_SetConfig+0x37c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d005      	beq.n	8003414 <UART_SetConfig+0x88>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4abf      	ldr	r2, [pc, #764]	; (800370c <UART_SetConfig+0x380>)
 800340e:	4293      	cmp	r3, r2
 8003410:	f040 80bd 	bne.w	800358e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003414:	f7ff fbc2 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 8003418:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	461d      	mov	r5, r3
 800341e:	f04f 0600 	mov.w	r6, #0
 8003422:	46a8      	mov	r8, r5
 8003424:	46b1      	mov	r9, r6
 8003426:	eb18 0308 	adds.w	r3, r8, r8
 800342a:	eb49 0409 	adc.w	r4, r9, r9
 800342e:	4698      	mov	r8, r3
 8003430:	46a1      	mov	r9, r4
 8003432:	eb18 0805 	adds.w	r8, r8, r5
 8003436:	eb49 0906 	adc.w	r9, r9, r6
 800343a:	f04f 0100 	mov.w	r1, #0
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003446:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800344a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800344e:	4688      	mov	r8, r1
 8003450:	4691      	mov	r9, r2
 8003452:	eb18 0005 	adds.w	r0, r8, r5
 8003456:	eb49 0106 	adc.w	r1, r9, r6
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	461d      	mov	r5, r3
 8003460:	f04f 0600 	mov.w	r6, #0
 8003464:	196b      	adds	r3, r5, r5
 8003466:	eb46 0406 	adc.w	r4, r6, r6
 800346a:	461a      	mov	r2, r3
 800346c:	4623      	mov	r3, r4
 800346e:	f7fc feb3 	bl	80001d8 <__aeabi_uldivmod>
 8003472:	4603      	mov	r3, r0
 8003474:	460c      	mov	r4, r1
 8003476:	461a      	mov	r2, r3
 8003478:	4ba5      	ldr	r3, [pc, #660]	; (8003710 <UART_SetConfig+0x384>)
 800347a:	fba3 2302 	umull	r2, r3, r3, r2
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	461d      	mov	r5, r3
 8003488:	f04f 0600 	mov.w	r6, #0
 800348c:	46a9      	mov	r9, r5
 800348e:	46b2      	mov	sl, r6
 8003490:	eb19 0309 	adds.w	r3, r9, r9
 8003494:	eb4a 040a 	adc.w	r4, sl, sl
 8003498:	4699      	mov	r9, r3
 800349a:	46a2      	mov	sl, r4
 800349c:	eb19 0905 	adds.w	r9, r9, r5
 80034a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034b8:	4689      	mov	r9, r1
 80034ba:	4692      	mov	sl, r2
 80034bc:	eb19 0005 	adds.w	r0, r9, r5
 80034c0:	eb4a 0106 	adc.w	r1, sl, r6
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	461d      	mov	r5, r3
 80034ca:	f04f 0600 	mov.w	r6, #0
 80034ce:	196b      	adds	r3, r5, r5
 80034d0:	eb46 0406 	adc.w	r4, r6, r6
 80034d4:	461a      	mov	r2, r3
 80034d6:	4623      	mov	r3, r4
 80034d8:	f7fc fe7e 	bl	80001d8 <__aeabi_uldivmod>
 80034dc:	4603      	mov	r3, r0
 80034de:	460c      	mov	r4, r1
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b8b      	ldr	r3, [pc, #556]	; (8003710 <UART_SetConfig+0x384>)
 80034e4:	fba3 1302 	umull	r1, r3, r3, r2
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	2164      	movs	r1, #100	; 0x64
 80034ec:	fb01 f303 	mul.w	r3, r1, r3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	3332      	adds	r3, #50	; 0x32
 80034f6:	4a86      	ldr	r2, [pc, #536]	; (8003710 <UART_SetConfig+0x384>)
 80034f8:	fba2 2303 	umull	r2, r3, r2, r3
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003504:	4498      	add	r8, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	461d      	mov	r5, r3
 800350a:	f04f 0600 	mov.w	r6, #0
 800350e:	46a9      	mov	r9, r5
 8003510:	46b2      	mov	sl, r6
 8003512:	eb19 0309 	adds.w	r3, r9, r9
 8003516:	eb4a 040a 	adc.w	r4, sl, sl
 800351a:	4699      	mov	r9, r3
 800351c:	46a2      	mov	sl, r4
 800351e:	eb19 0905 	adds.w	r9, r9, r5
 8003522:	eb4a 0a06 	adc.w	sl, sl, r6
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800353a:	4689      	mov	r9, r1
 800353c:	4692      	mov	sl, r2
 800353e:	eb19 0005 	adds.w	r0, r9, r5
 8003542:	eb4a 0106 	adc.w	r1, sl, r6
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	461d      	mov	r5, r3
 800354c:	f04f 0600 	mov.w	r6, #0
 8003550:	196b      	adds	r3, r5, r5
 8003552:	eb46 0406 	adc.w	r4, r6, r6
 8003556:	461a      	mov	r2, r3
 8003558:	4623      	mov	r3, r4
 800355a:	f7fc fe3d 	bl	80001d8 <__aeabi_uldivmod>
 800355e:	4603      	mov	r3, r0
 8003560:	460c      	mov	r4, r1
 8003562:	461a      	mov	r2, r3
 8003564:	4b6a      	ldr	r3, [pc, #424]	; (8003710 <UART_SetConfig+0x384>)
 8003566:	fba3 1302 	umull	r1, r3, r3, r2
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	2164      	movs	r1, #100	; 0x64
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	3332      	adds	r3, #50	; 0x32
 8003578:	4a65      	ldr	r2, [pc, #404]	; (8003710 <UART_SetConfig+0x384>)
 800357a:	fba2 2303 	umull	r2, r3, r2, r3
 800357e:	095b      	lsrs	r3, r3, #5
 8003580:	f003 0207 	and.w	r2, r3, #7
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4442      	add	r2, r8
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e26f      	b.n	8003a6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800358e:	f7ff faf1 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003592:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	461d      	mov	r5, r3
 8003598:	f04f 0600 	mov.w	r6, #0
 800359c:	46a8      	mov	r8, r5
 800359e:	46b1      	mov	r9, r6
 80035a0:	eb18 0308 	adds.w	r3, r8, r8
 80035a4:	eb49 0409 	adc.w	r4, r9, r9
 80035a8:	4698      	mov	r8, r3
 80035aa:	46a1      	mov	r9, r4
 80035ac:	eb18 0805 	adds.w	r8, r8, r5
 80035b0:	eb49 0906 	adc.w	r9, r9, r6
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035c8:	4688      	mov	r8, r1
 80035ca:	4691      	mov	r9, r2
 80035cc:	eb18 0005 	adds.w	r0, r8, r5
 80035d0:	eb49 0106 	adc.w	r1, r9, r6
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	461d      	mov	r5, r3
 80035da:	f04f 0600 	mov.w	r6, #0
 80035de:	196b      	adds	r3, r5, r5
 80035e0:	eb46 0406 	adc.w	r4, r6, r6
 80035e4:	461a      	mov	r2, r3
 80035e6:	4623      	mov	r3, r4
 80035e8:	f7fc fdf6 	bl	80001d8 <__aeabi_uldivmod>
 80035ec:	4603      	mov	r3, r0
 80035ee:	460c      	mov	r4, r1
 80035f0:	461a      	mov	r2, r3
 80035f2:	4b47      	ldr	r3, [pc, #284]	; (8003710 <UART_SetConfig+0x384>)
 80035f4:	fba3 2302 	umull	r2, r3, r3, r2
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	461d      	mov	r5, r3
 8003602:	f04f 0600 	mov.w	r6, #0
 8003606:	46a9      	mov	r9, r5
 8003608:	46b2      	mov	sl, r6
 800360a:	eb19 0309 	adds.w	r3, r9, r9
 800360e:	eb4a 040a 	adc.w	r4, sl, sl
 8003612:	4699      	mov	r9, r3
 8003614:	46a2      	mov	sl, r4
 8003616:	eb19 0905 	adds.w	r9, r9, r5
 800361a:	eb4a 0a06 	adc.w	sl, sl, r6
 800361e:	f04f 0100 	mov.w	r1, #0
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800362a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800362e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003632:	4689      	mov	r9, r1
 8003634:	4692      	mov	sl, r2
 8003636:	eb19 0005 	adds.w	r0, r9, r5
 800363a:	eb4a 0106 	adc.w	r1, sl, r6
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	461d      	mov	r5, r3
 8003644:	f04f 0600 	mov.w	r6, #0
 8003648:	196b      	adds	r3, r5, r5
 800364a:	eb46 0406 	adc.w	r4, r6, r6
 800364e:	461a      	mov	r2, r3
 8003650:	4623      	mov	r3, r4
 8003652:	f7fc fdc1 	bl	80001d8 <__aeabi_uldivmod>
 8003656:	4603      	mov	r3, r0
 8003658:	460c      	mov	r4, r1
 800365a:	461a      	mov	r2, r3
 800365c:	4b2c      	ldr	r3, [pc, #176]	; (8003710 <UART_SetConfig+0x384>)
 800365e:	fba3 1302 	umull	r1, r3, r3, r2
 8003662:	095b      	lsrs	r3, r3, #5
 8003664:	2164      	movs	r1, #100	; 0x64
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	3332      	adds	r3, #50	; 0x32
 8003670:	4a27      	ldr	r2, [pc, #156]	; (8003710 <UART_SetConfig+0x384>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800367e:	4498      	add	r8, r3
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	461d      	mov	r5, r3
 8003684:	f04f 0600 	mov.w	r6, #0
 8003688:	46a9      	mov	r9, r5
 800368a:	46b2      	mov	sl, r6
 800368c:	eb19 0309 	adds.w	r3, r9, r9
 8003690:	eb4a 040a 	adc.w	r4, sl, sl
 8003694:	4699      	mov	r9, r3
 8003696:	46a2      	mov	sl, r4
 8003698:	eb19 0905 	adds.w	r9, r9, r5
 800369c:	eb4a 0a06 	adc.w	sl, sl, r6
 80036a0:	f04f 0100 	mov.w	r1, #0
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036b4:	4689      	mov	r9, r1
 80036b6:	4692      	mov	sl, r2
 80036b8:	eb19 0005 	adds.w	r0, r9, r5
 80036bc:	eb4a 0106 	adc.w	r1, sl, r6
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	461d      	mov	r5, r3
 80036c6:	f04f 0600 	mov.w	r6, #0
 80036ca:	196b      	adds	r3, r5, r5
 80036cc:	eb46 0406 	adc.w	r4, r6, r6
 80036d0:	461a      	mov	r2, r3
 80036d2:	4623      	mov	r3, r4
 80036d4:	f7fc fd80 	bl	80001d8 <__aeabi_uldivmod>
 80036d8:	4603      	mov	r3, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	461a      	mov	r2, r3
 80036de:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <UART_SetConfig+0x384>)
 80036e0:	fba3 1302 	umull	r1, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	3332      	adds	r3, #50	; 0x32
 80036f2:	4a07      	ldr	r2, [pc, #28]	; (8003710 <UART_SetConfig+0x384>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	f003 0207 	and.w	r2, r3, #7
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4442      	add	r2, r8
 8003704:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003706:	e1b2      	b.n	8003a6e <UART_SetConfig+0x6e2>
 8003708:	40011000 	.word	0x40011000
 800370c:	40011400 	.word	0x40011400
 8003710:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4ad7      	ldr	r2, [pc, #860]	; (8003a78 <UART_SetConfig+0x6ec>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d005      	beq.n	800372a <UART_SetConfig+0x39e>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4ad6      	ldr	r2, [pc, #856]	; (8003a7c <UART_SetConfig+0x6f0>)
 8003724:	4293      	cmp	r3, r2
 8003726:	f040 80d1 	bne.w	80038cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800372a:	f7ff fa37 	bl	8002b9c <HAL_RCC_GetPCLK2Freq>
 800372e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	469a      	mov	sl, r3
 8003734:	f04f 0b00 	mov.w	fp, #0
 8003738:	46d0      	mov	r8, sl
 800373a:	46d9      	mov	r9, fp
 800373c:	eb18 0308 	adds.w	r3, r8, r8
 8003740:	eb49 0409 	adc.w	r4, r9, r9
 8003744:	4698      	mov	r8, r3
 8003746:	46a1      	mov	r9, r4
 8003748:	eb18 080a 	adds.w	r8, r8, sl
 800374c:	eb49 090b 	adc.w	r9, r9, fp
 8003750:	f04f 0100 	mov.w	r1, #0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800375c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003760:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003764:	4688      	mov	r8, r1
 8003766:	4691      	mov	r9, r2
 8003768:	eb1a 0508 	adds.w	r5, sl, r8
 800376c:	eb4b 0609 	adc.w	r6, fp, r9
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4619      	mov	r1, r3
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	f04f 0400 	mov.w	r4, #0
 8003782:	0094      	lsls	r4, r2, #2
 8003784:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003788:	008b      	lsls	r3, r1, #2
 800378a:	461a      	mov	r2, r3
 800378c:	4623      	mov	r3, r4
 800378e:	4628      	mov	r0, r5
 8003790:	4631      	mov	r1, r6
 8003792:	f7fc fd21 	bl	80001d8 <__aeabi_uldivmod>
 8003796:	4603      	mov	r3, r0
 8003798:	460c      	mov	r4, r1
 800379a:	461a      	mov	r2, r3
 800379c:	4bb8      	ldr	r3, [pc, #736]	; (8003a80 <UART_SetConfig+0x6f4>)
 800379e:	fba3 2302 	umull	r2, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	469b      	mov	fp, r3
 80037ac:	f04f 0c00 	mov.w	ip, #0
 80037b0:	46d9      	mov	r9, fp
 80037b2:	46e2      	mov	sl, ip
 80037b4:	eb19 0309 	adds.w	r3, r9, r9
 80037b8:	eb4a 040a 	adc.w	r4, sl, sl
 80037bc:	4699      	mov	r9, r3
 80037be:	46a2      	mov	sl, r4
 80037c0:	eb19 090b 	adds.w	r9, r9, fp
 80037c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037c8:	f04f 0100 	mov.w	r1, #0
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037dc:	4689      	mov	r9, r1
 80037de:	4692      	mov	sl, r2
 80037e0:	eb1b 0509 	adds.w	r5, fp, r9
 80037e4:	eb4c 060a 	adc.w	r6, ip, sl
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	4619      	mov	r1, r3
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	f04f 0300 	mov.w	r3, #0
 80037f6:	f04f 0400 	mov.w	r4, #0
 80037fa:	0094      	lsls	r4, r2, #2
 80037fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003800:	008b      	lsls	r3, r1, #2
 8003802:	461a      	mov	r2, r3
 8003804:	4623      	mov	r3, r4
 8003806:	4628      	mov	r0, r5
 8003808:	4631      	mov	r1, r6
 800380a:	f7fc fce5 	bl	80001d8 <__aeabi_uldivmod>
 800380e:	4603      	mov	r3, r0
 8003810:	460c      	mov	r4, r1
 8003812:	461a      	mov	r2, r3
 8003814:	4b9a      	ldr	r3, [pc, #616]	; (8003a80 <UART_SetConfig+0x6f4>)
 8003816:	fba3 1302 	umull	r1, r3, r3, r2
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2164      	movs	r1, #100	; 0x64
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	3332      	adds	r3, #50	; 0x32
 8003828:	4a95      	ldr	r2, [pc, #596]	; (8003a80 <UART_SetConfig+0x6f4>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003834:	4498      	add	r8, r3
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	469b      	mov	fp, r3
 800383a:	f04f 0c00 	mov.w	ip, #0
 800383e:	46d9      	mov	r9, fp
 8003840:	46e2      	mov	sl, ip
 8003842:	eb19 0309 	adds.w	r3, r9, r9
 8003846:	eb4a 040a 	adc.w	r4, sl, sl
 800384a:	4699      	mov	r9, r3
 800384c:	46a2      	mov	sl, r4
 800384e:	eb19 090b 	adds.w	r9, r9, fp
 8003852:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003856:	f04f 0100 	mov.w	r1, #0
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003862:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003866:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800386a:	4689      	mov	r9, r1
 800386c:	4692      	mov	sl, r2
 800386e:	eb1b 0509 	adds.w	r5, fp, r9
 8003872:	eb4c 060a 	adc.w	r6, ip, sl
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4619      	mov	r1, r3
 800387c:	f04f 0200 	mov.w	r2, #0
 8003880:	f04f 0300 	mov.w	r3, #0
 8003884:	f04f 0400 	mov.w	r4, #0
 8003888:	0094      	lsls	r4, r2, #2
 800388a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800388e:	008b      	lsls	r3, r1, #2
 8003890:	461a      	mov	r2, r3
 8003892:	4623      	mov	r3, r4
 8003894:	4628      	mov	r0, r5
 8003896:	4631      	mov	r1, r6
 8003898:	f7fc fc9e 	bl	80001d8 <__aeabi_uldivmod>
 800389c:	4603      	mov	r3, r0
 800389e:	460c      	mov	r4, r1
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b77      	ldr	r3, [pc, #476]	; (8003a80 <UART_SetConfig+0x6f4>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	; 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a72      	ldr	r2, [pc, #456]	; (8003a80 <UART_SetConfig+0x6f4>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 020f 	and.w	r2, r3, #15
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4442      	add	r2, r8
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	e0d0      	b.n	8003a6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80038cc:	f7ff f952 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 80038d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	469a      	mov	sl, r3
 80038d6:	f04f 0b00 	mov.w	fp, #0
 80038da:	46d0      	mov	r8, sl
 80038dc:	46d9      	mov	r9, fp
 80038de:	eb18 0308 	adds.w	r3, r8, r8
 80038e2:	eb49 0409 	adc.w	r4, r9, r9
 80038e6:	4698      	mov	r8, r3
 80038e8:	46a1      	mov	r9, r4
 80038ea:	eb18 080a 	adds.w	r8, r8, sl
 80038ee:	eb49 090b 	adc.w	r9, r9, fp
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003902:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003906:	4688      	mov	r8, r1
 8003908:	4691      	mov	r9, r2
 800390a:	eb1a 0508 	adds.w	r5, sl, r8
 800390e:	eb4b 0609 	adc.w	r6, fp, r9
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	0094      	lsls	r4, r2, #2
 8003926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800392a:	008b      	lsls	r3, r1, #2
 800392c:	461a      	mov	r2, r3
 800392e:	4623      	mov	r3, r4
 8003930:	4628      	mov	r0, r5
 8003932:	4631      	mov	r1, r6
 8003934:	f7fc fc50 	bl	80001d8 <__aeabi_uldivmod>
 8003938:	4603      	mov	r3, r0
 800393a:	460c      	mov	r4, r1
 800393c:	461a      	mov	r2, r3
 800393e:	4b50      	ldr	r3, [pc, #320]	; (8003a80 <UART_SetConfig+0x6f4>)
 8003940:	fba3 2302 	umull	r2, r3, r3, r2
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	469b      	mov	fp, r3
 800394e:	f04f 0c00 	mov.w	ip, #0
 8003952:	46d9      	mov	r9, fp
 8003954:	46e2      	mov	sl, ip
 8003956:	eb19 0309 	adds.w	r3, r9, r9
 800395a:	eb4a 040a 	adc.w	r4, sl, sl
 800395e:	4699      	mov	r9, r3
 8003960:	46a2      	mov	sl, r4
 8003962:	eb19 090b 	adds.w	r9, r9, fp
 8003966:	eb4a 0a0c 	adc.w	sl, sl, ip
 800396a:	f04f 0100 	mov.w	r1, #0
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800397a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800397e:	4689      	mov	r9, r1
 8003980:	4692      	mov	sl, r2
 8003982:	eb1b 0509 	adds.w	r5, fp, r9
 8003986:	eb4c 060a 	adc.w	r6, ip, sl
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	4619      	mov	r1, r3
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	f04f 0300 	mov.w	r3, #0
 8003998:	f04f 0400 	mov.w	r4, #0
 800399c:	0094      	lsls	r4, r2, #2
 800399e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039a2:	008b      	lsls	r3, r1, #2
 80039a4:	461a      	mov	r2, r3
 80039a6:	4623      	mov	r3, r4
 80039a8:	4628      	mov	r0, r5
 80039aa:	4631      	mov	r1, r6
 80039ac:	f7fc fc14 	bl	80001d8 <__aeabi_uldivmod>
 80039b0:	4603      	mov	r3, r0
 80039b2:	460c      	mov	r4, r1
 80039b4:	461a      	mov	r2, r3
 80039b6:	4b32      	ldr	r3, [pc, #200]	; (8003a80 <UART_SetConfig+0x6f4>)
 80039b8:	fba3 1302 	umull	r1, r3, r3, r2
 80039bc:	095b      	lsrs	r3, r3, #5
 80039be:	2164      	movs	r1, #100	; 0x64
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	3332      	adds	r3, #50	; 0x32
 80039ca:	4a2d      	ldr	r2, [pc, #180]	; (8003a80 <UART_SetConfig+0x6f4>)
 80039cc:	fba2 2303 	umull	r2, r3, r2, r3
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039d6:	4498      	add	r8, r3
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	469b      	mov	fp, r3
 80039dc:	f04f 0c00 	mov.w	ip, #0
 80039e0:	46d9      	mov	r9, fp
 80039e2:	46e2      	mov	sl, ip
 80039e4:	eb19 0309 	adds.w	r3, r9, r9
 80039e8:	eb4a 040a 	adc.w	r4, sl, sl
 80039ec:	4699      	mov	r9, r3
 80039ee:	46a2      	mov	sl, r4
 80039f0:	eb19 090b 	adds.w	r9, r9, fp
 80039f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039f8:	f04f 0100 	mov.w	r1, #0
 80039fc:	f04f 0200 	mov.w	r2, #0
 8003a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a0c:	4689      	mov	r9, r1
 8003a0e:	4692      	mov	sl, r2
 8003a10:	eb1b 0509 	adds.w	r5, fp, r9
 8003a14:	eb4c 060a 	adc.w	r6, ip, sl
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	f04f 0400 	mov.w	r4, #0
 8003a2a:	0094      	lsls	r4, r2, #2
 8003a2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a30:	008b      	lsls	r3, r1, #2
 8003a32:	461a      	mov	r2, r3
 8003a34:	4623      	mov	r3, r4
 8003a36:	4628      	mov	r0, r5
 8003a38:	4631      	mov	r1, r6
 8003a3a:	f7fc fbcd 	bl	80001d8 <__aeabi_uldivmod>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b0e      	ldr	r3, [pc, #56]	; (8003a80 <UART_SetConfig+0x6f4>)
 8003a46:	fba3 1302 	umull	r1, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	2164      	movs	r1, #100	; 0x64
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	3332      	adds	r3, #50	; 0x32
 8003a58:	4a09      	ldr	r2, [pc, #36]	; (8003a80 <UART_SetConfig+0x6f4>)
 8003a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5e:	095b      	lsrs	r3, r3, #5
 8003a60:	f003 020f 	and.w	r2, r3, #15
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4442      	add	r2, r8
 8003a6a:	609a      	str	r2, [r3, #8]
}
 8003a6c:	e7ff      	b.n	8003a6e <UART_SetConfig+0x6e2>
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a78:	40011000 	.word	0x40011000
 8003a7c:	40011400 	.word	0x40011400
 8003a80:	51eb851f 	.word	0x51eb851f

08003a84 <__libc_init_array>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	4e0d      	ldr	r6, [pc, #52]	; (8003abc <__libc_init_array+0x38>)
 8003a88:	4c0d      	ldr	r4, [pc, #52]	; (8003ac0 <__libc_init_array+0x3c>)
 8003a8a:	1ba4      	subs	r4, r4, r6
 8003a8c:	10a4      	asrs	r4, r4, #2
 8003a8e:	2500      	movs	r5, #0
 8003a90:	42a5      	cmp	r5, r4
 8003a92:	d109      	bne.n	8003aa8 <__libc_init_array+0x24>
 8003a94:	4e0b      	ldr	r6, [pc, #44]	; (8003ac4 <__libc_init_array+0x40>)
 8003a96:	4c0c      	ldr	r4, [pc, #48]	; (8003ac8 <__libc_init_array+0x44>)
 8003a98:	f000 f820 	bl	8003adc <_init>
 8003a9c:	1ba4      	subs	r4, r4, r6
 8003a9e:	10a4      	asrs	r4, r4, #2
 8003aa0:	2500      	movs	r5, #0
 8003aa2:	42a5      	cmp	r5, r4
 8003aa4:	d105      	bne.n	8003ab2 <__libc_init_array+0x2e>
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
 8003aa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003aac:	4798      	blx	r3
 8003aae:	3501      	adds	r5, #1
 8003ab0:	e7ee      	b.n	8003a90 <__libc_init_array+0xc>
 8003ab2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ab6:	4798      	blx	r3
 8003ab8:	3501      	adds	r5, #1
 8003aba:	e7f2      	b.n	8003aa2 <__libc_init_array+0x1e>
 8003abc:	08003b1c 	.word	0x08003b1c
 8003ac0:	08003b1c 	.word	0x08003b1c
 8003ac4:	08003b1c 	.word	0x08003b1c
 8003ac8:	08003b20 	.word	0x08003b20

08003acc <memset>:
 8003acc:	4402      	add	r2, r0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d100      	bne.n	8003ad6 <memset+0xa>
 8003ad4:	4770      	bx	lr
 8003ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8003ada:	e7f9      	b.n	8003ad0 <memset+0x4>

08003adc <_init>:
 8003adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ade:	bf00      	nop
 8003ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ae2:	bc08      	pop	{r3}
 8003ae4:	469e      	mov	lr, r3
 8003ae6:	4770      	bx	lr

08003ae8 <_fini>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr
