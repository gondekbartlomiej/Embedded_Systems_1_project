
ES_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055a8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08005748  08005748  00015748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e8  080057e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f0  080057f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f4  080057f4  000157f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000070  08005868  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08005868  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d38c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d10  00000000  00000000  0002d42c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  0002f140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  0002ff10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169e9  00000000  00000000  00030bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009850  00000000  00000000  000475e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008eab0  00000000  00000000  00050e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000df8e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e98  00000000  00000000  000df95c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005730 	.word	0x08005730

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005730 	.word	0x08005730

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <disp_buffer_update>:
static void MX_SPI1_Init(void);
static void MX_TIM10_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void disp_buffer_update(const uint8_t com, const char digit){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	460a      	mov	r2, r1
 8000d76:	71fb      	strb	r3, [r7, #7]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	71bb      	strb	r3, [r7, #6]
  if(com >= 0 && com < 4){
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	2b03      	cmp	r3, #3
 8000d80:	f200 82b2 	bhi.w	80012e8 <disp_buffer_update+0x57c>
    switch (digit){
 8000d84:	79bb      	ldrb	r3, [r7, #6]
 8000d86:	3b2d      	subs	r3, #45	; 0x2d
 8000d88:	2b42      	cmp	r3, #66	; 0x42
 8000d8a:	f200 8283 	bhi.w	8001294 <disp_buffer_update+0x528>
 8000d8e:	a201      	add	r2, pc, #4	; (adr r2, 8000d94 <disp_buffer_update+0x28>)
 8000d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d94:	08001241 	.word	0x08001241
 8000d98:	08001295 	.word	0x08001295
 8000d9c:	08001295 	.word	0x08001295
 8000da0:	08000ea1 	.word	0x08000ea1
 8000da4:	08000ef5 	.word	0x08000ef5
 8000da8:	08000f49 	.word	0x08000f49
 8000dac:	08000f9d 	.word	0x08000f9d
 8000db0:	08000ff1 	.word	0x08000ff1
 8000db4:	08001045 	.word	0x08001045
 8000db8:	08001099 	.word	0x08001099
 8000dbc:	080010ed 	.word	0x080010ed
 8000dc0:	08001145 	.word	0x08001145
 8000dc4:	08001199 	.word	0x08001199
 8000dc8:	08001295 	.word	0x08001295
 8000dcc:	08001295 	.word	0x08001295
 8000dd0:	08001295 	.word	0x08001295
 8000dd4:	08001295 	.word	0x08001295
 8000dd8:	08001295 	.word	0x08001295
 8000ddc:	08001295 	.word	0x08001295
 8000de0:	08001295 	.word	0x08001295
 8000de4:	08001295 	.word	0x08001295
 8000de8:	08001295 	.word	0x08001295
 8000dec:	08001295 	.word	0x08001295
 8000df0:	08001295 	.word	0x08001295
 8000df4:	08001295 	.word	0x08001295
 8000df8:	08001295 	.word	0x08001295
 8000dfc:	08001295 	.word	0x08001295
 8000e00:	08001295 	.word	0x08001295
 8000e04:	08001295 	.word	0x08001295
 8000e08:	08001295 	.word	0x08001295
 8000e0c:	08001295 	.word	0x08001295
 8000e10:	08001295 	.word	0x08001295
 8000e14:	08001295 	.word	0x08001295
 8000e18:	08001295 	.word	0x08001295
 8000e1c:	08001295 	.word	0x08001295
 8000e20:	08001295 	.word	0x08001295
 8000e24:	08001295 	.word	0x08001295
 8000e28:	08001295 	.word	0x08001295
 8000e2c:	08001295 	.word	0x08001295
 8000e30:	08001295 	.word	0x08001295
 8000e34:	08001295 	.word	0x08001295
 8000e38:	08001295 	.word	0x08001295
 8000e3c:	08001295 	.word	0x08001295
 8000e40:	08001295 	.word	0x08001295
 8000e44:	08001295 	.word	0x08001295
 8000e48:	08001295 	.word	0x08001295
 8000e4c:	08001295 	.word	0x08001295
 8000e50:	08001295 	.word	0x08001295
 8000e54:	08001295 	.word	0x08001295
 8000e58:	08001295 	.word	0x08001295
 8000e5c:	08001295 	.word	0x08001295
 8000e60:	08001295 	.word	0x08001295
 8000e64:	08001295 	.word	0x08001295
 8000e68:	08001295 	.word	0x08001295
 8000e6c:	08001295 	.word	0x08001295
 8000e70:	08001295 	.word	0x08001295
 8000e74:	08001295 	.word	0x08001295
 8000e78:	08001295 	.word	0x08001295
 8000e7c:	08001295 	.word	0x08001295
 8000e80:	08001295 	.word	0x08001295
 8000e84:	08001295 	.word	0x08001295
 8000e88:	08001295 	.word	0x08001295
 8000e8c:	08001295 	.word	0x08001295
 8000e90:	08001295 	.word	0x08001295
 8000e94:	08001295 	.word	0x08001295
 8000e98:	08001295 	.word	0x08001295
 8000e9c:	080011ed 	.word	0x080011ed
    
    case '0':  //put 0 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4aa7      	ldr	r2, [pc, #668]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ea4:	2101      	movs	r1, #1
 8000ea6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4aa4      	ldr	r2, [pc, #656]	; (8001140 <disp_buffer_update+0x3d4>)
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4aa1      	ldr	r2, [pc, #644]	; (8001140 <disp_buffer_update+0x3d4>)
 8000eba:	00db      	lsls	r3, r3, #3
 8000ebc:	4413      	add	r3, r2
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	4a9e      	ldr	r2, [pc, #632]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4413      	add	r3, r2
 8000eca:	2201      	movs	r2, #1
 8000ecc:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4a9b      	ldr	r2, [pc, #620]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4413      	add	r3, r2
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4a98      	ldr	r2, [pc, #608]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	4413      	add	r3, r2
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	4a95      	ldr	r2, [pc, #596]	; (8001140 <disp_buffer_update+0x3d4>)
 8000eea:	00db      	lsls	r3, r3, #3
 8000eec:	4413      	add	r3, r2
 8000eee:	2200      	movs	r2, #0
 8000ef0:	719a      	strb	r2, [r3, #6]
      break;
 8000ef2:	e1fa      	b.n	80012ea <disp_buffer_update+0x57e>

    case '1':  //put 1 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	4a92      	ldr	r2, [pc, #584]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4a8f      	ldr	r2, [pc, #572]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f02:	00db      	lsls	r3, r3, #3
 8000f04:	4413      	add	r3, r2
 8000f06:	2201      	movs	r2, #1
 8000f08:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	4a8c      	ldr	r2, [pc, #560]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	4413      	add	r3, r2
 8000f12:	2201      	movs	r2, #1
 8000f14:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	4a89      	ldr	r2, [pc, #548]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4413      	add	r3, r2
 8000f1e:	2200      	movs	r2, #0
 8000f20:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	4a86      	ldr	r2, [pc, #536]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	4413      	add	r3, r2
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4a83      	ldr	r2, [pc, #524]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	4413      	add	r3, r2
 8000f36:	2200      	movs	r2, #0
 8000f38:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	4a80      	ldr	r2, [pc, #512]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f3e:	00db      	lsls	r3, r3, #3
 8000f40:	4413      	add	r3, r2
 8000f42:	2200      	movs	r2, #0
 8000f44:	719a      	strb	r2, [r3, #6]
      break;
 8000f46:	e1d0      	b.n	80012ea <disp_buffer_update+0x57e>

    case '2':  //put 2 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	4a7d      	ldr	r2, [pc, #500]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4a7a      	ldr	r2, [pc, #488]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4413      	add	r3, r2
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	4a77      	ldr	r2, [pc, #476]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f62:	00db      	lsls	r3, r3, #3
 8000f64:	4413      	add	r3, r2
 8000f66:	2200      	movs	r2, #0
 8000f68:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4a74      	ldr	r2, [pc, #464]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4413      	add	r3, r2
 8000f72:	2201      	movs	r2, #1
 8000f74:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a71      	ldr	r2, [pc, #452]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2201      	movs	r2, #1
 8000f80:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	4a6e      	ldr	r2, [pc, #440]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	4413      	add	r3, r2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4a6b      	ldr	r2, [pc, #428]	; (8001140 <disp_buffer_update+0x3d4>)
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	4413      	add	r3, r2
 8000f96:	2201      	movs	r2, #1
 8000f98:	719a      	strb	r2, [r3, #6]
      break;
 8000f9a:	e1a6      	b.n	80012ea <disp_buffer_update+0x57e>

    case '3':  //put 3 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4a68      	ldr	r2, [pc, #416]	; (8001140 <disp_buffer_update+0x3d4>)
 8000fa0:	2101      	movs	r1, #1
 8000fa2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	4a65      	ldr	r2, [pc, #404]	; (8001140 <disp_buffer_update+0x3d4>)
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	4413      	add	r3, r2
 8000fae:	2201      	movs	r2, #1
 8000fb0:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	4a62      	ldr	r2, [pc, #392]	; (8001140 <disp_buffer_update+0x3d4>)
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	2201      	movs	r2, #1
 8000fbc:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a5f      	ldr	r2, [pc, #380]	; (8001140 <disp_buffer_update+0x3d4>)
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	4413      	add	r3, r2
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <disp_buffer_update+0x3d4>)
 8000fce:	00db      	lsls	r3, r3, #3
 8000fd0:	4413      	add	r3, r2
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a59      	ldr	r2, [pc, #356]	; (8001140 <disp_buffer_update+0x3d4>)
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4413      	add	r3, r2
 8000fde:	2200      	movs	r2, #0
 8000fe0:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8000fe2:	79fb      	ldrb	r3, [r7, #7]
 8000fe4:	4a56      	ldr	r2, [pc, #344]	; (8001140 <disp_buffer_update+0x3d4>)
 8000fe6:	00db      	lsls	r3, r3, #3
 8000fe8:	4413      	add	r3, r2
 8000fea:	2201      	movs	r2, #1
 8000fec:	719a      	strb	r2, [r3, #6]
      break;
 8000fee:	e17c      	b.n	80012ea <disp_buffer_update+0x57e>

    case '4':  //put 4 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4a53      	ldr	r2, [pc, #332]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	4a50      	ldr	r2, [pc, #320]	; (8001140 <disp_buffer_update+0x3d4>)
 8000ffe:	00db      	lsls	r3, r3, #3
 8001000:	4413      	add	r3, r2
 8001002:	2201      	movs	r2, #1
 8001004:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <disp_buffer_update+0x3d4>)
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4413      	add	r3, r2
 800100e:	2201      	movs	r2, #1
 8001010:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	4a4a      	ldr	r2, [pc, #296]	; (8001140 <disp_buffer_update+0x3d4>)
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	2200      	movs	r2, #0
 800101c:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	4a47      	ldr	r2, [pc, #284]	; (8001140 <disp_buffer_update+0x3d4>)
 8001022:	00db      	lsls	r3, r3, #3
 8001024:	4413      	add	r3, r2
 8001026:	2200      	movs	r2, #0
 8001028:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	4a44      	ldr	r2, [pc, #272]	; (8001140 <disp_buffer_update+0x3d4>)
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	2201      	movs	r2, #1
 8001034:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4a41      	ldr	r2, [pc, #260]	; (8001140 <disp_buffer_update+0x3d4>)
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	2201      	movs	r2, #1
 8001040:	719a      	strb	r2, [r3, #6]
      break;
 8001042:	e152      	b.n	80012ea <disp_buffer_update+0x57e>
    
    case '5':  //put 5 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4a3e      	ldr	r2, [pc, #248]	; (8001140 <disp_buffer_update+0x3d4>)
 8001048:	2101      	movs	r1, #1
 800104a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	4a3b      	ldr	r2, [pc, #236]	; (8001140 <disp_buffer_update+0x3d4>)
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	2200      	movs	r2, #0
 8001058:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4a38      	ldr	r2, [pc, #224]	; (8001140 <disp_buffer_update+0x3d4>)
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	4413      	add	r3, r2
 8001062:	2201      	movs	r2, #1
 8001064:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	4a35      	ldr	r2, [pc, #212]	; (8001140 <disp_buffer_update+0x3d4>)
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	4413      	add	r3, r2
 800106e:	2201      	movs	r2, #1
 8001070:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	4a32      	ldr	r2, [pc, #200]	; (8001140 <disp_buffer_update+0x3d4>)
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	4413      	add	r3, r2
 800107a:	2200      	movs	r2, #0
 800107c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <disp_buffer_update+0x3d4>)
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	2201      	movs	r2, #1
 8001088:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	4a2c      	ldr	r2, [pc, #176]	; (8001140 <disp_buffer_update+0x3d4>)
 800108e:	00db      	lsls	r3, r3, #3
 8001090:	4413      	add	r3, r2
 8001092:	2201      	movs	r2, #1
 8001094:	719a      	strb	r2, [r3, #6]
      break;
 8001096:	e128      	b.n	80012ea <disp_buffer_update+0x57e>

    case '6':  //put 6 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	4a29      	ldr	r2, [pc, #164]	; (8001140 <disp_buffer_update+0x3d4>)
 800109c:	2101      	movs	r1, #1
 800109e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <disp_buffer_update+0x3d4>)
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	4413      	add	r3, r2
 80010aa:	2200      	movs	r2, #0
 80010ac:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	4a23      	ldr	r2, [pc, #140]	; (8001140 <disp_buffer_update+0x3d4>)
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	2201      	movs	r2, #1
 80010b8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <disp_buffer_update+0x3d4>)
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4413      	add	r3, r2
 80010c2:	2201      	movs	r2, #1
 80010c4:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	; (8001140 <disp_buffer_update+0x3d4>)
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	4413      	add	r3, r2
 80010ce:	2201      	movs	r2, #1
 80010d0:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 80010d2:	79fb      	ldrb	r3, [r7, #7]
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <disp_buffer_update+0x3d4>)
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	2201      	movs	r2, #1
 80010dc:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4a17      	ldr	r2, [pc, #92]	; (8001140 <disp_buffer_update+0x3d4>)
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	4413      	add	r3, r2
 80010e6:	2201      	movs	r2, #1
 80010e8:	719a      	strb	r2, [r3, #6]
      break;
 80010ea:	e0fe      	b.n	80012ea <disp_buffer_update+0x57e>

    case '7':  //put 7 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <disp_buffer_update+0x3d4>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <disp_buffer_update+0x3d4>)
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	4413      	add	r3, r2
 80010fe:	2201      	movs	r2, #1
 8001100:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <disp_buffer_update+0x3d4>)
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4413      	add	r3, r2
 800110a:	2201      	movs	r2, #1
 800110c:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <disp_buffer_update+0x3d4>)
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4413      	add	r3, r2
 8001116:	2200      	movs	r2, #0
 8001118:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <disp_buffer_update+0x3d4>)
 800111e:	00db      	lsls	r3, r3, #3
 8001120:	4413      	add	r3, r2
 8001122:	2200      	movs	r2, #0
 8001124:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4a05      	ldr	r2, [pc, #20]	; (8001140 <disp_buffer_update+0x3d4>)
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	2200      	movs	r2, #0
 8001130:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4a02      	ldr	r2, [pc, #8]	; (8001140 <disp_buffer_update+0x3d4>)
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	4413      	add	r3, r2
 800113a:	2200      	movs	r2, #0
 800113c:	719a      	strb	r2, [r3, #6]
      break;
 800113e:	e0d4      	b.n	80012ea <disp_buffer_update+0x57e>
 8001140:	200000e8 	.word	0x200000e8

    case '8':  //put 8 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4a6c      	ldr	r2, [pc, #432]	; (80012f8 <disp_buffer_update+0x58c>)
 8001148:	2101      	movs	r1, #1
 800114a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4a69      	ldr	r2, [pc, #420]	; (80012f8 <disp_buffer_update+0x58c>)
 8001152:	00db      	lsls	r3, r3, #3
 8001154:	4413      	add	r3, r2
 8001156:	2201      	movs	r2, #1
 8001158:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4a66      	ldr	r2, [pc, #408]	; (80012f8 <disp_buffer_update+0x58c>)
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	4413      	add	r3, r2
 8001162:	2201      	movs	r2, #1
 8001164:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	4a63      	ldr	r2, [pc, #396]	; (80012f8 <disp_buffer_update+0x58c>)
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	2201      	movs	r2, #1
 8001170:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_SET;
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4a60      	ldr	r2, [pc, #384]	; (80012f8 <disp_buffer_update+0x58c>)
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4413      	add	r3, r2
 800117a:	2201      	movs	r2, #1
 800117c:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	4a5d      	ldr	r2, [pc, #372]	; (80012f8 <disp_buffer_update+0x58c>)
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	4413      	add	r3, r2
 8001186:	2201      	movs	r2, #1
 8001188:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	4a5a      	ldr	r2, [pc, #360]	; (80012f8 <disp_buffer_update+0x58c>)
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	2201      	movs	r2, #1
 8001194:	719a      	strb	r2, [r3, #6]
      break;
 8001196:	e0a8      	b.n	80012ea <disp_buffer_update+0x57e>

    case '9':  //put 9 on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_SET;
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	4a57      	ldr	r2, [pc, #348]	; (80012f8 <disp_buffer_update+0x58c>)
 800119c:	2101      	movs	r1, #1
 800119e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_SET;
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a54      	ldr	r2, [pc, #336]	; (80012f8 <disp_buffer_update+0x58c>)
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	2201      	movs	r2, #1
 80011ac:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_SET;
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4a51      	ldr	r2, [pc, #324]	; (80012f8 <disp_buffer_update+0x58c>)
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4413      	add	r3, r2
 80011b6:	2201      	movs	r2, #1
 80011b8:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_SET;
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a4e      	ldr	r2, [pc, #312]	; (80012f8 <disp_buffer_update+0x58c>)
 80011be:	00db      	lsls	r3, r3, #3
 80011c0:	4413      	add	r3, r2
 80011c2:	2201      	movs	r2, #1
 80011c4:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4a4b      	ldr	r2, [pc, #300]	; (80012f8 <disp_buffer_update+0x58c>)
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	2200      	movs	r2, #0
 80011d0:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_SET;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	4a48      	ldr	r2, [pc, #288]	; (80012f8 <disp_buffer_update+0x58c>)
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	4413      	add	r3, r2
 80011da:	2201      	movs	r2, #1
 80011dc:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <disp_buffer_update+0x58c>)
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	2201      	movs	r2, #1
 80011e8:	719a      	strb	r2, [r3, #6]
      break;
 80011ea:	e07e      	b.n	80012ea <disp_buffer_update+0x57e>

    case 'o':  //put o on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a42      	ldr	r2, [pc, #264]	; (80012f8 <disp_buffer_update+0x58c>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	  disp_state[com][1] = GPIO_PIN_RESET;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <disp_buffer_update+0x58c>)
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	4413      	add	r3, r2
 80011fe:	2200      	movs	r2, #0
 8001200:	705a      	strb	r2, [r3, #1]
	  disp_state[com][2] = GPIO_PIN_SET;
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	4a3c      	ldr	r2, [pc, #240]	; (80012f8 <disp_buffer_update+0x58c>)
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	2201      	movs	r2, #1
 800120c:	709a      	strb	r2, [r3, #2]
	  disp_state[com][3] = GPIO_PIN_SET;
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4a39      	ldr	r2, [pc, #228]	; (80012f8 <disp_buffer_update+0x58c>)
 8001212:	00db      	lsls	r3, r3, #3
 8001214:	4413      	add	r3, r2
 8001216:	2201      	movs	r2, #1
 8001218:	70da      	strb	r2, [r3, #3]
	  disp_state[com][4] = GPIO_PIN_SET;
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	4a36      	ldr	r2, [pc, #216]	; (80012f8 <disp_buffer_update+0x58c>)
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4413      	add	r3, r2
 8001222:	2201      	movs	r2, #1
 8001224:	711a      	strb	r2, [r3, #4]
	  disp_state[com][5] = GPIO_PIN_RESET;
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	4a33      	ldr	r2, [pc, #204]	; (80012f8 <disp_buffer_update+0x58c>)
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	4413      	add	r3, r2
 800122e:	2200      	movs	r2, #0
 8001230:	715a      	strb	r2, [r3, #5]
	  disp_state[com][6] = GPIO_PIN_SET;
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a30      	ldr	r2, [pc, #192]	; (80012f8 <disp_buffer_update+0x58c>)
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	2201      	movs	r2, #1
 800123c:	719a      	strb	r2, [r3, #6]
	  break;
 800123e:	e054      	b.n	80012ea <disp_buffer_update+0x57e>
    
    case '-':  //put '-' on <com> port of display buffer
      disp_state[com][0] = GPIO_PIN_RESET;
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <disp_buffer_update+0x58c>)
 8001244:	2100      	movs	r1, #0
 8001246:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <disp_buffer_update+0x58c>)
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4a27      	ldr	r2, [pc, #156]	; (80012f8 <disp_buffer_update+0x58c>)
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	2200      	movs	r2, #0
 8001260:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <disp_buffer_update+0x58c>)
 8001266:	00db      	lsls	r3, r3, #3
 8001268:	4413      	add	r3, r2
 800126a:	2200      	movs	r2, #0
 800126c:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <disp_buffer_update+0x58c>)
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	2200      	movs	r2, #0
 8001278:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a1e      	ldr	r2, [pc, #120]	; (80012f8 <disp_buffer_update+0x58c>)
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	2200      	movs	r2, #0
 8001284:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_SET;
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	4a1b      	ldr	r2, [pc, #108]	; (80012f8 <disp_buffer_update+0x58c>)
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	4413      	add	r3, r2
 800128e:	2201      	movs	r2, #1
 8001290:	719a      	strb	r2, [r3, #6]
      break;
 8001292:	e02a      	b.n	80012ea <disp_buffer_update+0x57e>
    

    default:
      disp_state[com][0] = GPIO_PIN_RESET;
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <disp_buffer_update+0x58c>)
 8001298:	2100      	movs	r1, #0
 800129a:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
      disp_state[com][1] = GPIO_PIN_RESET;
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <disp_buffer_update+0x58c>)
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	4413      	add	r3, r2
 80012a6:	2200      	movs	r2, #0
 80012a8:	705a      	strb	r2, [r3, #1]
      disp_state[com][2] = GPIO_PIN_RESET;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	4a12      	ldr	r2, [pc, #72]	; (80012f8 <disp_buffer_update+0x58c>)
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4413      	add	r3, r2
 80012b2:	2200      	movs	r2, #0
 80012b4:	709a      	strb	r2, [r3, #2]
      disp_state[com][3] = GPIO_PIN_RESET;
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4a0f      	ldr	r2, [pc, #60]	; (80012f8 <disp_buffer_update+0x58c>)
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	70da      	strb	r2, [r3, #3]
      disp_state[com][4] = GPIO_PIN_RESET;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4a0c      	ldr	r2, [pc, #48]	; (80012f8 <disp_buffer_update+0x58c>)
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	4413      	add	r3, r2
 80012ca:	2200      	movs	r2, #0
 80012cc:	711a      	strb	r2, [r3, #4]
      disp_state[com][5] = GPIO_PIN_RESET;
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <disp_buffer_update+0x58c>)
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	4413      	add	r3, r2
 80012d6:	2200      	movs	r2, #0
 80012d8:	715a      	strb	r2, [r3, #5]
      disp_state[com][6] = GPIO_PIN_RESET;
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	4a06      	ldr	r2, [pc, #24]	; (80012f8 <disp_buffer_update+0x58c>)
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4413      	add	r3, r2
 80012e2:	2200      	movs	r2, #0
 80012e4:	719a      	strb	r2, [r3, #6]
      break;
 80012e6:	e000      	b.n	80012ea <disp_buffer_update+0x57e>
    }
  }
 80012e8:	bf00      	nop
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	200000e8 	.word	0x200000e8

080012fc <put_dot>:

void put_dot(uint8_t place){
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
	switch(place){
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d83f      	bhi.n	800138c <put_dot+0x90>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <put_dot+0x18>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001325 	.word	0x08001325
 8001318:	0800133f 	.word	0x0800133f
 800131c:	08001359 	.word	0x08001359
 8001320:	08001373 	.word	0x08001373
	case 0:
		disp_state[0][7] = GPIO_PIN_SET;
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <put_dot+0xb8>)
 8001326:	2201      	movs	r2, #1
 8001328:	71da      	strb	r2, [r3, #7]
		disp_state[1][7] = GPIO_PIN_RESET;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <put_dot+0xb8>)
 800132c:	2200      	movs	r2, #0
 800132e:	73da      	strb	r2, [r3, #15]
		disp_state[2][7] = GPIO_PIN_RESET;
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <put_dot+0xb8>)
 8001332:	2200      	movs	r2, #0
 8001334:	75da      	strb	r2, [r3, #23]
		disp_state[3][7] = GPIO_PIN_RESET;
 8001336:	4b1f      	ldr	r3, [pc, #124]	; (80013b4 <put_dot+0xb8>)
 8001338:	2200      	movs	r2, #0
 800133a:	77da      	strb	r2, [r3, #31]
		break;
 800133c:	e033      	b.n	80013a6 <put_dot+0xaa>

	case 1:
		disp_state[0][7] = GPIO_PIN_RESET;
 800133e:	4b1d      	ldr	r3, [pc, #116]	; (80013b4 <put_dot+0xb8>)
 8001340:	2200      	movs	r2, #0
 8001342:	71da      	strb	r2, [r3, #7]
		disp_state[1][7] = GPIO_PIN_SET;
 8001344:	4b1b      	ldr	r3, [pc, #108]	; (80013b4 <put_dot+0xb8>)
 8001346:	2201      	movs	r2, #1
 8001348:	73da      	strb	r2, [r3, #15]
		disp_state[2][7] = GPIO_PIN_RESET;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <put_dot+0xb8>)
 800134c:	2200      	movs	r2, #0
 800134e:	75da      	strb	r2, [r3, #23]
		disp_state[3][7] = GPIO_PIN_RESET;
 8001350:	4b18      	ldr	r3, [pc, #96]	; (80013b4 <put_dot+0xb8>)
 8001352:	2200      	movs	r2, #0
 8001354:	77da      	strb	r2, [r3, #31]
		break;
 8001356:	e026      	b.n	80013a6 <put_dot+0xaa>

	case 2:
		disp_state[0][7] = GPIO_PIN_RESET;
 8001358:	4b16      	ldr	r3, [pc, #88]	; (80013b4 <put_dot+0xb8>)
 800135a:	2200      	movs	r2, #0
 800135c:	71da      	strb	r2, [r3, #7]
		disp_state[1][7] = GPIO_PIN_RESET;
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <put_dot+0xb8>)
 8001360:	2200      	movs	r2, #0
 8001362:	73da      	strb	r2, [r3, #15]
		disp_state[2][7] = GPIO_PIN_SET;
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <put_dot+0xb8>)
 8001366:	2201      	movs	r2, #1
 8001368:	75da      	strb	r2, [r3, #23]
		disp_state[3][7] = GPIO_PIN_RESET;
 800136a:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <put_dot+0xb8>)
 800136c:	2200      	movs	r2, #0
 800136e:	77da      	strb	r2, [r3, #31]
		break;
 8001370:	e019      	b.n	80013a6 <put_dot+0xaa>

	case 3:
		disp_state[0][7] = GPIO_PIN_RESET;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <put_dot+0xb8>)
 8001374:	2200      	movs	r2, #0
 8001376:	71da      	strb	r2, [r3, #7]
		disp_state[1][7] = GPIO_PIN_RESET;
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <put_dot+0xb8>)
 800137a:	2200      	movs	r2, #0
 800137c:	73da      	strb	r2, [r3, #15]
		disp_state[2][7] = GPIO_PIN_RESET;
 800137e:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <put_dot+0xb8>)
 8001380:	2200      	movs	r2, #0
 8001382:	75da      	strb	r2, [r3, #23]
		disp_state[3][7] = GPIO_PIN_SET;
 8001384:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <put_dot+0xb8>)
 8001386:	2201      	movs	r2, #1
 8001388:	77da      	strb	r2, [r3, #31]
		break;
 800138a:	e00c      	b.n	80013a6 <put_dot+0xaa>

	default:
		disp_state[0][7] = GPIO_PIN_RESET;
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <put_dot+0xb8>)
 800138e:	2200      	movs	r2, #0
 8001390:	71da      	strb	r2, [r3, #7]
		disp_state[1][7] = GPIO_PIN_RESET;
 8001392:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <put_dot+0xb8>)
 8001394:	2200      	movs	r2, #0
 8001396:	73da      	strb	r2, [r3, #15]
		disp_state[2][7] = GPIO_PIN_RESET;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <put_dot+0xb8>)
 800139a:	2200      	movs	r2, #0
 800139c:	75da      	strb	r2, [r3, #23]
		disp_state[3][7] = GPIO_PIN_RESET;
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <put_dot+0xb8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	77da      	strb	r2, [r3, #31]
		break;
 80013a4:	bf00      	nop
	}
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200000e8 	.word	0x200000e8

080013b8 <switch_disp_com>:

void switch_disp_com(){
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	static uint8_t active_com = 0;

	++active_com;
 80013bc:	4b79      	ldr	r3, [pc, #484]	; (80015a4 <switch_disp_com+0x1ec>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	3301      	adds	r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	4b77      	ldr	r3, [pc, #476]	; (80015a4 <switch_disp_com+0x1ec>)
 80013c6:	701a      	strb	r2, [r3, #0]
	if(active_com > 3) active_com = 0;
 80013c8:	4b76      	ldr	r3, [pc, #472]	; (80015a4 <switch_disp_com+0x1ec>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b03      	cmp	r3, #3
 80013ce:	d902      	bls.n	80013d6 <switch_disp_com+0x1e>
 80013d0:	4b74      	ldr	r3, [pc, #464]	; (80015a4 <switch_disp_com+0x1ec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	701a      	strb	r2, [r3, #0]

	switch(active_com){
 80013d6:	4b73      	ldr	r3, [pc, #460]	; (80015a4 <switch_disp_com+0x1ec>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d86e      	bhi.n	80014bc <switch_disp_com+0x104>
 80013de:	a201      	add	r2, pc, #4	; (adr r2, 80013e4 <switch_disp_com+0x2c>)
 80013e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013e4:	080013f5 	.word	0x080013f5
 80013e8:	08001427 	.word	0x08001427
 80013ec:	08001459 	.word	0x08001459
 80013f0:	0800148b 	.word	0x0800148b
	case 0:
		HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013fa:	486b      	ldr	r0, [pc, #428]	; (80015a8 <switch_disp_com+0x1f0>)
 80013fc:	f001 fd56 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001406:	4868      	ldr	r0, [pc, #416]	; (80015a8 <switch_disp_com+0x1f0>)
 8001408:	f001 fd50 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	4865      	ldr	r0, [pc, #404]	; (80015a8 <switch_disp_com+0x1f0>)
 8001414:	f001 fd4a 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 8001418:	2201      	movs	r2, #1
 800141a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800141e:	4862      	ldr	r0, [pc, #392]	; (80015a8 <switch_disp_com+0x1f0>)
 8001420:	f001 fd44 	bl	8002eac <HAL_GPIO_WritePin>
		break;
 8001424:	e063      	b.n	80014ee <switch_disp_com+0x136>

	case 1:
		HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 8001426:	2201      	movs	r2, #1
 8001428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800142c:	485e      	ldr	r0, [pc, #376]	; (80015a8 <switch_disp_com+0x1f0>)
 800142e:	f001 fd3d 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001438:	485b      	ldr	r0, [pc, #364]	; (80015a8 <switch_disp_com+0x1f0>)
 800143a:	f001 fd37 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001444:	4858      	ldr	r0, [pc, #352]	; (80015a8 <switch_disp_com+0x1f0>)
 8001446:	f001 fd31 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001450:	4855      	ldr	r0, [pc, #340]	; (80015a8 <switch_disp_com+0x1f0>)
 8001452:	f001 fd2b 	bl	8002eac <HAL_GPIO_WritePin>
		break;
 8001456:	e04a      	b.n	80014ee <switch_disp_com+0x136>

	case 2:
		HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800145e:	4852      	ldr	r0, [pc, #328]	; (80015a8 <switch_disp_com+0x1f0>)
 8001460:	f001 fd24 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8001464:	2201      	movs	r2, #1
 8001466:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800146a:	484f      	ldr	r0, [pc, #316]	; (80015a8 <switch_disp_com+0x1f0>)
 800146c:	f001 fd1e 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001476:	484c      	ldr	r0, [pc, #304]	; (80015a8 <switch_disp_com+0x1f0>)
 8001478:	f001 fd18 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_SET);
 800147c:	2201      	movs	r2, #1
 800147e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001482:	4849      	ldr	r0, [pc, #292]	; (80015a8 <switch_disp_com+0x1f0>)
 8001484:	f001 fd12 	bl	8002eac <HAL_GPIO_WritePin>
		break;
 8001488:	e031      	b.n	80014ee <switch_disp_com+0x136>

	case 3:
		HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_SET);
 800148a:	2201      	movs	r2, #1
 800148c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001490:	4845      	ldr	r0, [pc, #276]	; (80015a8 <switch_disp_com+0x1f0>)
 8001492:	f001 fd0b 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800149c:	4842      	ldr	r0, [pc, #264]	; (80015a8 <switch_disp_com+0x1f0>)
 800149e:	f001 fd05 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014a8:	483f      	ldr	r0, [pc, #252]	; (80015a8 <switch_disp_com+0x1f0>)
 80014aa:	f001 fcff 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014b4:	483c      	ldr	r0, [pc, #240]	; (80015a8 <switch_disp_com+0x1f0>)
 80014b6:	f001 fcf9 	bl	8002eac <HAL_GPIO_WritePin>
		break;
 80014ba:	e018      	b.n	80014ee <switch_disp_com+0x136>

	default:
		HAL_GPIO_WritePin(disp_COM1_GPIO_Port, disp_COM1_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014c2:	4839      	ldr	r0, [pc, #228]	; (80015a8 <switch_disp_com+0x1f0>)
 80014c4:	f001 fcf2 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM2_GPIO_Port, disp_COM2_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ce:	4836      	ldr	r0, [pc, #216]	; (80015a8 <switch_disp_com+0x1f0>)
 80014d0:	f001 fcec 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM3_GPIO_Port, disp_COM3_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014da:	4833      	ldr	r0, [pc, #204]	; (80015a8 <switch_disp_com+0x1f0>)
 80014dc:	f001 fce6 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(disp_COM4_GPIO_Port, disp_COM4_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014e6:	4830      	ldr	r0, [pc, #192]	; (80015a8 <switch_disp_com+0x1f0>)
 80014e8:	f001 fce0 	bl	8002eac <HAL_GPIO_WritePin>
		break;
 80014ec:	bf00      	nop

	}
	HAL_GPIO_WritePin(disp_A_GPIO_Port, disp_A_Pin, disp_state[active_com][0]);
 80014ee:	4b2d      	ldr	r3, [pc, #180]	; (80015a4 <switch_disp_com+0x1ec>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b2d      	ldr	r3, [pc, #180]	; (80015ac <switch_disp_com+0x1f4>)
 80014f6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 80014fa:	461a      	mov	r2, r3
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	482a      	ldr	r0, [pc, #168]	; (80015a8 <switch_disp_com+0x1f0>)
 8001500:	f001 fcd4 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_B_GPIO_Port, disp_B_Pin, disp_state[active_com][1]);
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <switch_disp_com+0x1ec>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <switch_disp_com+0x1f4>)
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	785b      	ldrb	r3, [r3, #1]
 8001510:	461a      	mov	r2, r3
 8001512:	2110      	movs	r1, #16
 8001514:	4824      	ldr	r0, [pc, #144]	; (80015a8 <switch_disp_com+0x1f0>)
 8001516:	f001 fcc9 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_C_GPIO_Port, disp_C_Pin, disp_state[active_com][2]);
 800151a:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <switch_disp_com+0x1ec>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <switch_disp_com+0x1f4>)
 8001520:	00db      	lsls	r3, r3, #3
 8001522:	4413      	add	r3, r2
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	461a      	mov	r2, r3
 8001528:	2108      	movs	r1, #8
 800152a:	481f      	ldr	r0, [pc, #124]	; (80015a8 <switch_disp_com+0x1f0>)
 800152c:	f001 fcbe 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_D_GPIO_Port, disp_D_Pin, disp_state[active_com][3]);
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <switch_disp_com+0x1ec>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <switch_disp_com+0x1f4>)
 8001536:	00db      	lsls	r3, r3, #3
 8001538:	4413      	add	r3, r2
 800153a:	78db      	ldrb	r3, [r3, #3]
 800153c:	461a      	mov	r2, r3
 800153e:	2102      	movs	r1, #2
 8001540:	4819      	ldr	r0, [pc, #100]	; (80015a8 <switch_disp_com+0x1f0>)
 8001542:	f001 fcb3 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_E_GPIO_Port, disp_E_Pin, disp_state[active_com][4]);
 8001546:	4b17      	ldr	r3, [pc, #92]	; (80015a4 <switch_disp_com+0x1ec>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	4a18      	ldr	r2, [pc, #96]	; (80015ac <switch_disp_com+0x1f4>)
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4413      	add	r3, r2
 8001550:	791b      	ldrb	r3, [r3, #4]
 8001552:	461a      	mov	r2, r3
 8001554:	2104      	movs	r1, #4
 8001556:	4814      	ldr	r0, [pc, #80]	; (80015a8 <switch_disp_com+0x1f0>)
 8001558:	f001 fca8 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_F_GPIO_Port, disp_F_Pin, disp_state[active_com][5]);
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <switch_disp_com+0x1ec>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <switch_disp_com+0x1f4>)
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	795b      	ldrb	r3, [r3, #5]
 8001568:	461a      	mov	r2, r3
 800156a:	2120      	movs	r1, #32
 800156c:	480e      	ldr	r0, [pc, #56]	; (80015a8 <switch_disp_com+0x1f0>)
 800156e:	f001 fc9d 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_G_GPIO_Port, disp_G_Pin, disp_state[active_com][6]);
 8001572:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <switch_disp_com+0x1ec>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <switch_disp_com+0x1f4>)
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4413      	add	r3, r2
 800157c:	799b      	ldrb	r3, [r3, #6]
 800157e:	461a      	mov	r2, r3
 8001580:	2101      	movs	r1, #1
 8001582:	4809      	ldr	r0, [pc, #36]	; (80015a8 <switch_disp_com+0x1f0>)
 8001584:	f001 fc92 	bl	8002eac <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(disp_DP_GPIO_Port, disp_DP_Pin, disp_state[active_com][7]);
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <switch_disp_com+0x1ec>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	4a07      	ldr	r2, [pc, #28]	; (80015ac <switch_disp_com+0x1f4>)
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	4413      	add	r3, r2
 8001592:	79db      	ldrb	r3, [r3, #7]
 8001594:	461a      	mov	r2, r3
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <switch_disp_com+0x1f0>)
 800159a:	f001 fc87 	bl	8002eac <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2000009b 	.word	0x2000009b
 80015a8:	40020800 	.word	0x40020800
 80015ac:	200000e8 	.word	0x200000e8

080015b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
	if(htim->Instance==TIM10){
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a90      	ldr	r2, [pc, #576]	; (8001804 <HAL_TIM_PeriodElapsedCallback+0x254>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	f040 8119 	bne.w	80017fa <HAL_TIM_PeriodElapsedCallback+0x24a>

		switch_disp_com();
 80015c8:	f7ff fef6 	bl	80013b8 <switch_disp_com>

		x_reg[index] = rx_buffer[0];
 80015cc:	4b8e      	ldr	r3, [pc, #568]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b8d      	ldr	r3, [pc, #564]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b259      	sxtb	r1, r3
 80015da:	4b8d      	ldr	r3, [pc, #564]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80015dc:	5499      	strb	r1, [r3, r2]
		y_reg[index] = rx_buffer[2];
 80015de:	4b8a      	ldr	r3, [pc, #552]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4b89      	ldr	r3, [pc, #548]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	b259      	sxtb	r1, r3
 80015ec:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80015ee:	5499      	strb	r1, [r3, r2]
		z_reg[index] = rx_buffer[4];
 80015f0:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b84      	ldr	r3, [pc, #528]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	b259      	sxtb	r1, r3
 80015fe:	4b86      	ldr	r3, [pc, #536]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001600:	5499      	strb	r1, [r3, r2]

		if(++index > FilterN-1) index = 0;
 8001602:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	3301      	adds	r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	4a7e      	ldr	r2, [pc, #504]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800160e:	4619      	mov	r1, r3
 8001610:	7011      	strb	r1, [r2, #0]
 8001612:	2b31      	cmp	r3, #49	; 0x31
 8001614:	d902      	bls.n	800161c <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001616:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]

		x_sum=0;
 800161c:	4b7f      	ldr	r3, [pc, #508]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800161e:	2200      	movs	r2, #0
 8001620:	801a      	strh	r2, [r3, #0]
		y_sum=0;
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
		z_sum=0;
 8001628:	4b7e      	ldr	r3, [pc, #504]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800162a:	2200      	movs	r2, #0
 800162c:	801a      	strh	r2, [r3, #0]
		for(i=0; i<FilterN; i++){
 800162e:	2300      	movs	r3, #0
 8001630:	73fb      	strb	r3, [r7, #15]
 8001632:	e02c      	b.n	800168e <HAL_TIM_PeriodElapsedCallback+0xde>
			x_sum += x_reg[i];
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	4a76      	ldr	r2, [pc, #472]	; (8001810 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001638:	5cd3      	ldrb	r3, [r2, r3]
 800163a:	b25b      	sxtb	r3, r3
 800163c:	b29a      	uxth	r2, r3
 800163e:	4b77      	ldr	r3, [pc, #476]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	b21b      	sxth	r3, r3
 8001644:	b29b      	uxth	r3, r3
 8001646:	4413      	add	r3, r2
 8001648:	b29b      	uxth	r3, r3
 800164a:	b21a      	sxth	r2, r3
 800164c:	4b73      	ldr	r3, [pc, #460]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800164e:	801a      	strh	r2, [r3, #0]
			y_sum += y_reg[i];
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	4a70      	ldr	r2, [pc, #448]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	b25b      	sxtb	r3, r3
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800165c:	881b      	ldrh	r3, [r3, #0]
 800165e:	b21b      	sxth	r3, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	b29b      	uxth	r3, r3
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800166a:	801a      	strh	r2, [r3, #0]
			z_sum += z_reg[i];
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	4a6a      	ldr	r2, [pc, #424]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	b25b      	sxtb	r3, r3
 8001674:	b29a      	uxth	r2, r3
 8001676:	4b6b      	ldr	r3, [pc, #428]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001678:	881b      	ldrh	r3, [r3, #0]
 800167a:	b21b      	sxth	r3, r3
 800167c:	b29b      	uxth	r3, r3
 800167e:	4413      	add	r3, r2
 8001680:	b29b      	uxth	r3, r3
 8001682:	b21a      	sxth	r2, r3
 8001684:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001686:	801a      	strh	r2, [r3, #0]
		for(i=0; i<FilterN; i++){
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	3301      	adds	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
 800168e:	7bfb      	ldrb	r3, [r7, #15]
 8001690:	2b31      	cmp	r3, #49	; 0x31
 8001692:	d9cf      	bls.n	8001634 <HAL_TIM_PeriodElapsedCallback+0x84>




		//X - axis
		gyro_read[0] = ((2*x_sum/FilterN)/1.2);
 8001694:	4b61      	ldr	r3, [pc, #388]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	b21b      	sxth	r3, r3
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4a62      	ldr	r2, [pc, #392]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800169e:	fb82 1203 	smull	r1, r2, r2, r3
 80016a2:	1112      	asrs	r2, r2, #4
 80016a4:	17db      	asrs	r3, r3, #31
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff3b 	bl	8000524 <__aeabi_i2d>
 80016ae:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80016b4:	f7ff f8ca 	bl	800084c <__aeabi_ddiv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	460c      	mov	r4, r1
 80016bc:	4618      	mov	r0, r3
 80016be:	4621      	mov	r1, r4
 80016c0:	f7ff f9ac 	bl	8000a1c <__aeabi_d2iz>
 80016c4:	4602      	mov	r2, r0
 80016c6:	4b5a      	ldr	r3, [pc, #360]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016c8:	601a      	str	r2, [r3, #0]

		//Y - axis
		gyro_read[1] = ((2*y_sum/FilterN)/1.2);
 80016ca:	4b55      	ldr	r3, [pc, #340]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	4a55      	ldr	r2, [pc, #340]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80016d4:	fb82 1203 	smull	r1, r2, r2, r3
 80016d8:	1112      	asrs	r2, r2, #4
 80016da:	17db      	asrs	r3, r3, #31
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe ff20 	bl	8000524 <__aeabi_i2d>
 80016e4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80016ea:	f7ff f8af 	bl	800084c <__aeabi_ddiv>
 80016ee:	4603      	mov	r3, r0
 80016f0:	460c      	mov	r4, r1
 80016f2:	4618      	mov	r0, r3
 80016f4:	4621      	mov	r1, r4
 80016f6:	f7ff f991 	bl	8000a1c <__aeabi_d2iz>
 80016fa:	4602      	mov	r2, r0
 80016fc:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80016fe:	605a      	str	r2, [r3, #4]

		//Z - axis
		gyro_read[2] = ((2*z_sum/FilterN)/1.2);
 8001700:	4b48      	ldr	r3, [pc, #288]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001702:	881b      	ldrh	r3, [r3, #0]
 8001704:	b21b      	sxth	r3, r3
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4a47      	ldr	r2, [pc, #284]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800170a:	fb82 1203 	smull	r1, r2, r2, r3
 800170e:	1112      	asrs	r2, r2, #4
 8001710:	17db      	asrs	r3, r3, #31
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff05 	bl	8000524 <__aeabi_i2d>
 800171a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800171e:	4b43      	ldr	r3, [pc, #268]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001720:	f7ff f894 	bl	800084c <__aeabi_ddiv>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	4618      	mov	r0, r3
 800172a:	4621      	mov	r1, r4
 800172c:	f7ff f976 	bl	8000a1c <__aeabi_d2iz>
 8001730:	4602      	mov	r2, r0
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001734:	609a      	str	r2, [r3, #8]

		if(cnt){
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d010      	beq.n	8001760 <HAL_TIM_PeriodElapsedCallback+0x1b0>
			sprintf(display, "o5 %d", active_axis);
 800173e:	4b3e      	ldr	r3, [pc, #248]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	493d      	ldr	r1, [pc, #244]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001748:	483d      	ldr	r0, [pc, #244]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800174a:	f003 fbeb 	bl	8004f24 <siprintf>
			put_dot((uint8_t)5);
 800174e:	2005      	movs	r0, #5
 8001750:	f7ff fdd4 	bl	80012fc <put_dot>
			--cnt;
 8001754:	4b37      	ldr	r3, [pc, #220]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3b01      	subs	r3, #1
 800175a:	4a36      	ldr	r2, [pc, #216]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e024      	b.n	80017aa <HAL_TIM_PeriodElapsedCallback+0x1fa>
		}
		else{
			if(gyro_read[active_axis] < 0)
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	b2db      	uxtb	r3, r3
 8001766:	461a      	mov	r2, r3
 8001768:	4b31      	ldr	r3, [pc, #196]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800176a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176e:	2b00      	cmp	r3, #0
 8001770:	da0c      	bge.n	800178c <HAL_TIM_PeriodElapsedCallback+0x1dc>
				sprintf(display, "%04d", gyro_read[active_axis]);
 8001772:	4b31      	ldr	r3, [pc, #196]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800177c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001780:	461a      	mov	r2, r3
 8001782:	4930      	ldr	r1, [pc, #192]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001784:	482e      	ldr	r0, [pc, #184]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001786:	f003 fbcd 	bl	8004f24 <siprintf>
 800178a:	e00b      	b.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x1f4>
			else
				sprintf(display, " %03d", gyro_read[active_axis]);
 800178c:	4b2a      	ldr	r3, [pc, #168]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	461a      	mov	r2, r3
 8001794:	4b26      	ldr	r3, [pc, #152]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	461a      	mov	r2, r3
 800179c:	492a      	ldr	r1, [pc, #168]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800179e:	4828      	ldr	r0, [pc, #160]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017a0:	f003 fbc0 	bl	8004f24 <siprintf>

			put_dot((uint8_t) 1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f7ff fda9 	bl	80012fc <put_dot>
		}
		disp_buffer_update(0, display[0]);
 80017aa:	4b25      	ldr	r3, [pc, #148]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	4619      	mov	r1, r3
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff fadb 	bl	8000d6c <disp_buffer_update>
		disp_buffer_update(1, display[1]);
 80017b6:	4b22      	ldr	r3, [pc, #136]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	4619      	mov	r1, r3
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fad5 	bl	8000d6c <disp_buffer_update>
		disp_buffer_update(2, display[2]);
 80017c2:	4b1f      	ldr	r3, [pc, #124]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017c4:	789b      	ldrb	r3, [r3, #2]
 80017c6:	4619      	mov	r1, r3
 80017c8:	2002      	movs	r0, #2
 80017ca:	f7ff facf 	bl	8000d6c <disp_buffer_update>
		disp_buffer_update(3, display[3]);
 80017ce:	4b1c      	ldr	r3, [pc, #112]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x290>)
 80017d0:	78db      	ldrb	r3, [r3, #3]
 80017d2:	4619      	mov	r1, r3
 80017d4:	2003      	movs	r0, #3
 80017d6:	f7ff fac9 	bl	8000d6c <disp_buffer_update>




		HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	2110      	movs	r1, #16
 80017de:	481b      	ldr	r0, [pc, #108]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017e0:	f001 fb64 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET);
 80017e4:	2200      	movs	r2, #0
 80017e6:	2110      	movs	r1, #16
 80017e8:	4818      	ldr	r0, [pc, #96]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017ea:	f001 fb5f 	bl	8002eac <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, 3);
 80017ee:	2303      	movs	r3, #3
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80017f2:	4917      	ldr	r1, [pc, #92]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017f4:	4817      	ldr	r0, [pc, #92]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 80017f6:	f002 f985 	bl	8003b04 <HAL_SPI_TransmitReceive_DMA>
	}
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
 8001802:	bf00      	nop
 8001804:	40014400 	.word	0x40014400
 8001808:	2000009a 	.word	0x2000009a
 800180c:	20000174 	.word	0x20000174
 8001810:	2000017c 	.word	0x2000017c
 8001814:	200001b0 	.word	0x200001b0
 8001818:	20000108 	.word	0x20000108
 800181c:	20000094 	.word	0x20000094
 8001820:	20000096 	.word	0x20000096
 8001824:	20000098 	.word	0x20000098
 8001828:	51eb851f 	.word	0x51eb851f
 800182c:	3ff33333 	.word	0x3ff33333
 8001830:	200002e0 	.word	0x200002e0
 8001834:	20000090 	.word	0x20000090
 8001838:	2000008c 	.word	0x2000008c
 800183c:	08005748 	.word	0x08005748
 8001840:	20000170 	.word	0x20000170
 8001844:	08005750 	.word	0x08005750
 8001848:	08005758 	.word	0x08005758
 800184c:	40020000 	.word	0x40020000
 8001850:	0800578c 	.word	0x0800578c
 8001854:	200001e8 	.word	0x200001e8

08001858 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	4603      	mov	r3, r0
 8001860:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == button_IT_Pin){
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d118      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x42>

//	  HAL_Delay(20);
	  if(HAL_GPIO_ReadPin(button_IT_GPIO_Port, button_IT_Pin)==GPIO_PIN_SET){
 8001868:	2101      	movs	r1, #1
 800186a:	480e      	ldr	r0, [pc, #56]	; (80018a4 <HAL_GPIO_EXTI_Callback+0x4c>)
 800186c:	f001 fb06 	bl	8002e7c <HAL_GPIO_ReadPin>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d111      	bne.n	800189a <HAL_GPIO_EXTI_Callback+0x42>
		  cnt = 200;
 8001876:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <HAL_GPIO_EXTI_Callback+0x50>)
 8001878:	22c8      	movs	r2, #200	; 0xc8
 800187a:	601a      	str	r2, [r3, #0]
		  active_axis += 1;
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_GPIO_EXTI_Callback+0x54>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3301      	adds	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_GPIO_EXTI_Callback+0x54>)
 8001888:	701a      	strb	r2, [r3, #0]
		  if(active_axis > 2) active_axis = 0;
 800188a:	4b08      	ldr	r3, [pc, #32]	; (80018ac <HAL_GPIO_EXTI_Callback+0x54>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d902      	bls.n	800189a <HAL_GPIO_EXTI_Callback+0x42>
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_GPIO_EXTI_Callback+0x54>)
 8001896:	2200      	movs	r2, #0
 8001898:	701a      	strb	r2, [r3, #0]
	  }

  }
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020400 	.word	0x40020400
 80018a8:	20000090 	.word	0x20000090
 80018ac:	2000008c 	.word	0x2000008c

080018b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018b6:	f000 fc4b 	bl	8002150 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018ba:	f000 f867 	bl	800198c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018be:	f000 f97b 	bl	8001bb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80018c2:	f000 f951 	bl	8001b68 <MX_DMA_Init>
  MX_SPI1_Init();
 80018c6:	f000 f8c9 	bl	8001a5c <MX_SPI1_Init>
  MX_TIM10_Init();
 80018ca:	f000 f8ff 	bl	8001acc <MX_TIM10_Init>
  MX_USART2_UART_Init();
 80018ce:	f000 f921 	bl	8001b14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_Base_Start_IT(&htim10);
 80018d2:	4825      	ldr	r0, [pc, #148]	; (8001968 <main+0xb8>)
 80018d4:	f002 fc5f 	bl	8004196 <HAL_TIM_Base_Start_IT>


  HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_RESET);
 80018d8:	2200      	movs	r2, #0
 80018da:	2110      	movs	r1, #16
 80018dc:	4823      	ldr	r0, [pc, #140]	; (800196c <main+0xbc>)
 80018de:	f001 fae5 	bl	8002eac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, &setup, 1, 1000);
 80018e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018e6:	2201      	movs	r2, #1
 80018e8:	4921      	ldr	r1, [pc, #132]	; (8001970 <main+0xc0>)
 80018ea:	4822      	ldr	r0, [pc, #136]	; (8001974 <main+0xc4>)
 80018ec:	f001 ffd6 	bl	800389c <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(gyro_CS_GPIO_Port, gyro_CS_Pin, GPIO_PIN_SET);
 80018f0:	2201      	movs	r2, #1
 80018f2:	2110      	movs	r1, #16
 80018f4:	481d      	ldr	r0, [pc, #116]	; (800196c <main+0xbc>)
 80018f6:	f001 fad9 	bl	8002eac <HAL_GPIO_WritePin>
  {




	  size = sprintf(msg, "[X]: %+05dG, [Y]: %+05dG, [Z]: %+05dG\n\r",
 80018fa:	4b1f      	ldr	r3, [pc, #124]	; (8001978 <main+0xc8>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <main+0xc8>)
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <main+0xc8>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	460b      	mov	r3, r1
 800190a:	491c      	ldr	r1, [pc, #112]	; (800197c <main+0xcc>)
 800190c:	481c      	ldr	r0, [pc, #112]	; (8001980 <main+0xd0>)
 800190e:	f003 fb09 	bl	8004f24 <siprintf>
 8001912:	4602      	mov	r2, r0
 8001914:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <main+0xd4>)
 8001916:	601a      	str	r2, [r3, #0]
				 	 gyro_read[0],
					 gyro_read[1],
					 gyro_read[2] );

	  msg[ 6]=msg[ 7]; msg[ 7]='.';
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <main+0xd0>)
 800191a:	79db      	ldrb	r3, [r3, #7]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <main+0xd0>)
 8001920:	719a      	strb	r2, [r3, #6]
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <main+0xd0>)
 8001924:	222e      	movs	r2, #46	; 0x2e
 8001926:	71da      	strb	r2, [r3, #7]
	  msg[19]=msg[20]; msg[20]='.';
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <main+0xd0>)
 800192a:	7d1b      	ldrb	r3, [r3, #20]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <main+0xd0>)
 8001930:	74da      	strb	r2, [r3, #19]
 8001932:	4b13      	ldr	r3, [pc, #76]	; (8001980 <main+0xd0>)
 8001934:	222e      	movs	r2, #46	; 0x2e
 8001936:	751a      	strb	r2, [r3, #20]
	  msg[32]=msg[33]; msg[33]='.';
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <main+0xd0>)
 800193a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800193e:	b2da      	uxtb	r2, r3
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <main+0xd0>)
 8001942:	f883 2020 	strb.w	r2, [r3, #32]
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <main+0xd0>)
 8001948:	222e      	movs	r2, #46	; 0x2e
 800194a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21



	  HAL_UART_Transmit(&huart2, msg, size, 100);
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <main+0xd4>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b29a      	uxth	r2, r3
 8001954:	2364      	movs	r3, #100	; 0x64
 8001956:	490a      	ldr	r1, [pc, #40]	; (8001980 <main+0xd0>)
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <main+0xd8>)
 800195a:	f002 fe52 	bl	8004602 <HAL_UART_Transmit>

	  HAL_Delay(250);
 800195e:	20fa      	movs	r0, #250	; 0xfa
 8001960:	f000 fc68 	bl	8002234 <HAL_Delay>
	  size = sprintf(msg, "[X]: %+05dG, [Y]: %+05dG, [Z]: %+05dG\n\r",
 8001964:	e7c9      	b.n	80018fa <main+0x4a>
 8001966:	bf00      	nop
 8001968:	200000a8 	.word	0x200000a8
 800196c:	40020000 	.word	0x40020000
 8001970:	08005788 	.word	0x08005788
 8001974:	200001e8 	.word	0x200001e8
 8001978:	200002e0 	.word	0x200002e0
 800197c:	08005760 	.word	0x08005760
 8001980:	2000013c 	.word	0x2000013c
 8001984:	200001e4 	.word	0x200001e4
 8001988:	20000240 	.word	0x20000240

0800198c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b094      	sub	sp, #80	; 0x50
 8001990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	f107 0320 	add.w	r3, r7, #32
 8001996:	2230      	movs	r2, #48	; 0x30
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f003 faba 	bl	8004f14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <SystemClock_Config+0xc8>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	4a26      	ldr	r2, [pc, #152]	; (8001a54 <SystemClock_Config+0xc8>)
 80019ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	; 0x40
 80019c0:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <SystemClock_Config+0xc8>)
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019cc:	2300      	movs	r3, #0
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <SystemClock_Config+0xcc>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <SystemClock_Config+0xcc>)
 80019d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <SystemClock_Config+0xcc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019ec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019f2:	2302      	movs	r3, #2
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019fc:	2304      	movs	r3, #4
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a00:	2364      	movs	r3, #100	; 0x64
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a0c:	f107 0320 	add.w	r3, r7, #32
 8001a10:	4618      	mov	r0, r3
 8001a12:	f001 fa7d 	bl	8002f10 <HAL_RCC_OscConfig>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a1c:	f000 f968 	bl	8001cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a20:	230f      	movs	r3, #15
 8001a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a24:	2302      	movs	r3, #2
 8001a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2103      	movs	r1, #3
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fcd7 	bl	80033f0 <HAL_RCC_ClockConfig>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a48:	f000 f952 	bl	8001cf0 <Error_Handler>
  }
}
 8001a4c:	bf00      	nop
 8001a4e:	3750      	adds	r7, #80	; 0x50
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40007000 	.word	0x40007000

08001a5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a62:	4a19      	ldr	r2, [pc, #100]	; (8001ac8 <MX_SPI1_Init+0x6c>)
 8001a64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a66:	4b17      	ldr	r3, [pc, #92]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001a74:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a7a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a7e:	2202      	movs	r2, #2
 8001a80:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a8e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a92:	2230      	movs	r2, #48	; 0x30
 8001a94:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001aaa:	220a      	movs	r2, #10
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_SPI1_Init+0x68>)
 8001ab0:	f001 fe90 	bl	80037d4 <HAL_SPI_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001aba:	f000 f919 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200001e8 	.word	0x200001e8
 8001ac8:	40013000 	.word	0x40013000

08001acc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <MX_TIM10_Init+0x44>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9;
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001ad8:	2209      	movs	r2, #9
 8001ada:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 49999;
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001ae4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ae8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af0:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <MX_TIM10_Init+0x40>)
 8001af8:	f002 fb22 	bl	8004140 <HAL_TIM_Base_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001b02:	f000 f8f5 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200000a8 	.word	0x200000a8
 8001b10:	40014400 	.word	0x40014400

08001b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_USART2_UART_Init+0x50>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	f002 fd0c 	bl	8004568 <HAL_UART_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b56:	f000 f8cb 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000240 	.word	0x20000240
 8001b64:	40004400 	.word	0x40004400

08001b68 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <MX_DMA_Init+0x4c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2038      	movs	r0, #56	; 0x38
 8001b90:	f000 fc4d 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b94:	2038      	movs	r0, #56	; 0x38
 8001b96:	f000 fc66 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	203a      	movs	r0, #58	; 0x3a
 8001ba0:	f000 fc45 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ba4:	203a      	movs	r0, #58	; 0x3a
 8001ba6:	f000 fc5e 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a39      	ldr	r2, [pc, #228]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a32      	ldr	r2, [pc, #200]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a2b      	ldr	r2, [pc, #172]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b29      	ldr	r3, [pc, #164]	; (8001cd8 <MX_GPIO_Init+0x120>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, disp_G_Pin|disp_D_Pin|disp_E_Pin|disp_C_Pin 
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001c44:	4825      	ldr	r0, [pc, #148]	; (8001cdc <MX_GPIO_Init+0x124>)
 8001c46:	f001 f931 	bl	8002eac <HAL_GPIO_WritePin>
                          |disp_B_Pin|disp_F_Pin|disp_A_Pin|disp_DP_Pin 
                          |disp_COM4_Pin|disp_COM3_Pin|disp_COM2_Pin|disp_COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, gyro_CS_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2130      	movs	r1, #48	; 0x30
 8001c4e:	4824      	ldr	r0, [pc, #144]	; (8001ce0 <MX_GPIO_Init+0x128>)
 8001c50:	f001 f92c 	bl	8002eac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <MX_GPIO_Init+0x12c>)
 8001c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	481c      	ldr	r0, [pc, #112]	; (8001cdc <MX_GPIO_Init+0x124>)
 8001c6a:	f000 ff85 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : disp_G_Pin disp_D_Pin disp_E_Pin disp_C_Pin 
                           disp_B_Pin disp_F_Pin disp_A_Pin disp_DP_Pin 
                           disp_COM4_Pin disp_COM3_Pin disp_COM2_Pin disp_COM1_Pin */
  GPIO_InitStruct.Pin = disp_G_Pin|disp_D_Pin|disp_E_Pin|disp_C_Pin 
 8001c6e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001c72:	617b      	str	r3, [r7, #20]
                          |disp_B_Pin|disp_F_Pin|disp_A_Pin|disp_DP_Pin 
                          |disp_COM4_Pin|disp_COM3_Pin|disp_COM2_Pin|disp_COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c74:	2301      	movs	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	4619      	mov	r1, r3
 8001c86:	4815      	ldr	r0, [pc, #84]	; (8001cdc <MX_GPIO_Init+0x124>)
 8001c88:	f000 ff76 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : gyro_CS_Pin LD2_Pin */
  GPIO_InitStruct.Pin = gyro_CS_Pin|LD2_Pin;
 8001c8c:	2330      	movs	r3, #48	; 0x30
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c90:	2301      	movs	r3, #1
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480f      	ldr	r0, [pc, #60]	; (8001ce0 <MX_GPIO_Init+0x128>)
 8001ca4:	f000 ff68 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_IT_Pin */
  GPIO_InitStruct.Pin = button_IT_Pin;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cac:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_GPIO_Init+0x130>)
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button_IT_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480c      	ldr	r0, [pc, #48]	; (8001cec <MX_GPIO_Init+0x134>)
 8001cbc:	f000 ff5c 	bl	8002b78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f000 fbb2 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001cca:	2006      	movs	r0, #6
 8001ccc:	f000 fbcb 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 8001cd0:	bf00      	nop
 8001cd2:	3728      	adds	r7, #40	; 0x28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	10210000 	.word	0x10210000
 8001ce8:	10110000 	.word	0x10110000
 8001cec:	40020400 	.word	0x40020400

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b10      	ldr	r3, [pc, #64]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b0d      	ldr	r3, [pc, #52]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a08      	ldr	r2, [pc, #32]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800

08001d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <HAL_SPI_MspInit+0x180>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	f040 80aa 	bne.w	8001ec8 <HAL_SPI_MspInit+0x178>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7c:	4a55      	ldr	r2, [pc, #340]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d82:	6453      	str	r3, [r2, #68]	; 0x44
 8001d84:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a4e      	ldr	r2, [pc, #312]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b4c      	ldr	r3, [pc, #304]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	60bb      	str	r3, [r7, #8]
 8001db0:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db4:	4a47      	ldr	r2, [pc, #284]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001db6:	f043 0302 	orr.w	r3, r3, #2
 8001dba:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <HAL_SPI_MspInit+0x184>)
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc8:	23c0      	movs	r3, #192	; 0xc0
 8001dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dd8:	2305      	movs	r3, #5
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	483d      	ldr	r0, [pc, #244]	; (8001ed8 <HAL_SPI_MspInit+0x188>)
 8001de4:	f000 fec8 	bl	8002b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001de8:	2308      	movs	r3, #8
 8001dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001df8:	2305      	movs	r3, #5
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	4619      	mov	r1, r3
 8001e02:	4836      	ldr	r0, [pc, #216]	; (8001edc <HAL_SPI_MspInit+0x18c>)
 8001e04:	f000 feb8 	bl	8002b78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e0a:	4a36      	ldr	r2, [pc, #216]	; (8001ee4 <HAL_SPI_MspInit+0x194>)
 8001e0c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8001e0e:	4b34      	ldr	r3, [pc, #208]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e10:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e14:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e16:	4b32      	ldr	r3, [pc, #200]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e18:	2240      	movs	r2, #64	; 0x40
 8001e1a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e22:	4b2f      	ldr	r3, [pc, #188]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e28:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e30:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e38:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e3a:	4b29      	ldr	r3, [pc, #164]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e4c:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e4e:	f000 fb25 	bl	800249c <HAL_DMA_Init>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8001e58:	f7ff ff4a 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e60:	649a      	str	r2, [r3, #72]	; 0x48
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_SPI_MspInit+0x190>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001e68:	4b1f      	ldr	r3, [pc, #124]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e6a:	4a20      	ldr	r2, [pc, #128]	; (8001eec <HAL_SPI_MspInit+0x19c>)
 8001e6c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e70:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001e74:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e88:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e8a:	4b17      	ldr	r3, [pc, #92]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e90:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e92:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e98:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ea0:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea6:	4b10      	ldr	r3, [pc, #64]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001eac:	480e      	ldr	r0, [pc, #56]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001eae:	f000 faf5 	bl	800249c <HAL_DMA_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_SPI_MspInit+0x16c>
    {
      Error_Handler();
 8001eb8:	f7ff ff1a 	bl	8001cf0 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a0a      	ldr	r2, [pc, #40]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001ec0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <HAL_SPI_MspInit+0x198>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec8:	bf00      	nop
 8001eca:	3728      	adds	r7, #40	; 0x28
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40013000 	.word	0x40013000
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	40020000 	.word	0x40020000
 8001edc:	40020400 	.word	0x40020400
 8001ee0:	200002ec 	.word	0x200002ec
 8001ee4:	40026440 	.word	0x40026440
 8001ee8:	20000280 	.word	0x20000280
 8001eec:	40026410 	.word	0x40026410

08001ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0e      	ldr	r2, [pc, #56]	; (8001f38 <HAL_TIM_Base_MspInit+0x48>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d115      	bne.n	8001f2e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b0d      	ldr	r3, [pc, #52]	; (8001f3c <HAL_TIM_Base_MspInit+0x4c>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0a:	4a0c      	ldr	r2, [pc, #48]	; (8001f3c <HAL_TIM_Base_MspInit+0x4c>)
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	6453      	str	r3, [r2, #68]	; 0x44
 8001f12:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <HAL_TIM_Base_MspInit+0x4c>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	2019      	movs	r0, #25
 8001f24:	f000 fa83 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f000 fa9c 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	40023800 	.word	0x40023800

08001f40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_UART_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12b      	bne.n	8001fba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f70:	6413      	str	r3, [r2, #64]	; 0x40
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a10      	ldr	r2, [pc, #64]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <HAL_UART_MspInit+0x88>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001faa:	2307      	movs	r3, #7
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <HAL_UART_MspInit+0x8c>)
 8001fb6:	f000 fddf 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40004400 	.word	0x40004400
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020000 	.word	0x40020000

08001fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <HardFault_Handler+0x4>

08001fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <MemManage_Handler+0x4>

08001fea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fee:	e7fe      	b.n	8001fee <BusFault_Handler+0x4>

08001ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <UsageFault_Handler+0x4>

08001ff6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ff6:	b480      	push	{r7}
 8001ff8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002024:	f000 f8e6 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002030:	2001      	movs	r0, #1
 8002032:	f000 ff55 	bl	8002ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
	...

0800203c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002042:	f002 f8cc 	bl	80041de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200000a8 	.word	0x200000a8

08002050 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <DMA2_Stream0_IRQHandler+0x10>)
 8002056:	f000 fb27 	bl	80026a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	20000280 	.word	0x20000280

08002064 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <DMA2_Stream2_IRQHandler+0x10>)
 800206a:	f000 fb1d 	bl	80026a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200002ec 	.word	0x200002ec

08002078 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_sbrk+0x50>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x16>
		heap_end = &end;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <_sbrk+0x50>)
 800208a:	4a10      	ldr	r2, [pc, #64]	; (80020cc <_sbrk+0x54>)
 800208c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800208e:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <_sbrk+0x50>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002094:	4b0c      	ldr	r3, [pc, #48]	; (80020c8 <_sbrk+0x50>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4413      	add	r3, r2
 800209c:	466a      	mov	r2, sp
 800209e:	4293      	cmp	r3, r2
 80020a0:	d907      	bls.n	80020b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020a2:	f002 ff0d 	bl	8004ec0 <__errno>
 80020a6:	4602      	mov	r2, r0
 80020a8:	230c      	movs	r3, #12
 80020aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b0:	e006      	b.n	80020c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80020b2:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <_sbrk+0x50>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a03      	ldr	r2, [pc, #12]	; (80020c8 <_sbrk+0x50>)
 80020bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000009c 	.word	0x2000009c
 80020cc:	20000358 	.word	0x20000358

080020d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <SystemInit+0x28>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <SystemInit+0x28>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <SystemInit+0x28>)
 80020e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020ea:	609a      	str	r2, [r3, #8]
#endif
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002134 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002100:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002102:	e003      	b.n	800210c <LoopCopyDataInit>

08002104 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002104:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002106:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002108:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800210a:	3104      	adds	r1, #4

0800210c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002110:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002112:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002114:	d3f6      	bcc.n	8002104 <CopyDataInit>
  ldr  r2, =_sbss
 8002116:	4a0b      	ldr	r2, [pc, #44]	; (8002144 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002118:	e002      	b.n	8002120 <LoopFillZerobss>

0800211a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800211a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800211c:	f842 3b04 	str.w	r3, [r2], #4

08002120 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002120:	4b09      	ldr	r3, [pc, #36]	; (8002148 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002122:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002124:	d3f9      	bcc.n	800211a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002126:	f7ff ffd3 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800212a:	f002 fecf 	bl	8004ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7ff fbbf 	bl	80018b0 <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002134:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002138:	080057f8 	.word	0x080057f8
  ldr  r0, =_sdata
 800213c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002140:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8002144:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8002148:	20000354 	.word	0x20000354

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	; (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	; (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	; (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	; (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f94d 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fdbc 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f965 	bl	8002482 <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021d0:	f000 f92d 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	; (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	; (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	2000034c 	.word	0x2000034c

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	; (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	2000034c 	.word	0x2000034c

08002234 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff ffee 	bl	800221c <HAL_GetTick>
 8002240:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224c:	d005      	beq.n	800225a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_Delay+0x40>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	461a      	mov	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800225a:	bf00      	nop
 800225c:	f7ff ffde 	bl	800221c <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	429a      	cmp	r2, r3
 800226a:	d8f7      	bhi.n	800225c <HAL_Delay+0x28>
  {
  }
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20000008 	.word	0x20000008

08002278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b480      	push	{r7}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002288:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002294:	4013      	ands	r3, r2
 8002296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022aa:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SetPriorityGrouping+0x44>)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	60d3      	str	r3, [r2, #12]
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <__NVIC_GetPriorityGrouping+0x18>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 0307 	and.w	r3, r3, #7
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000ed00 	.word	0xe000ed00

080022dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	db0b      	blt.n	8002306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	f003 021f 	and.w	r2, r3, #31
 80022f4:	4907      	ldr	r1, [pc, #28]	; (8002314 <__NVIC_EnableIRQ+0x38>)
 80022f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fa:	095b      	lsrs	r3, r3, #5
 80022fc:	2001      	movs	r0, #1
 80022fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	e000e100 	.word	0xe000e100

08002318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002328:	2b00      	cmp	r3, #0
 800232a:	db0a      	blt.n	8002342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	490c      	ldr	r1, [pc, #48]	; (8002364 <__NVIC_SetPriority+0x4c>)
 8002332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002336:	0112      	lsls	r2, r2, #4
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	440b      	add	r3, r1
 800233c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002340:	e00a      	b.n	8002358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4908      	ldr	r1, [pc, #32]	; (8002368 <__NVIC_SetPriority+0x50>)
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	3b04      	subs	r3, #4
 8002350:	0112      	lsls	r2, r2, #4
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	440b      	add	r3, r1
 8002356:	761a      	strb	r2, [r3, #24]
}
 8002358:	bf00      	nop
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000e100 	.word	0xe000e100
 8002368:	e000ed00 	.word	0xe000ed00

0800236c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f1c3 0307 	rsb	r3, r3, #7
 8002386:	2b04      	cmp	r3, #4
 8002388:	bf28      	it	cs
 800238a:	2304      	movcs	r3, #4
 800238c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3304      	adds	r3, #4
 8002392:	2b06      	cmp	r3, #6
 8002394:	d902      	bls.n	800239c <NVIC_EncodePriority+0x30>
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3b03      	subs	r3, #3
 800239a:	e000      	b.n	800239e <NVIC_EncodePriority+0x32>
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43da      	mvns	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	401a      	ands	r2, r3
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43d9      	mvns	r1, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	4313      	orrs	r3, r2
         );
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	; (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023f8:	f7ff ff8e 	bl	8002318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff29 	bl	8002278 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff3e 	bl	80022c0 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff8e 	bl	800236c <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5d 	bl	8002318 <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff31 	bl	80022dc <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a8:	f7ff feb8 	bl	800221c <HAL_GetTick>
 80024ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e099      	b.n	80025ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2202      	movs	r2, #2
 80024c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681a      	ldr	r2, [r3, #0]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 0201 	bic.w	r2, r2, #1
 80024d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d8:	e00f      	b.n	80024fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024da:	f7ff fe9f 	bl	800221c <HAL_GetTick>
 80024de:	4602      	mov	r2, r0
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	2b05      	cmp	r3, #5
 80024e6:	d908      	bls.n	80024fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2220      	movs	r2, #32
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2203      	movs	r2, #3
 80024f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e078      	b.n	80025ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	2b00      	cmp	r3, #0
 8002506:	d1e8      	bne.n	80024da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	4b38      	ldr	r3, [pc, #224]	; (80025f4 <HAL_DMA_Init+0x158>)
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b04      	cmp	r3, #4
 8002552:	d107      	bne.n	8002564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4313      	orrs	r3, r2
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	4313      	orrs	r3, r2
 8002562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	2b04      	cmp	r3, #4
 800258c:	d117      	bne.n	80025be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002592:	697a      	ldr	r2, [r7, #20]
 8002594:	4313      	orrs	r3, r2
 8002596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00e      	beq.n	80025be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f000 fa6f 	bl	8002a84 <DMA_CheckFifoParam>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2240      	movs	r2, #64	; 0x40
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025ba:	2301      	movs	r3, #1
 80025bc:	e016      	b.n	80025ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 fa26 	bl	8002a18 <DMA_CalcBaseAndBitshift>
 80025cc:	4603      	mov	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	223f      	movs	r2, #63	; 0x3f
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	f010803f 	.word	0xf010803f

080025f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_DMA_Start_IT+0x26>
 800261a:	2302      	movs	r3, #2
 800261c:	e040      	b.n	80026a0 <HAL_DMA_Start_IT+0xa8>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b01      	cmp	r3, #1
 8002630:	d12f      	bne.n	8002692 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 f9b8 	bl	80029bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	223f      	movs	r2, #63	; 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0216 	orr.w	r2, r2, #22
 8002666:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0208 	orr.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e005      	b.n	800269e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026b4:	4b92      	ldr	r3, [pc, #584]	; (8002900 <HAL_DMA_IRQHandler+0x258>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a92      	ldr	r2, [pc, #584]	; (8002904 <HAL_DMA_IRQHandler+0x25c>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0a9b      	lsrs	r3, r3, #10
 80026c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	2208      	movs	r2, #8
 80026d4:	409a      	lsls	r2, r3
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01a      	beq.n	8002714 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d013      	beq.n	8002714 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002700:	2208      	movs	r2, #8
 8002702:	409a      	lsls	r2, r3
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270c:	f043 0201 	orr.w	r2, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002718:	2201      	movs	r2, #1
 800271a:	409a      	lsls	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4013      	ands	r3, r2
 8002720:	2b00      	cmp	r3, #0
 8002722:	d012      	beq.n	800274a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002736:	2201      	movs	r2, #1
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002742:	f043 0202 	orr.w	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2204      	movs	r2, #4
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d012      	beq.n	8002780 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276c:	2204      	movs	r2, #4
 800276e:	409a      	lsls	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002778:	f043 0204 	orr.w	r2, r3, #4
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002784:	2210      	movs	r2, #16
 8002786:	409a      	lsls	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4013      	ands	r3, r2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d043      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0308 	and.w	r3, r3, #8
 800279a:	2b00      	cmp	r3, #0
 800279c:	d03c      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2210      	movs	r2, #16
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d018      	beq.n	80027ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d024      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	4798      	blx	r3
 80027d6:	e01f      	b.n	8002818 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d01b      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	4798      	blx	r3
 80027e8:	e016      	b.n	8002818 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d107      	bne.n	8002808 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0208 	bic.w	r2, r2, #8
 8002806:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2220      	movs	r2, #32
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4013      	ands	r3, r2
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 808e 	beq.w	8002946 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8086 	beq.w	8002946 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283e:	2220      	movs	r2, #32
 8002840:	409a      	lsls	r2, r3
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b05      	cmp	r3, #5
 8002850:	d136      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 0216 	bic.w	r2, r2, #22
 8002860:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	695a      	ldr	r2, [r3, #20]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002870:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <HAL_DMA_IRQHandler+0x1da>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0208 	bic.w	r2, r2, #8
 8002890:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002896:	223f      	movs	r2, #63	; 0x3f
 8002898:	409a      	lsls	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d07d      	beq.n	80029b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	4798      	blx	r3
        }
        return;
 80028be:	e078      	b.n	80029b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01c      	beq.n	8002908 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d030      	beq.n	8002946 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
 80028ec:	e02b      	b.n	8002946 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d027      	beq.n	8002946 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
 80028fe:	e022      	b.n	8002946 <HAL_DMA_IRQHandler+0x29e>
 8002900:	20000000 	.word	0x20000000
 8002904:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10f      	bne.n	8002936 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0210 	bic.w	r2, r2, #16
 8002924:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	2b00      	cmp	r3, #0
 800294c:	d032      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d022      	beq.n	80029a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2205      	movs	r2, #5
 800295e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f022 0201 	bic.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	429a      	cmp	r2, r3
 800297c:	d307      	bcc.n	800298e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0301 	and.w	r3, r3, #1
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1f2      	bne.n	8002972 <HAL_DMA_IRQHandler+0x2ca>
 800298c:	e000      	b.n	8002990 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800298e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
 80029b0:	e000      	b.n	80029b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029b2:	bf00      	nop
    }
  }
}
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop

080029bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80029d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d108      	bne.n	80029fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68ba      	ldr	r2, [r7, #8]
 80029f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80029fa:	e007      	b.n	8002a0c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	60da      	str	r2, [r3, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3b10      	subs	r3, #16
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <DMA_CalcBaseAndBitshift+0x64>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	091b      	lsrs	r3, r3, #4
 8002a30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a32:	4a13      	ldr	r2, [pc, #76]	; (8002a80 <DMA_CalcBaseAndBitshift+0x68>)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4413      	add	r3, r2
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b03      	cmp	r3, #3
 8002a44:	d909      	bls.n	8002a5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	1d1a      	adds	r2, r3, #4
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	659a      	str	r2, [r3, #88]	; 0x58
 8002a58:	e007      	b.n	8002a6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	aaaaaaab 	.word	0xaaaaaaab
 8002a80:	080057ac 	.word	0x080057ac

08002a84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d11f      	bne.n	8002ade <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d855      	bhi.n	8002b50 <DMA_CheckFifoParam+0xcc>
 8002aa4:	a201      	add	r2, pc, #4	; (adr r2, 8002aac <DMA_CheckFifoParam+0x28>)
 8002aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aaa:	bf00      	nop
 8002aac:	08002abd 	.word	0x08002abd
 8002ab0:	08002acf 	.word	0x08002acf
 8002ab4:	08002abd 	.word	0x08002abd
 8002ab8:	08002b51 	.word	0x08002b51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d045      	beq.n	8002b54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002acc:	e042      	b.n	8002b54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ad2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ad6:	d13f      	bne.n	8002b58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002adc:	e03c      	b.n	8002b58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae6:	d121      	bne.n	8002b2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d836      	bhi.n	8002b5c <DMA_CheckFifoParam+0xd8>
 8002aee:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <DMA_CheckFifoParam+0x70>)
 8002af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af4:	08002b05 	.word	0x08002b05
 8002af8:	08002b0b 	.word	0x08002b0b
 8002afc:	08002b05 	.word	0x08002b05
 8002b00:	08002b1d 	.word	0x08002b1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      break;
 8002b08:	e02f      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d024      	beq.n	8002b60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1a:	e021      	b.n	8002b60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b24:	d11e      	bne.n	8002b64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b2a:	e01b      	b.n	8002b64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d902      	bls.n	8002b38 <DMA_CheckFifoParam+0xb4>
 8002b32:	2b03      	cmp	r3, #3
 8002b34:	d003      	beq.n	8002b3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b36:	e018      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b3c:	e015      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b4e:	e00b      	b.n	8002b68 <DMA_CheckFifoParam+0xe4>
      break;
 8002b50:	bf00      	nop
 8002b52:	e00a      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b54:	bf00      	nop
 8002b56:	e008      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b58:	bf00      	nop
 8002b5a:	e006      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b5c:	bf00      	nop
 8002b5e:	e004      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b60:	bf00      	nop
 8002b62:	e002      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;   
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <DMA_CheckFifoParam+0xe6>
      break;
 8002b68:	bf00      	nop
    }
  } 
  
  return status; 
 8002b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	; 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	e159      	b.n	8002e48 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b94:	2201      	movs	r2, #1
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	f040 8148 	bne.w	8002e42 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d00b      	beq.n	8002bd2 <HAL_GPIO_Init+0x5a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d007      	beq.n	8002bd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bc6:	2b11      	cmp	r3, #17
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b12      	cmp	r3, #18
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	2203      	movs	r2, #3
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	43db      	mvns	r3, r3
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0xfc>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b12      	cmp	r3, #18
 8002c72:	d123      	bne.n	8002cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	08da      	lsrs	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3208      	adds	r2, #8
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	220f      	movs	r2, #15
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691a      	ldr	r2, [r3, #16]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0307 	and.w	r3, r3, #7
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	08da      	lsrs	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3208      	adds	r2, #8
 8002cb6:	69b9      	ldr	r1, [r7, #24]
 8002cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	005b      	lsls	r3, r3, #1
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 0203 	and.w	r2, r3, #3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	005b      	lsls	r3, r3, #1
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80a2 	beq.w	8002e42 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b56      	ldr	r3, [pc, #344]	; (8002e5c <HAL_GPIO_Init+0x2e4>)
 8002d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d06:	4a55      	ldr	r2, [pc, #340]	; (8002e5c <HAL_GPIO_Init+0x2e4>)
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0e:	4b53      	ldr	r3, [pc, #332]	; (8002e5c <HAL_GPIO_Init+0x2e4>)
 8002d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d1a:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	089b      	lsrs	r3, r3, #2
 8002d20:	3302      	adds	r3, #2
 8002d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d28:	69fb      	ldr	r3, [r7, #28]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	220f      	movs	r2, #15
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a48      	ldr	r2, [pc, #288]	; (8002e64 <HAL_GPIO_Init+0x2ec>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d019      	beq.n	8002d7a <HAL_GPIO_Init+0x202>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_GPIO_Init+0x2f0>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d013      	beq.n	8002d76 <HAL_GPIO_Init+0x1fe>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_GPIO_Init+0x2f4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d00d      	beq.n	8002d72 <HAL_GPIO_Init+0x1fa>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a45      	ldr	r2, [pc, #276]	; (8002e70 <HAL_GPIO_Init+0x2f8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d007      	beq.n	8002d6e <HAL_GPIO_Init+0x1f6>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a44      	ldr	r2, [pc, #272]	; (8002e74 <HAL_GPIO_Init+0x2fc>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_GPIO_Init+0x1f2>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e008      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d6a:	2307      	movs	r3, #7
 8002d6c:	e006      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e004      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e002      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d76:	2301      	movs	r3, #1
 8002d78:	e000      	b.n	8002d7c <HAL_GPIO_Init+0x204>
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	69fa      	ldr	r2, [r7, #28]
 8002d7e:	f002 0203 	and.w	r2, r2, #3
 8002d82:	0092      	lsls	r2, r2, #2
 8002d84:	4093      	lsls	r3, r2
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d8c:	4934      	ldr	r1, [pc, #208]	; (8002e60 <HAL_GPIO_Init+0x2e8>)
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	089b      	lsrs	r3, r3, #2
 8002d92:	3302      	adds	r3, #2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d9a:	4b37      	ldr	r3, [pc, #220]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dbe:	4a2e      	ldr	r2, [pc, #184]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002dc4:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de8:	4a23      	ldr	r2, [pc, #140]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e12:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e18:	4b17      	ldr	r3, [pc, #92]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	43db      	mvns	r3, r3
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	4013      	ands	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e3c:	4a0e      	ldr	r2, [pc, #56]	; (8002e78 <HAL_GPIO_Init+0x300>)
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	3301      	adds	r3, #1
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b0f      	cmp	r3, #15
 8002e4c:	f67f aea2 	bls.w	8002b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e50:	bf00      	nop
 8002e52:	3724      	adds	r7, #36	; 0x24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	40013800 	.word	0x40013800
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020400 	.word	0x40020400
 8002e6c:	40020800 	.word	0x40020800
 8002e70:	40020c00 	.word	0x40020c00
 8002e74:	40021000 	.word	0x40021000
 8002e78:	40013c00 	.word	0x40013c00

08002e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e94:	2301      	movs	r3, #1
 8002e96:	73fb      	strb	r3, [r7, #15]
 8002e98:	e001      	b.n	8002e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	807b      	strh	r3, [r7, #2]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ebc:	787b      	ldrb	r3, [r7, #1]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec2:	887a      	ldrh	r2, [r7, #2]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec8:	e003      	b.n	8002ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002eca:	887b      	ldrh	r3, [r7, #2]
 8002ecc:	041a      	lsls	r2, r3, #16
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	619a      	str	r2, [r3, #24]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002eea:	4b08      	ldr	r3, [pc, #32]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d006      	beq.n	8002f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ef6:	4a05      	ldr	r2, [pc, #20]	; (8002f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002efc:	88fb      	ldrh	r3, [r7, #6]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fcaa 	bl	8001858 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e25b      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d075      	beq.n	800301a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2e:	4ba3      	ldr	r3, [pc, #652]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b04      	cmp	r3, #4
 8002f38:	d00c      	beq.n	8002f54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f3a:	4ba0      	ldr	r3, [pc, #640]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d112      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f46:	4b9d      	ldr	r3, [pc, #628]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f52:	d10b      	bne.n	8002f6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f54:	4b99      	ldr	r3, [pc, #612]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d05b      	beq.n	8003018 <HAL_RCC_OscConfig+0x108>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d157      	bne.n	8003018 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e236      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f74:	d106      	bne.n	8002f84 <HAL_RCC_OscConfig+0x74>
 8002f76:	4b91      	ldr	r3, [pc, #580]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a90      	ldr	r2, [pc, #576]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0xb0>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x98>
 8002f8e:	4b8b      	ldr	r3, [pc, #556]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a8a      	ldr	r2, [pc, #552]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b88      	ldr	r3, [pc, #544]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a87      	ldr	r2, [pc, #540]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xb0>
 8002fa8:	4b84      	ldr	r3, [pc, #528]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a83      	ldr	r2, [pc, #524]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b81      	ldr	r3, [pc, #516]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a80      	ldr	r2, [pc, #512]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff f928 	bl	800221c <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7ff f924 	bl	800221c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e1fb      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b76      	ldr	r3, [pc, #472]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xc0>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7ff f914 	bl	800221c <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7ff f910 	bl	800221c <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1e7      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	4b6c      	ldr	r3, [pc, #432]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0xe8>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d063      	beq.n	80030ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003026:	4b65      	ldr	r3, [pc, #404]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003032:	4b62      	ldr	r3, [pc, #392]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303a:	2b08      	cmp	r3, #8
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	4b5f      	ldr	r3, [pc, #380]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b5c      	ldr	r3, [pc, #368]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x152>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1bb      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b56      	ldr	r3, [pc, #344]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4952      	ldr	r1, [pc, #328]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b4f      	ldr	r3, [pc, #316]	; (80031c0 <HAL_RCC_OscConfig+0x2b0>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003086:	f7ff f8c9 	bl	800221c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308e:	f7ff f8c5 	bl	800221c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e19c      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b43      	ldr	r3, [pc, #268]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4940      	ldr	r1, [pc, #256]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b3f      	ldr	r3, [pc, #252]	; (80031c0 <HAL_RCC_OscConfig+0x2b0>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c8:	f7ff f8a8 	bl	800221c <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d0:	f7ff f8a4 	bl	800221c <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e17b      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d030      	beq.n	800315c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d016      	beq.n	8003130 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <HAL_RCC_OscConfig+0x2b4>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7ff f888 	bl	800221c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003110:	f7ff f884 	bl	800221c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e15b      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b26      	ldr	r3, [pc, #152]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003124:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x200>
 800312e:	e015      	b.n	800315c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003130:	4b24      	ldr	r3, [pc, #144]	; (80031c4 <HAL_RCC_OscConfig+0x2b4>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003136:	f7ff f871 	bl	800221c <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800313e:	f7ff f86d 	bl	800221c <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e144      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003150:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003154:	f003 0302 	and.w	r3, r3, #2
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0304 	and.w	r3, r3, #4
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80a0 	beq.w	80032aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800316e:	4b13      	ldr	r3, [pc, #76]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10f      	bne.n	800319a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	4b0f      	ldr	r3, [pc, #60]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	4a0e      	ldr	r2, [pc, #56]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 8003184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003188:	6413      	str	r3, [r2, #64]	; 0x40
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <HAL_RCC_OscConfig+0x2ac>)
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003196:	2301      	movs	r3, #1
 8003198:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCC_OscConfig+0x2b8>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d121      	bne.n	80031ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <HAL_RCC_OscConfig+0x2b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a07      	ldr	r2, [pc, #28]	; (80031c8 <HAL_RCC_OscConfig+0x2b8>)
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b2:	f7ff f833 	bl	800221c <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b8:	e011      	b.n	80031de <HAL_RCC_OscConfig+0x2ce>
 80031ba:	bf00      	nop
 80031bc:	40023800 	.word	0x40023800
 80031c0:	42470000 	.word	0x42470000
 80031c4:	42470e80 	.word	0x42470e80
 80031c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031cc:	f7ff f826 	bl	800221c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0fd      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031de:	4b81      	ldr	r3, [pc, #516]	; (80033e4 <HAL_RCC_OscConfig+0x4d4>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d106      	bne.n	8003200 <HAL_RCC_OscConfig+0x2f0>
 80031f2:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f6:	4a7c      	ldr	r2, [pc, #496]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6713      	str	r3, [r2, #112]	; 0x70
 80031fe:	e01c      	b.n	800323a <HAL_RCC_OscConfig+0x32a>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	2b05      	cmp	r3, #5
 8003206:	d10c      	bne.n	8003222 <HAL_RCC_OscConfig+0x312>
 8003208:	4b77      	ldr	r3, [pc, #476]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 800320a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320c:	4a76      	ldr	r2, [pc, #472]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 800320e:	f043 0304 	orr.w	r3, r3, #4
 8003212:	6713      	str	r3, [r2, #112]	; 0x70
 8003214:	4b74      	ldr	r3, [pc, #464]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	4a73      	ldr	r2, [pc, #460]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6713      	str	r3, [r2, #112]	; 0x70
 8003220:	e00b      	b.n	800323a <HAL_RCC_OscConfig+0x32a>
 8003222:	4b71      	ldr	r3, [pc, #452]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003226:	4a70      	ldr	r2, [pc, #448]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6713      	str	r3, [r2, #112]	; 0x70
 800322e:	4b6e      	ldr	r3, [pc, #440]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003232:	4a6d      	ldr	r2, [pc, #436]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d015      	beq.n	800326e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003242:	f7fe ffeb 	bl	800221c <HAL_GetTick>
 8003246:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003248:	e00a      	b.n	8003260 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800324a:	f7fe ffe7 	bl	800221c <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	f241 3288 	movw	r2, #5000	; 0x1388
 8003258:	4293      	cmp	r3, r2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e0bc      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003260:	4b61      	ldr	r3, [pc, #388]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	f003 0302 	and.w	r3, r3, #2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d0ee      	beq.n	800324a <HAL_RCC_OscConfig+0x33a>
 800326c:	e014      	b.n	8003298 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fe ffd5 	bl	800221c <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003274:	e00a      	b.n	800328c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003276:	f7fe ffd1 	bl	800221c <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	f241 3288 	movw	r2, #5000	; 0x1388
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0a6      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328c:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ee      	bne.n	8003276 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003298:	7dfb      	ldrb	r3, [r7, #23]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329e:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a51      	ldr	r2, [pc, #324]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 80032a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 8092 	beq.w	80033d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b4:	4b4c      	ldr	r3, [pc, #304]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f003 030c 	and.w	r3, r3, #12
 80032bc:	2b08      	cmp	r3, #8
 80032be:	d05c      	beq.n	800337a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	2b02      	cmp	r3, #2
 80032c6:	d141      	bne.n	800334c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c8:	4b48      	ldr	r3, [pc, #288]	; (80033ec <HAL_RCC_OscConfig+0x4dc>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ce:	f7fe ffa5 	bl	800221c <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d6:	f7fe ffa1 	bl	800221c <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e078      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e8:	4b3f      	ldr	r3, [pc, #252]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f0      	bne.n	80032d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	019b      	lsls	r3, r3, #6
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	085b      	lsrs	r3, r3, #1
 800330c:	3b01      	subs	r3, #1
 800330e:	041b      	lsls	r3, r3, #16
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	061b      	lsls	r3, r3, #24
 8003318:	4933      	ldr	r1, [pc, #204]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 800331a:	4313      	orrs	r3, r2
 800331c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331e:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCC_OscConfig+0x4dc>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003324:	f7fe ff7a 	bl	800221c <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800332c:	f7fe ff76 	bl	800221c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e04d      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333e:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x41c>
 800334a:	e045      	b.n	80033d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <HAL_RCC_OscConfig+0x4dc>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003352:	f7fe ff63 	bl	800221c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800335a:	f7fe ff5f 	bl	800221c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e036      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f0      	bne.n	800335a <HAL_RCC_OscConfig+0x44a>
 8003378:	e02e      	b.n	80033d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	699b      	ldr	r3, [r3, #24]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e029      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003386:	4b18      	ldr	r3, [pc, #96]	; (80033e8 <HAL_RCC_OscConfig+0x4d8>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	429a      	cmp	r2, r3
 8003398:	d11c      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d115      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033ae:	4013      	ands	r3, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d10d      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d106      	bne.n	80033d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d001      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40007000 	.word	0x40007000
 80033e8:	40023800 	.word	0x40023800
 80033ec:	42470060 	.word	0x42470060

080033f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0cc      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b68      	ldr	r3, [pc, #416]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 030f 	and.w	r3, r3, #15
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d90c      	bls.n	800342c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003414:	683a      	ldr	r2, [r7, #0]
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800341a:	4b63      	ldr	r3, [pc, #396]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	429a      	cmp	r2, r3
 8003426:	d001      	beq.n	800342c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0b8      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	4a58      	ldr	r2, [pc, #352]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800344e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0308 	and.w	r3, r3, #8
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a52      	ldr	r2, [pc, #328]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003466:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003468:	4b50      	ldr	r3, [pc, #320]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	494d      	ldr	r1, [pc, #308]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d044      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	4b47      	ldr	r3, [pc, #284]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d119      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e07f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b3f      	ldr	r3, [pc, #252]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e06f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e067      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b37      	ldr	r3, [pc, #220]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4934      	ldr	r1, [pc, #208]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fe fe9c 	bl	800221c <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fe fe98 	bl	800221c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e04f      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2b      	ldr	r3, [pc, #172]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d20c      	bcs.n	8003538 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <HAL_RCC_ClockConfig+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 030f 	and.w	r3, r3, #15
 800352e:	683a      	ldr	r2, [r7, #0]
 8003530:	429a      	cmp	r2, r3
 8003532:	d001      	beq.n	8003538 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e032      	b.n	800359e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003544:	4b19      	ldr	r3, [pc, #100]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4916      	ldr	r1, [pc, #88]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	4313      	orrs	r3, r2
 8003554:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d009      	beq.n	8003576 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003562:	4b12      	ldr	r3, [pc, #72]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	490e      	ldr	r1, [pc, #56]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003576:	f000 f821 	bl	80035bc <HAL_RCC_GetSysClockFreq>
 800357a:	4601      	mov	r1, r0
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	5cd3      	ldrb	r3, [r2, r3]
 800358a:	fa21 f303 	lsr.w	r3, r1, r3
 800358e:	4a09      	ldr	r2, [pc, #36]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003590:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003592:	4b09      	ldr	r3, [pc, #36]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe fdfc 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40023c00 	.word	0x40023c00
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08005794 	.word	0x08005794
 80035b4:	20000000 	.word	0x20000000
 80035b8:	20000004 	.word	0x20000004

080035bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	2300      	movs	r3, #0
 80035cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035d2:	4b63      	ldr	r3, [pc, #396]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d007      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x32>
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d008      	beq.n	80035f4 <HAL_RCC_GetSysClockFreq+0x38>
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f040 80b4 	bne.w	8003750 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b5e      	ldr	r3, [pc, #376]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80035ea:	60bb      	str	r3, [r7, #8]
       break;
 80035ec:	e0b3      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ee:	4b5e      	ldr	r3, [pc, #376]	; (8003768 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80035f0:	60bb      	str	r3, [r7, #8]
      break;
 80035f2:	e0b0      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035f4:	4b5a      	ldr	r3, [pc, #360]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035fe:	4b58      	ldr	r3, [pc, #352]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d04a      	beq.n	80036a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800360a:	4b55      	ldr	r3, [pc, #340]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	099b      	lsrs	r3, r3, #6
 8003610:	f04f 0400 	mov.w	r4, #0
 8003614:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	ea03 0501 	and.w	r5, r3, r1
 8003620:	ea04 0602 	and.w	r6, r4, r2
 8003624:	4629      	mov	r1, r5
 8003626:	4632      	mov	r2, r6
 8003628:	f04f 0300 	mov.w	r3, #0
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	0154      	lsls	r4, r2, #5
 8003632:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003636:	014b      	lsls	r3, r1, #5
 8003638:	4619      	mov	r1, r3
 800363a:	4622      	mov	r2, r4
 800363c:	1b49      	subs	r1, r1, r5
 800363e:	eb62 0206 	sbc.w	r2, r2, r6
 8003642:	f04f 0300 	mov.w	r3, #0
 8003646:	f04f 0400 	mov.w	r4, #0
 800364a:	0194      	lsls	r4, r2, #6
 800364c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003650:	018b      	lsls	r3, r1, #6
 8003652:	1a5b      	subs	r3, r3, r1
 8003654:	eb64 0402 	sbc.w	r4, r4, r2
 8003658:	f04f 0100 	mov.w	r1, #0
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	00e2      	lsls	r2, r4, #3
 8003662:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003666:	00d9      	lsls	r1, r3, #3
 8003668:	460b      	mov	r3, r1
 800366a:	4614      	mov	r4, r2
 800366c:	195b      	adds	r3, r3, r5
 800366e:	eb44 0406 	adc.w	r4, r4, r6
 8003672:	f04f 0100 	mov.w	r1, #0
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	0262      	lsls	r2, r4, #9
 800367c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003680:	0259      	lsls	r1, r3, #9
 8003682:	460b      	mov	r3, r1
 8003684:	4614      	mov	r4, r2
 8003686:	4618      	mov	r0, r3
 8003688:	4621      	mov	r1, r4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f04f 0400 	mov.w	r4, #0
 8003690:	461a      	mov	r2, r3
 8003692:	4623      	mov	r3, r4
 8003694:	f7fd f9ea 	bl	8000a6c <__aeabi_uldivmod>
 8003698:	4603      	mov	r3, r0
 800369a:	460c      	mov	r4, r1
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	e049      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036a0:	4b2f      	ldr	r3, [pc, #188]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	099b      	lsrs	r3, r3, #6
 80036a6:	f04f 0400 	mov.w	r4, #0
 80036aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	ea03 0501 	and.w	r5, r3, r1
 80036b6:	ea04 0602 	and.w	r6, r4, r2
 80036ba:	4629      	mov	r1, r5
 80036bc:	4632      	mov	r2, r6
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	f04f 0400 	mov.w	r4, #0
 80036c6:	0154      	lsls	r4, r2, #5
 80036c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036cc:	014b      	lsls	r3, r1, #5
 80036ce:	4619      	mov	r1, r3
 80036d0:	4622      	mov	r2, r4
 80036d2:	1b49      	subs	r1, r1, r5
 80036d4:	eb62 0206 	sbc.w	r2, r2, r6
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	f04f 0400 	mov.w	r4, #0
 80036e0:	0194      	lsls	r4, r2, #6
 80036e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036e6:	018b      	lsls	r3, r1, #6
 80036e8:	1a5b      	subs	r3, r3, r1
 80036ea:	eb64 0402 	sbc.w	r4, r4, r2
 80036ee:	f04f 0100 	mov.w	r1, #0
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	00e2      	lsls	r2, r4, #3
 80036f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036fc:	00d9      	lsls	r1, r3, #3
 80036fe:	460b      	mov	r3, r1
 8003700:	4614      	mov	r4, r2
 8003702:	195b      	adds	r3, r3, r5
 8003704:	eb44 0406 	adc.w	r4, r4, r6
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	02a2      	lsls	r2, r4, #10
 8003712:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003716:	0299      	lsls	r1, r3, #10
 8003718:	460b      	mov	r3, r1
 800371a:	4614      	mov	r4, r2
 800371c:	4618      	mov	r0, r3
 800371e:	4621      	mov	r1, r4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	461a      	mov	r2, r3
 8003728:	4623      	mov	r3, r4
 800372a:	f7fd f99f 	bl	8000a6c <__aeabi_uldivmod>
 800372e:	4603      	mov	r3, r0
 8003730:	460c      	mov	r4, r1
 8003732:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003734:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	60bb      	str	r3, [r7, #8]
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003752:	60bb      	str	r3, [r7, #8]
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	68bb      	ldr	r3, [r7, #8]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003760:	40023800 	.word	0x40023800
 8003764:	00f42400 	.word	0x00f42400
 8003768:	007a1200 	.word	0x007a1200

0800376c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003770:	4b03      	ldr	r3, [pc, #12]	; (8003780 <HAL_RCC_GetHCLKFreq+0x14>)
 8003772:	681b      	ldr	r3, [r3, #0]
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	20000000 	.word	0x20000000

08003784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003788:	f7ff fff0 	bl	800376c <HAL_RCC_GetHCLKFreq>
 800378c:	4601      	mov	r1, r0
 800378e:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0a9b      	lsrs	r3, r3, #10
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4a03      	ldr	r2, [pc, #12]	; (80037a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800379a:	5cd3      	ldrb	r3, [r2, r3]
 800379c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40023800 	.word	0x40023800
 80037a8:	080057a4 	.word	0x080057a4

080037ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037b0:	f7ff ffdc 	bl	800376c <HAL_RCC_GetHCLKFreq>
 80037b4:	4601      	mov	r1, r0
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	0b5b      	lsrs	r3, r3, #13
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	4a03      	ldr	r2, [pc, #12]	; (80037d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037c2:	5cd3      	ldrb	r3, [r2, r3]
 80037c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40023800 	.word	0x40023800
 80037d0:	080057a4 	.word	0x080057a4

080037d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e056      	b.n	8003894 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d106      	bne.n	8003806 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7fe faa5 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	431a      	orrs	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	431a      	orrs	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003842:	431a      	orrs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	69db      	ldr	r3, [r3, #28]
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	ea42 0103 	orr.w	r1, r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	0c1b      	lsrs	r3, r3, #16
 8003864:	f003 0104 	and.w	r1, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	4613      	mov	r3, r2
 80038aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_SPI_Transmit+0x22>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e11e      	b.n	8003afc <HAL_SPI_Transmit+0x260>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038c6:	f7fe fca9 	bl	800221c <HAL_GetTick>
 80038ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80038dc:	2302      	movs	r3, #2
 80038de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038e0:	e103      	b.n	8003aea <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_SPI_Transmit+0x52>
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d102      	bne.n	80038f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80038f2:	e0fa      	b.n	8003aea <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2203      	movs	r2, #3
 80038f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	88fa      	ldrh	r2, [r7, #6]
 800390c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800393a:	d107      	bne.n	800394c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800394a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b40      	cmp	r3, #64	; 0x40
 8003958:	d007      	beq.n	800396a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003972:	d14b      	bne.n	8003a0c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_SPI_Transmit+0xe6>
 800397c:	8afb      	ldrh	r3, [r7, #22]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d13e      	bne.n	8003a00 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	881a      	ldrh	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039a6:	e02b      	b.n	8003a00 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d112      	bne.n	80039dc <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ba:	881a      	ldrh	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80039da:	e011      	b.n	8003a00 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039dc:	f7fe fc1e 	bl	800221c <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d803      	bhi.n	80039f4 <HAL_SPI_Transmit+0x158>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039f2:	d102      	bne.n	80039fa <HAL_SPI_Transmit+0x15e>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039fe:	e074      	b.n	8003aea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ce      	bne.n	80039a8 <HAL_SPI_Transmit+0x10c>
 8003a0a:	e04c      	b.n	8003aa6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <HAL_SPI_Transmit+0x17e>
 8003a14:	8afb      	ldrh	r3, [r7, #22]
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d140      	bne.n	8003a9c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	7812      	ldrb	r2, [r2, #0]
 8003a26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	b29a      	uxth	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a40:	e02c      	b.n	8003a9c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d113      	bne.n	8003a78 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	7812      	ldrb	r2, [r2, #0]
 8003a5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a76:	e011      	b.n	8003a9c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a78:	f7fe fbd0 	bl	800221c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d803      	bhi.n	8003a90 <HAL_SPI_Transmit+0x1f4>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a8e:	d102      	bne.n	8003a96 <HAL_SPI_Transmit+0x1fa>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a9a:	e026      	b.n	8003aea <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1cd      	bne.n	8003a42 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	6839      	ldr	r1, [r7, #0]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb06 	bl	80040bc <SPI_EndRxTxTransaction>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d002      	beq.n	8003abc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10a      	bne.n	8003ada <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	613b      	str	r3, [r7, #16]
 8003ad8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e000      	b.n	8003aea <HAL_SPI_Transmit+0x24e>
  }

error:
 8003ae8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003afa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3720      	adds	r7, #32
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
 8003b10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_SPI_TransmitReceive_DMA+0x20>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e0e3      	b.n	8003cec <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b32:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003b3a:	7dbb      	ldrb	r3, [r7, #22]
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d00d      	beq.n	8003b5c <HAL_SPI_TransmitReceive_DMA+0x58>
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b46:	d106      	bne.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d102      	bne.n	8003b56 <HAL_SPI_TransmitReceive_DMA+0x52>
 8003b50:	7dbb      	ldrb	r3, [r7, #22]
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d002      	beq.n	8003b5c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8003b56:	2302      	movs	r3, #2
 8003b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b5a:	e0c2      	b.n	8003ce2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b72:	e0b6      	b.n	8003ce2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d003      	beq.n	8003b88 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2205      	movs	r2, #5
 8003b84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	887a      	ldrh	r2, [r7, #2]
 8003b9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	887a      	ldrh	r2, [r7, #2]
 8003bb0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d108      	bne.n	8003bdc <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bce:	4a49      	ldr	r2, [pc, #292]	; (8003cf4 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	4a48      	ldr	r2, [pc, #288]	; (8003cf8 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8003bd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bda:	e007      	b.n	8003bec <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be0:	4a46      	ldr	r2, [pc, #280]	; (8003cfc <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8003be2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be8:	4a45      	ldr	r2, [pc, #276]	; (8003d00 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf0:	4a44      	ldr	r2, [pc, #272]	; (8003d04 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8003bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	4619      	mov	r1, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c12:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003c14:	f7fe fcf0 	bl	80025f8 <HAL_DMA_Start_IT>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00c      	beq.n	8003c38 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f043 0210 	orr.w	r2, r3, #16
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003c36:	e054      	b.n	8003ce2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c54:	2200      	movs	r2, #0
 8003c56:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	2200      	movs	r2, #0
 8003c66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4619      	mov	r1, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003c80:	f7fe fcba 	bl	80025f8 <HAL_DMA_Start_IT>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00c      	beq.n	8003ca4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f043 0210 	orr.w	r2, r3, #16
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003ca2:	e01e      	b.n	8003ce2 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d007      	beq.n	8003cc2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	685a      	ldr	r2, [r3, #4]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0220 	orr.w	r2, r2, #32
 8003cd0:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f042 0202 	orr.w	r2, r2, #2
 8003ce0:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	08003ea5 	.word	0x08003ea5
 8003cf8:	08003d6d 	.word	0x08003d6d
 8003cfc:	08003ec1 	.word	0x08003ec1
 8003d00:	08003e15 	.word	0x08003e15
 8003d04:	08003edd 	.word	0x08003edd

08003d08 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d7a:	f7fe fa4f 	bl	800221c <HAL_GetTick>
 8003d7e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8e:	d03b      	beq.n	8003e08 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0220 	bic.w	r2, r2, #32
 8003d9e:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10d      	bne.n	8003dc4 <SPI_DMAReceiveCplt+0x58>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db0:	d108      	bne.n	8003dc4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0203 	bic.w	r2, r2, #3
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	e007      	b.n	8003dd4 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0201 	bic.w	r2, r2, #1
 8003dd2:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	2164      	movs	r1, #100	; 0x64
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 f909 	bl	8003ff0 <SPI_EndRxTransaction>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d002      	beq.n	8003dea <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f7ff ffa9 	bl	8003d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e06:	e002      	b.n	8003e0e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff ff7d 	bl	8003d08 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e20:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e22:	f7fe f9fb 	bl	800221c <HAL_GetTick>
 8003e26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e36:	d02f      	beq.n	8003e98 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 0220 	bic.w	r2, r2, #32
 8003e46:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	2164      	movs	r1, #100	; 0x64
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f935 	bl	80040bc <SPI_EndRxTxTransaction>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0203 	bic.w	r2, r2, #3
 8003e72:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f7ff ff61 	bl	8003d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003e96:	e002      	b.n	8003e9e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff ff3f 	bl	8003d1c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f7ff ff3c 	bl	8003d30 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003eb8:	bf00      	nop
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff ff38 	bl	8003d44 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f022 0203 	bic.w	r2, r2, #3
 8003ef8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003efe:	f043 0210 	orr.w	r2, r3, #16
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f7ff ff22 	bl	8003d58 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f14:	bf00      	nop
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f2c:	e04c      	b.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f34:	d048      	beq.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f36:	f7fe f971 	bl	800221c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d902      	bls.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d13d      	bne.n	8003fc8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f64:	d111      	bne.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6e:	d004      	beq.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f78:	d107      	bne.n	8003f8a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f92:	d10f      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e00f      	b.n	8003fe8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	68ba      	ldr	r2, [r7, #8]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d1a3      	bne.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004004:	d111      	bne.n	800402a <SPI_EndRxTransaction+0x3a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400e:	d004      	beq.n	800401a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004018:	d107      	bne.n	800402a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004028:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004032:	d12a      	bne.n	800408a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403c:	d012      	beq.n	8004064 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	9300      	str	r3, [sp, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2200      	movs	r2, #0
 8004046:	2180      	movs	r1, #128	; 0x80
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f7ff ff67 	bl	8003f1c <SPI_WaitFlagStateUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d02d      	beq.n	80040b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004060:	2303      	movs	r3, #3
 8004062:	e026      	b.n	80040b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	2101      	movs	r1, #1
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff ff54 	bl	8003f1c <SPI_WaitFlagStateUntilTimeout>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d01a      	beq.n	80040b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800407e:	f043 0220 	orr.w	r2, r3, #32
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e013      	b.n	80040b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	9300      	str	r3, [sp, #0]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2200      	movs	r2, #0
 8004092:	2101      	movs	r1, #1
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff ff41 	bl	8003f1c <SPI_WaitFlagStateUntilTimeout>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d007      	beq.n	80040b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f043 0220 	orr.w	r2, r3, #32
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e000      	b.n	80040b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <SPI_EndRxTxTransaction+0x7c>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a1b      	ldr	r2, [pc, #108]	; (800413c <SPI_EndRxTxTransaction+0x80>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	0d5b      	lsrs	r3, r3, #21
 80040d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040e6:	d112      	bne.n	800410e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	9300      	str	r3, [sp, #0]
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2180      	movs	r1, #128	; 0x80
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ff12 	bl	8003f1c <SPI_WaitFlagStateUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d016      	beq.n	800412c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004102:	f043 0220 	orr.w	r2, r3, #32
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e00f      	b.n	800412e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00a      	beq.n	800412a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	3b01      	subs	r3, #1
 8004118:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004124:	2b80      	cmp	r3, #128	; 0x80
 8004126:	d0f2      	beq.n	800410e <SPI_EndRxTxTransaction+0x52>
 8004128:	e000      	b.n	800412c <SPI_EndRxTxTransaction+0x70>
        break;
 800412a:	bf00      	nop
  }

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000000 	.word	0x20000000
 800413c:	165e9f81 	.word	0x165e9f81

08004140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e01d      	b.n	800418e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f7fd fec2 	bl	8001ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f000 f95e 	bl	8004440 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0201 	orr.w	r2, r2, #1
 80041ac:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b06      	cmp	r3, #6
 80041be:	d007      	beq.n	80041d0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0201 	orr.w	r2, r2, #1
 80041ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d122      	bne.n	800423a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0302 	and.w	r3, r3, #2
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d11b      	bne.n	800423a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f06f 0202 	mvn.w	r2, #2
 800420a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0303 	and.w	r3, r3, #3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f8ee 	bl	8004402 <HAL_TIM_IC_CaptureCallback>
 8004226:	e005      	b.n	8004234 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 f8e0 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f8f1 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b04      	cmp	r3, #4
 8004246:	d122      	bne.n	800428e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b04      	cmp	r3, #4
 8004254:	d11b      	bne.n	800428e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f06f 0204 	mvn.w	r2, #4
 800425e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f8c4 	bl	8004402 <HAL_TIM_IC_CaptureCallback>
 800427a:	e005      	b.n	8004288 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f000 f8b6 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8c7 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d122      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f003 0308 	and.w	r3, r3, #8
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d11b      	bne.n	80042e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f06f 0208 	mvn.w	r2, #8
 80042b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2204      	movs	r2, #4
 80042b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f89a 	bl	8004402 <HAL_TIM_IC_CaptureCallback>
 80042ce:	e005      	b.n	80042dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f88c 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f89d 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	f003 0310 	and.w	r3, r3, #16
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d122      	bne.n	8004336 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b10      	cmp	r3, #16
 80042fc:	d11b      	bne.n	8004336 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0210 	mvn.w	r2, #16
 8004306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2208      	movs	r2, #8
 800430c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004318:	2b00      	cmp	r3, #0
 800431a:	d003      	beq.n	8004324 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f870 	bl	8004402 <HAL_TIM_IC_CaptureCallback>
 8004322:	e005      	b.n	8004330 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f862 	bl	80043ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f873 	bl	8004416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b01      	cmp	r3, #1
 8004342:	d10e      	bne.n	8004362 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b01      	cmp	r3, #1
 8004350:	d107      	bne.n	8004362 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f06f 0201 	mvn.w	r2, #1
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7fd f927 	bl	80015b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b80      	cmp	r3, #128	; 0x80
 800436e:	d10e      	bne.n	800438e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d107      	bne.n	800438e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f8e3 	bl	8004554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004398:	2b40      	cmp	r3, #64	; 0x40
 800439a:	d10e      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043a6:	2b40      	cmp	r3, #64	; 0x40
 80043a8:	d107      	bne.n	80043ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f838 	bl	800442a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	f003 0320 	and.w	r3, r3, #32
 80043c4:	2b20      	cmp	r3, #32
 80043c6:	d10e      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	2b20      	cmp	r3, #32
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f06f 0220 	mvn.w	r2, #32
 80043de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f8ad 	bl	8004540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043e6:	bf00      	nop
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
	...

08004440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4a34      	ldr	r2, [pc, #208]	; (8004524 <TIM_Base_SetConfig+0xe4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00f      	beq.n	8004478 <TIM_Base_SetConfig+0x38>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x38>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a31      	ldr	r2, [pc, #196]	; (8004528 <TIM_Base_SetConfig+0xe8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x38>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a30      	ldr	r2, [pc, #192]	; (800452c <TIM_Base_SetConfig+0xec>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a2f      	ldr	r2, [pc, #188]	; (8004530 <TIM_Base_SetConfig+0xf0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a25      	ldr	r2, [pc, #148]	; (8004524 <TIM_Base_SetConfig+0xe4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d01b      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d017      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a22      	ldr	r2, [pc, #136]	; (8004528 <TIM_Base_SetConfig+0xe8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d013      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a21      	ldr	r2, [pc, #132]	; (800452c <TIM_Base_SetConfig+0xec>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00f      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a20      	ldr	r2, [pc, #128]	; (8004530 <TIM_Base_SetConfig+0xf0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00b      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <TIM_Base_SetConfig+0xf4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d007      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a1e      	ldr	r2, [pc, #120]	; (8004538 <TIM_Base_SetConfig+0xf8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1d      	ldr	r2, [pc, #116]	; (800453c <TIM_Base_SetConfig+0xfc>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d108      	bne.n	80044dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a08      	ldr	r2, [pc, #32]	; (8004524 <TIM_Base_SetConfig+0xe4>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d103      	bne.n	8004510 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	615a      	str	r2, [r3, #20]
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40010000 	.word	0x40010000
 8004528:	40000400 	.word	0x40000400
 800452c:	40000800 	.word	0x40000800
 8004530:	40000c00 	.word	0x40000c00
 8004534:	40014000 	.word	0x40014000
 8004538:	40014400 	.word	0x40014400
 800453c:	40014800 	.word	0x40014800

08004540 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e03f      	b.n	80045fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7fd fcd6 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2224      	movs	r2, #36	; 0x24
 8004598:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f90b 	bl	80047c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68da      	ldr	r2, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b088      	sub	sp, #32
 8004606:	af02      	add	r7, sp, #8
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b20      	cmp	r3, #32
 8004620:	f040 8083 	bne.w	800472a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d002      	beq.n	8004630 <HAL_UART_Transmit+0x2e>
 800462a:	88fb      	ldrh	r3, [r7, #6]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e07b      	b.n	800472c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <HAL_UART_Transmit+0x40>
 800463e:	2302      	movs	r3, #2
 8004640:	e074      	b.n	800472c <HAL_UART_Transmit+0x12a>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2221      	movs	r2, #33	; 0x21
 8004654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004658:	f7fd fde0 	bl	800221c <HAL_GetTick>
 800465c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	88fa      	ldrh	r2, [r7, #6]
 8004662:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	88fa      	ldrh	r2, [r7, #6]
 8004668:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004672:	e042      	b.n	80046fa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468a:	d122      	bne.n	80046d2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	2200      	movs	r2, #0
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f84c 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e042      	b.n	800472c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d103      	bne.n	80046ca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	3302      	adds	r3, #2
 80046c6:	60bb      	str	r3, [r7, #8]
 80046c8:	e017      	b.n	80046fa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3301      	adds	r3, #1
 80046ce:	60bb      	str	r3, [r7, #8]
 80046d0:	e013      	b.n	80046fa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2200      	movs	r2, #0
 80046da:	2180      	movs	r1, #128	; 0x80
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f829 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e01f      	b.n	800472c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	60ba      	str	r2, [r7, #8]
 80046f2:	781a      	ldrb	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d1b7      	bne.n	8004674 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2200      	movs	r2, #0
 800470c:	2140      	movs	r1, #64	; 0x40
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f810 	bl	8004734 <UART_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e006      	b.n	800472c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004726:	2300      	movs	r3, #0
 8004728:	e000      	b.n	800472c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800472a:	2302      	movs	r3, #2
  }
}
 800472c:	4618      	mov	r0, r3
 800472e:	3718      	adds	r7, #24
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	4613      	mov	r3, r2
 8004742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004744:	e02c      	b.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800474c:	d028      	beq.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d007      	beq.n	8004764 <UART_WaitOnFlagUntilTimeout+0x30>
 8004754:	f7fd fd62 	bl	800221c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	429a      	cmp	r2, r3
 8004762:	d21d      	bcs.n	80047a0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	68da      	ldr	r2, [r3, #12]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004772:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0201 	bic.w	r2, r2, #1
 8004782:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e00f      	b.n	80047c0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	4013      	ands	r3, r2
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	bf0c      	ite	eq
 80047b0:	2301      	moveq	r3, #1
 80047b2:	2300      	movne	r3, #0
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	461a      	mov	r2, r3
 80047b8:	79fb      	ldrb	r3, [r7, #7]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d0c3      	beq.n	8004746 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800480a:	f023 030c 	bic.w	r3, r3, #12
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	68f9      	ldr	r1, [r7, #12]
 8004814:	430b      	orrs	r3, r1
 8004816:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69db      	ldr	r3, [r3, #28]
 8004832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004836:	f040 818b 	bne.w	8004b50 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4ac1      	ldr	r2, [pc, #772]	; (8004b44 <UART_SetConfig+0x37c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d005      	beq.n	8004850 <UART_SetConfig+0x88>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4abf      	ldr	r2, [pc, #764]	; (8004b48 <UART_SetConfig+0x380>)
 800484a:	4293      	cmp	r3, r2
 800484c:	f040 80bd 	bne.w	80049ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe ffac 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8004854:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	461d      	mov	r5, r3
 800485a:	f04f 0600 	mov.w	r6, #0
 800485e:	46a8      	mov	r8, r5
 8004860:	46b1      	mov	r9, r6
 8004862:	eb18 0308 	adds.w	r3, r8, r8
 8004866:	eb49 0409 	adc.w	r4, r9, r9
 800486a:	4698      	mov	r8, r3
 800486c:	46a1      	mov	r9, r4
 800486e:	eb18 0805 	adds.w	r8, r8, r5
 8004872:	eb49 0906 	adc.w	r9, r9, r6
 8004876:	f04f 0100 	mov.w	r1, #0
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004882:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004886:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800488a:	4688      	mov	r8, r1
 800488c:	4691      	mov	r9, r2
 800488e:	eb18 0005 	adds.w	r0, r8, r5
 8004892:	eb49 0106 	adc.w	r1, r9, r6
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	461d      	mov	r5, r3
 800489c:	f04f 0600 	mov.w	r6, #0
 80048a0:	196b      	adds	r3, r5, r5
 80048a2:	eb46 0406 	adc.w	r4, r6, r6
 80048a6:	461a      	mov	r2, r3
 80048a8:	4623      	mov	r3, r4
 80048aa:	f7fc f8df 	bl	8000a6c <__aeabi_uldivmod>
 80048ae:	4603      	mov	r3, r0
 80048b0:	460c      	mov	r4, r1
 80048b2:	461a      	mov	r2, r3
 80048b4:	4ba5      	ldr	r3, [pc, #660]	; (8004b4c <UART_SetConfig+0x384>)
 80048b6:	fba3 2302 	umull	r2, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	461d      	mov	r5, r3
 80048c4:	f04f 0600 	mov.w	r6, #0
 80048c8:	46a9      	mov	r9, r5
 80048ca:	46b2      	mov	sl, r6
 80048cc:	eb19 0309 	adds.w	r3, r9, r9
 80048d0:	eb4a 040a 	adc.w	r4, sl, sl
 80048d4:	4699      	mov	r9, r3
 80048d6:	46a2      	mov	sl, r4
 80048d8:	eb19 0905 	adds.w	r9, r9, r5
 80048dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80048f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80048f4:	4689      	mov	r9, r1
 80048f6:	4692      	mov	sl, r2
 80048f8:	eb19 0005 	adds.w	r0, r9, r5
 80048fc:	eb4a 0106 	adc.w	r1, sl, r6
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	461d      	mov	r5, r3
 8004906:	f04f 0600 	mov.w	r6, #0
 800490a:	196b      	adds	r3, r5, r5
 800490c:	eb46 0406 	adc.w	r4, r6, r6
 8004910:	461a      	mov	r2, r3
 8004912:	4623      	mov	r3, r4
 8004914:	f7fc f8aa 	bl	8000a6c <__aeabi_uldivmod>
 8004918:	4603      	mov	r3, r0
 800491a:	460c      	mov	r4, r1
 800491c:	461a      	mov	r2, r3
 800491e:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <UART_SetConfig+0x384>)
 8004920:	fba3 1302 	umull	r1, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	2164      	movs	r1, #100	; 0x64
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3332      	adds	r3, #50	; 0x32
 8004932:	4a86      	ldr	r2, [pc, #536]	; (8004b4c <UART_SetConfig+0x384>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004940:	4498      	add	r8, r3
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	461d      	mov	r5, r3
 8004946:	f04f 0600 	mov.w	r6, #0
 800494a:	46a9      	mov	r9, r5
 800494c:	46b2      	mov	sl, r6
 800494e:	eb19 0309 	adds.w	r3, r9, r9
 8004952:	eb4a 040a 	adc.w	r4, sl, sl
 8004956:	4699      	mov	r9, r3
 8004958:	46a2      	mov	sl, r4
 800495a:	eb19 0905 	adds.w	r9, r9, r5
 800495e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004962:	f04f 0100 	mov.w	r1, #0
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800496e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004972:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004976:	4689      	mov	r9, r1
 8004978:	4692      	mov	sl, r2
 800497a:	eb19 0005 	adds.w	r0, r9, r5
 800497e:	eb4a 0106 	adc.w	r1, sl, r6
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	461d      	mov	r5, r3
 8004988:	f04f 0600 	mov.w	r6, #0
 800498c:	196b      	adds	r3, r5, r5
 800498e:	eb46 0406 	adc.w	r4, r6, r6
 8004992:	461a      	mov	r2, r3
 8004994:	4623      	mov	r3, r4
 8004996:	f7fc f869 	bl	8000a6c <__aeabi_uldivmod>
 800499a:	4603      	mov	r3, r0
 800499c:	460c      	mov	r4, r1
 800499e:	461a      	mov	r2, r3
 80049a0:	4b6a      	ldr	r3, [pc, #424]	; (8004b4c <UART_SetConfig+0x384>)
 80049a2:	fba3 1302 	umull	r1, r3, r3, r2
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	2164      	movs	r1, #100	; 0x64
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	1ad3      	subs	r3, r2, r3
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	3332      	adds	r3, #50	; 0x32
 80049b4:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <UART_SetConfig+0x384>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	f003 0207 	and.w	r2, r3, #7
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4442      	add	r2, r8
 80049c6:	609a      	str	r2, [r3, #8]
 80049c8:	e26f      	b.n	8004eaa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7fe fedb 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 80049ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	461d      	mov	r5, r3
 80049d4:	f04f 0600 	mov.w	r6, #0
 80049d8:	46a8      	mov	r8, r5
 80049da:	46b1      	mov	r9, r6
 80049dc:	eb18 0308 	adds.w	r3, r8, r8
 80049e0:	eb49 0409 	adc.w	r4, r9, r9
 80049e4:	4698      	mov	r8, r3
 80049e6:	46a1      	mov	r9, r4
 80049e8:	eb18 0805 	adds.w	r8, r8, r5
 80049ec:	eb49 0906 	adc.w	r9, r9, r6
 80049f0:	f04f 0100 	mov.w	r1, #0
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80049fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a04:	4688      	mov	r8, r1
 8004a06:	4691      	mov	r9, r2
 8004a08:	eb18 0005 	adds.w	r0, r8, r5
 8004a0c:	eb49 0106 	adc.w	r1, r9, r6
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	461d      	mov	r5, r3
 8004a16:	f04f 0600 	mov.w	r6, #0
 8004a1a:	196b      	adds	r3, r5, r5
 8004a1c:	eb46 0406 	adc.w	r4, r6, r6
 8004a20:	461a      	mov	r2, r3
 8004a22:	4623      	mov	r3, r4
 8004a24:	f7fc f822 	bl	8000a6c <__aeabi_uldivmod>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	460c      	mov	r4, r1
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <UART_SetConfig+0x384>)
 8004a30:	fba3 2302 	umull	r2, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	461d      	mov	r5, r3
 8004a3e:	f04f 0600 	mov.w	r6, #0
 8004a42:	46a9      	mov	r9, r5
 8004a44:	46b2      	mov	sl, r6
 8004a46:	eb19 0309 	adds.w	r3, r9, r9
 8004a4a:	eb4a 040a 	adc.w	r4, sl, sl
 8004a4e:	4699      	mov	r9, r3
 8004a50:	46a2      	mov	sl, r4
 8004a52:	eb19 0905 	adds.w	r9, r9, r5
 8004a56:	eb4a 0a06 	adc.w	sl, sl, r6
 8004a5a:	f04f 0100 	mov.w	r1, #0
 8004a5e:	f04f 0200 	mov.w	r2, #0
 8004a62:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a66:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a6a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a6e:	4689      	mov	r9, r1
 8004a70:	4692      	mov	sl, r2
 8004a72:	eb19 0005 	adds.w	r0, r9, r5
 8004a76:	eb4a 0106 	adc.w	r1, sl, r6
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	461d      	mov	r5, r3
 8004a80:	f04f 0600 	mov.w	r6, #0
 8004a84:	196b      	adds	r3, r5, r5
 8004a86:	eb46 0406 	adc.w	r4, r6, r6
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	f7fb ffed 	bl	8000a6c <__aeabi_uldivmod>
 8004a92:	4603      	mov	r3, r0
 8004a94:	460c      	mov	r4, r1
 8004a96:	461a      	mov	r2, r3
 8004a98:	4b2c      	ldr	r3, [pc, #176]	; (8004b4c <UART_SetConfig+0x384>)
 8004a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	2164      	movs	r1, #100	; 0x64
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	3332      	adds	r3, #50	; 0x32
 8004aac:	4a27      	ldr	r2, [pc, #156]	; (8004b4c <UART_SetConfig+0x384>)
 8004aae:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab2:	095b      	lsrs	r3, r3, #5
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004aba:	4498      	add	r8, r3
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	461d      	mov	r5, r3
 8004ac0:	f04f 0600 	mov.w	r6, #0
 8004ac4:	46a9      	mov	r9, r5
 8004ac6:	46b2      	mov	sl, r6
 8004ac8:	eb19 0309 	adds.w	r3, r9, r9
 8004acc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ad0:	4699      	mov	r9, r3
 8004ad2:	46a2      	mov	sl, r4
 8004ad4:	eb19 0905 	adds.w	r9, r9, r5
 8004ad8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004adc:	f04f 0100 	mov.w	r1, #0
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ae8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004af0:	4689      	mov	r9, r1
 8004af2:	4692      	mov	sl, r2
 8004af4:	eb19 0005 	adds.w	r0, r9, r5
 8004af8:	eb4a 0106 	adc.w	r1, sl, r6
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	461d      	mov	r5, r3
 8004b02:	f04f 0600 	mov.w	r6, #0
 8004b06:	196b      	adds	r3, r5, r5
 8004b08:	eb46 0406 	adc.w	r4, r6, r6
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4623      	mov	r3, r4
 8004b10:	f7fb ffac 	bl	8000a6c <__aeabi_uldivmod>
 8004b14:	4603      	mov	r3, r0
 8004b16:	460c      	mov	r4, r1
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <UART_SetConfig+0x384>)
 8004b1c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b20:	095b      	lsrs	r3, r3, #5
 8004b22:	2164      	movs	r1, #100	; 0x64
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	3332      	adds	r3, #50	; 0x32
 8004b2e:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <UART_SetConfig+0x384>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	f003 0207 	and.w	r2, r3, #7
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4442      	add	r2, r8
 8004b40:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004b42:	e1b2      	b.n	8004eaa <UART_SetConfig+0x6e2>
 8004b44:	40011000 	.word	0x40011000
 8004b48:	40011400 	.word	0x40011400
 8004b4c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4ad7      	ldr	r2, [pc, #860]	; (8004eb4 <UART_SetConfig+0x6ec>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d005      	beq.n	8004b66 <UART_SetConfig+0x39e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4ad6      	ldr	r2, [pc, #856]	; (8004eb8 <UART_SetConfig+0x6f0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	f040 80d1 	bne.w	8004d08 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b66:	f7fe fe21 	bl	80037ac <HAL_RCC_GetPCLK2Freq>
 8004b6a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	469a      	mov	sl, r3
 8004b70:	f04f 0b00 	mov.w	fp, #0
 8004b74:	46d0      	mov	r8, sl
 8004b76:	46d9      	mov	r9, fp
 8004b78:	eb18 0308 	adds.w	r3, r8, r8
 8004b7c:	eb49 0409 	adc.w	r4, r9, r9
 8004b80:	4698      	mov	r8, r3
 8004b82:	46a1      	mov	r9, r4
 8004b84:	eb18 080a 	adds.w	r8, r8, sl
 8004b88:	eb49 090b 	adc.w	r9, r9, fp
 8004b8c:	f04f 0100 	mov.w	r1, #0
 8004b90:	f04f 0200 	mov.w	r2, #0
 8004b94:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b98:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b9c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ba0:	4688      	mov	r8, r1
 8004ba2:	4691      	mov	r9, r2
 8004ba4:	eb1a 0508 	adds.w	r5, sl, r8
 8004ba8:	eb4b 0609 	adc.w	r6, fp, r9
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	f04f 0400 	mov.w	r4, #0
 8004bbe:	0094      	lsls	r4, r2, #2
 8004bc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004bc4:	008b      	lsls	r3, r1, #2
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4623      	mov	r3, r4
 8004bca:	4628      	mov	r0, r5
 8004bcc:	4631      	mov	r1, r6
 8004bce:	f7fb ff4d 	bl	8000a6c <__aeabi_uldivmod>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	460c      	mov	r4, r1
 8004bd6:	461a      	mov	r2, r3
 8004bd8:	4bb8      	ldr	r3, [pc, #736]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004bda:	fba3 2302 	umull	r2, r3, r3, r2
 8004bde:	095b      	lsrs	r3, r3, #5
 8004be0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	469b      	mov	fp, r3
 8004be8:	f04f 0c00 	mov.w	ip, #0
 8004bec:	46d9      	mov	r9, fp
 8004bee:	46e2      	mov	sl, ip
 8004bf0:	eb19 0309 	adds.w	r3, r9, r9
 8004bf4:	eb4a 040a 	adc.w	r4, sl, sl
 8004bf8:	4699      	mov	r9, r3
 8004bfa:	46a2      	mov	sl, r4
 8004bfc:	eb19 090b 	adds.w	r9, r9, fp
 8004c00:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	f04f 0200 	mov.w	r2, #0
 8004c0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c10:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c18:	4689      	mov	r9, r1
 8004c1a:	4692      	mov	sl, r2
 8004c1c:	eb1b 0509 	adds.w	r5, fp, r9
 8004c20:	eb4c 060a 	adc.w	r6, ip, sl
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	f04f 0400 	mov.w	r4, #0
 8004c36:	0094      	lsls	r4, r2, #2
 8004c38:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004c3c:	008b      	lsls	r3, r1, #2
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4623      	mov	r3, r4
 8004c42:	4628      	mov	r0, r5
 8004c44:	4631      	mov	r1, r6
 8004c46:	f7fb ff11 	bl	8000a6c <__aeabi_uldivmod>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	460c      	mov	r4, r1
 8004c4e:	461a      	mov	r2, r3
 8004c50:	4b9a      	ldr	r3, [pc, #616]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004c52:	fba3 1302 	umull	r1, r3, r3, r2
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	2164      	movs	r1, #100	; 0x64
 8004c5a:	fb01 f303 	mul.w	r3, r1, r3
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	3332      	adds	r3, #50	; 0x32
 8004c64:	4a95      	ldr	r2, [pc, #596]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c70:	4498      	add	r8, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	469b      	mov	fp, r3
 8004c76:	f04f 0c00 	mov.w	ip, #0
 8004c7a:	46d9      	mov	r9, fp
 8004c7c:	46e2      	mov	sl, ip
 8004c7e:	eb19 0309 	adds.w	r3, r9, r9
 8004c82:	eb4a 040a 	adc.w	r4, sl, sl
 8004c86:	4699      	mov	r9, r3
 8004c88:	46a2      	mov	sl, r4
 8004c8a:	eb19 090b 	adds.w	r9, r9, fp
 8004c8e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004c92:	f04f 0100 	mov.w	r1, #0
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ca2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	4692      	mov	sl, r2
 8004caa:	eb1b 0509 	adds.w	r5, fp, r9
 8004cae:	eb4c 060a 	adc.w	r6, ip, sl
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	f04f 0400 	mov.w	r4, #0
 8004cc4:	0094      	lsls	r4, r2, #2
 8004cc6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004cca:	008b      	lsls	r3, r1, #2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	4623      	mov	r3, r4
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	f7fb feca 	bl	8000a6c <__aeabi_uldivmod>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4b77      	ldr	r3, [pc, #476]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	2164      	movs	r1, #100	; 0x64
 8004ce8:	fb01 f303 	mul.w	r3, r1, r3
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	011b      	lsls	r3, r3, #4
 8004cf0:	3332      	adds	r3, #50	; 0x32
 8004cf2:	4a72      	ldr	r2, [pc, #456]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf8:	095b      	lsrs	r3, r3, #5
 8004cfa:	f003 020f 	and.w	r2, r3, #15
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4442      	add	r2, r8
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	e0d0      	b.n	8004eaa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fe fd3c 	bl	8003784 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	469a      	mov	sl, r3
 8004d12:	f04f 0b00 	mov.w	fp, #0
 8004d16:	46d0      	mov	r8, sl
 8004d18:	46d9      	mov	r9, fp
 8004d1a:	eb18 0308 	adds.w	r3, r8, r8
 8004d1e:	eb49 0409 	adc.w	r4, r9, r9
 8004d22:	4698      	mov	r8, r3
 8004d24:	46a1      	mov	r9, r4
 8004d26:	eb18 080a 	adds.w	r8, r8, sl
 8004d2a:	eb49 090b 	adc.w	r9, r9, fp
 8004d2e:	f04f 0100 	mov.w	r1, #0
 8004d32:	f04f 0200 	mov.w	r2, #0
 8004d36:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d3a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d3e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d42:	4688      	mov	r8, r1
 8004d44:	4691      	mov	r9, r2
 8004d46:	eb1a 0508 	adds.w	r5, sl, r8
 8004d4a:	eb4b 0609 	adc.w	r6, fp, r9
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4619      	mov	r1, r3
 8004d54:	f04f 0200 	mov.w	r2, #0
 8004d58:	f04f 0300 	mov.w	r3, #0
 8004d5c:	f04f 0400 	mov.w	r4, #0
 8004d60:	0094      	lsls	r4, r2, #2
 8004d62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004d66:	008b      	lsls	r3, r1, #2
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	4631      	mov	r1, r6
 8004d70:	f7fb fe7c 	bl	8000a6c <__aeabi_uldivmod>
 8004d74:	4603      	mov	r3, r0
 8004d76:	460c      	mov	r4, r1
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4b50      	ldr	r3, [pc, #320]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004d7c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	469b      	mov	fp, r3
 8004d8a:	f04f 0c00 	mov.w	ip, #0
 8004d8e:	46d9      	mov	r9, fp
 8004d90:	46e2      	mov	sl, ip
 8004d92:	eb19 0309 	adds.w	r3, r9, r9
 8004d96:	eb4a 040a 	adc.w	r4, sl, sl
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	46a2      	mov	sl, r4
 8004d9e:	eb19 090b 	adds.w	r9, r9, fp
 8004da2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	f04f 0200 	mov.w	r2, #0
 8004dae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004db2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004db6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004dba:	4689      	mov	r9, r1
 8004dbc:	4692      	mov	sl, r2
 8004dbe:	eb1b 0509 	adds.w	r5, fp, r9
 8004dc2:	eb4c 060a 	adc.w	r6, ip, sl
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	f04f 0400 	mov.w	r4, #0
 8004dd8:	0094      	lsls	r4, r2, #2
 8004dda:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004dde:	008b      	lsls	r3, r1, #2
 8004de0:	461a      	mov	r2, r3
 8004de2:	4623      	mov	r3, r4
 8004de4:	4628      	mov	r0, r5
 8004de6:	4631      	mov	r1, r6
 8004de8:	f7fb fe40 	bl	8000a6c <__aeabi_uldivmod>
 8004dec:	4603      	mov	r3, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	461a      	mov	r2, r3
 8004df2:	4b32      	ldr	r3, [pc, #200]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004df4:	fba3 1302 	umull	r1, r3, r3, r2
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	2164      	movs	r1, #100	; 0x64
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	3332      	adds	r3, #50	; 0x32
 8004e06:	4a2d      	ldr	r2, [pc, #180]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e12:	4498      	add	r8, r3
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	469b      	mov	fp, r3
 8004e18:	f04f 0c00 	mov.w	ip, #0
 8004e1c:	46d9      	mov	r9, fp
 8004e1e:	46e2      	mov	sl, ip
 8004e20:	eb19 0309 	adds.w	r3, r9, r9
 8004e24:	eb4a 040a 	adc.w	r4, sl, sl
 8004e28:	4699      	mov	r9, r3
 8004e2a:	46a2      	mov	sl, r4
 8004e2c:	eb19 090b 	adds.w	r9, r9, fp
 8004e30:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004e34:	f04f 0100 	mov.w	r1, #0
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e48:	4689      	mov	r9, r1
 8004e4a:	4692      	mov	sl, r2
 8004e4c:	eb1b 0509 	adds.w	r5, fp, r9
 8004e50:	eb4c 060a 	adc.w	r6, ip, sl
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	f04f 0200 	mov.w	r2, #0
 8004e5e:	f04f 0300 	mov.w	r3, #0
 8004e62:	f04f 0400 	mov.w	r4, #0
 8004e66:	0094      	lsls	r4, r2, #2
 8004e68:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004e6c:	008b      	lsls	r3, r1, #2
 8004e6e:	461a      	mov	r2, r3
 8004e70:	4623      	mov	r3, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	4631      	mov	r1, r6
 8004e76:	f7fb fdf9 	bl	8000a6c <__aeabi_uldivmod>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	461a      	mov	r2, r3
 8004e80:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004e82:	fba3 1302 	umull	r1, r3, r3, r2
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	2164      	movs	r1, #100	; 0x64
 8004e8a:	fb01 f303 	mul.w	r3, r1, r3
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	3332      	adds	r3, #50	; 0x32
 8004e94:	4a09      	ldr	r2, [pc, #36]	; (8004ebc <UART_SetConfig+0x6f4>)
 8004e96:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	f003 020f 	and.w	r2, r3, #15
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4442      	add	r2, r8
 8004ea6:	609a      	str	r2, [r3, #8]
}
 8004ea8:	e7ff      	b.n	8004eaa <UART_SetConfig+0x6e2>
 8004eaa:	bf00      	nop
 8004eac:	3714      	adds	r7, #20
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb4:	40011000 	.word	0x40011000
 8004eb8:	40011400 	.word	0x40011400
 8004ebc:	51eb851f 	.word	0x51eb851f

08004ec0 <__errno>:
 8004ec0:	4b01      	ldr	r3, [pc, #4]	; (8004ec8 <__errno+0x8>)
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	2000000c 	.word	0x2000000c

08004ecc <__libc_init_array>:
 8004ecc:	b570      	push	{r4, r5, r6, lr}
 8004ece:	4e0d      	ldr	r6, [pc, #52]	; (8004f04 <__libc_init_array+0x38>)
 8004ed0:	4c0d      	ldr	r4, [pc, #52]	; (8004f08 <__libc_init_array+0x3c>)
 8004ed2:	1ba4      	subs	r4, r4, r6
 8004ed4:	10a4      	asrs	r4, r4, #2
 8004ed6:	2500      	movs	r5, #0
 8004ed8:	42a5      	cmp	r5, r4
 8004eda:	d109      	bne.n	8004ef0 <__libc_init_array+0x24>
 8004edc:	4e0b      	ldr	r6, [pc, #44]	; (8004f0c <__libc_init_array+0x40>)
 8004ede:	4c0c      	ldr	r4, [pc, #48]	; (8004f10 <__libc_init_array+0x44>)
 8004ee0:	f000 fc26 	bl	8005730 <_init>
 8004ee4:	1ba4      	subs	r4, r4, r6
 8004ee6:	10a4      	asrs	r4, r4, #2
 8004ee8:	2500      	movs	r5, #0
 8004eea:	42a5      	cmp	r5, r4
 8004eec:	d105      	bne.n	8004efa <__libc_init_array+0x2e>
 8004eee:	bd70      	pop	{r4, r5, r6, pc}
 8004ef0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ef4:	4798      	blx	r3
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	e7ee      	b.n	8004ed8 <__libc_init_array+0xc>
 8004efa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004efe:	4798      	blx	r3
 8004f00:	3501      	adds	r5, #1
 8004f02:	e7f2      	b.n	8004eea <__libc_init_array+0x1e>
 8004f04:	080057f0 	.word	0x080057f0
 8004f08:	080057f0 	.word	0x080057f0
 8004f0c:	080057f0 	.word	0x080057f0
 8004f10:	080057f4 	.word	0x080057f4

08004f14 <memset>:
 8004f14:	4402      	add	r2, r0
 8004f16:	4603      	mov	r3, r0
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d100      	bne.n	8004f1e <memset+0xa>
 8004f1c:	4770      	bx	lr
 8004f1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f22:	e7f9      	b.n	8004f18 <memset+0x4>

08004f24 <siprintf>:
 8004f24:	b40e      	push	{r1, r2, r3}
 8004f26:	b500      	push	{lr}
 8004f28:	b09c      	sub	sp, #112	; 0x70
 8004f2a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f2c:	9002      	str	r0, [sp, #8]
 8004f2e:	9006      	str	r0, [sp, #24]
 8004f30:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f34:	4809      	ldr	r0, [pc, #36]	; (8004f5c <siprintf+0x38>)
 8004f36:	9107      	str	r1, [sp, #28]
 8004f38:	9104      	str	r1, [sp, #16]
 8004f3a:	4909      	ldr	r1, [pc, #36]	; (8004f60 <siprintf+0x3c>)
 8004f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f40:	9105      	str	r1, [sp, #20]
 8004f42:	6800      	ldr	r0, [r0, #0]
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	a902      	add	r1, sp, #8
 8004f48:	f000 f866 	bl	8005018 <_svfiprintf_r>
 8004f4c:	9b02      	ldr	r3, [sp, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	b01c      	add	sp, #112	; 0x70
 8004f54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f58:	b003      	add	sp, #12
 8004f5a:	4770      	bx	lr
 8004f5c:	2000000c 	.word	0x2000000c
 8004f60:	ffff0208 	.word	0xffff0208

08004f64 <__ssputs_r>:
 8004f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f68:	688e      	ldr	r6, [r1, #8]
 8004f6a:	429e      	cmp	r6, r3
 8004f6c:	4682      	mov	sl, r0
 8004f6e:	460c      	mov	r4, r1
 8004f70:	4690      	mov	r8, r2
 8004f72:	4699      	mov	r9, r3
 8004f74:	d837      	bhi.n	8004fe6 <__ssputs_r+0x82>
 8004f76:	898a      	ldrh	r2, [r1, #12]
 8004f78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f7c:	d031      	beq.n	8004fe2 <__ssputs_r+0x7e>
 8004f7e:	6825      	ldr	r5, [r4, #0]
 8004f80:	6909      	ldr	r1, [r1, #16]
 8004f82:	1a6f      	subs	r7, r5, r1
 8004f84:	6965      	ldr	r5, [r4, #20]
 8004f86:	2302      	movs	r3, #2
 8004f88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004f90:	f109 0301 	add.w	r3, r9, #1
 8004f94:	443b      	add	r3, r7
 8004f96:	429d      	cmp	r5, r3
 8004f98:	bf38      	it	cc
 8004f9a:	461d      	movcc	r5, r3
 8004f9c:	0553      	lsls	r3, r2, #21
 8004f9e:	d530      	bpl.n	8005002 <__ssputs_r+0x9e>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	f000 fb2b 	bl	80055fc <_malloc_r>
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	b950      	cbnz	r0, 8004fc0 <__ssputs_r+0x5c>
 8004faa:	230c      	movs	r3, #12
 8004fac:	f8ca 3000 	str.w	r3, [sl]
 8004fb0:	89a3      	ldrh	r3, [r4, #12]
 8004fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fb6:	81a3      	strh	r3, [r4, #12]
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	463a      	mov	r2, r7
 8004fc2:	6921      	ldr	r1, [r4, #16]
 8004fc4:	f000 faa8 	bl	8005518 <memcpy>
 8004fc8:	89a3      	ldrh	r3, [r4, #12]
 8004fca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd2:	81a3      	strh	r3, [r4, #12]
 8004fd4:	6126      	str	r6, [r4, #16]
 8004fd6:	6165      	str	r5, [r4, #20]
 8004fd8:	443e      	add	r6, r7
 8004fda:	1bed      	subs	r5, r5, r7
 8004fdc:	6026      	str	r6, [r4, #0]
 8004fde:	60a5      	str	r5, [r4, #8]
 8004fe0:	464e      	mov	r6, r9
 8004fe2:	454e      	cmp	r6, r9
 8004fe4:	d900      	bls.n	8004fe8 <__ssputs_r+0x84>
 8004fe6:	464e      	mov	r6, r9
 8004fe8:	4632      	mov	r2, r6
 8004fea:	4641      	mov	r1, r8
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	f000 fa9e 	bl	800552e <memmove>
 8004ff2:	68a3      	ldr	r3, [r4, #8]
 8004ff4:	1b9b      	subs	r3, r3, r6
 8004ff6:	60a3      	str	r3, [r4, #8]
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	441e      	add	r6, r3
 8004ffc:	6026      	str	r6, [r4, #0]
 8004ffe:	2000      	movs	r0, #0
 8005000:	e7dc      	b.n	8004fbc <__ssputs_r+0x58>
 8005002:	462a      	mov	r2, r5
 8005004:	f000 fb54 	bl	80056b0 <_realloc_r>
 8005008:	4606      	mov	r6, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d1e2      	bne.n	8004fd4 <__ssputs_r+0x70>
 800500e:	6921      	ldr	r1, [r4, #16]
 8005010:	4650      	mov	r0, sl
 8005012:	f000 faa5 	bl	8005560 <_free_r>
 8005016:	e7c8      	b.n	8004faa <__ssputs_r+0x46>

08005018 <_svfiprintf_r>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	461d      	mov	r5, r3
 800501e:	898b      	ldrh	r3, [r1, #12]
 8005020:	061f      	lsls	r7, r3, #24
 8005022:	b09d      	sub	sp, #116	; 0x74
 8005024:	4680      	mov	r8, r0
 8005026:	460c      	mov	r4, r1
 8005028:	4616      	mov	r6, r2
 800502a:	d50f      	bpl.n	800504c <_svfiprintf_r+0x34>
 800502c:	690b      	ldr	r3, [r1, #16]
 800502e:	b96b      	cbnz	r3, 800504c <_svfiprintf_r+0x34>
 8005030:	2140      	movs	r1, #64	; 0x40
 8005032:	f000 fae3 	bl	80055fc <_malloc_r>
 8005036:	6020      	str	r0, [r4, #0]
 8005038:	6120      	str	r0, [r4, #16]
 800503a:	b928      	cbnz	r0, 8005048 <_svfiprintf_r+0x30>
 800503c:	230c      	movs	r3, #12
 800503e:	f8c8 3000 	str.w	r3, [r8]
 8005042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005046:	e0c8      	b.n	80051da <_svfiprintf_r+0x1c2>
 8005048:	2340      	movs	r3, #64	; 0x40
 800504a:	6163      	str	r3, [r4, #20]
 800504c:	2300      	movs	r3, #0
 800504e:	9309      	str	r3, [sp, #36]	; 0x24
 8005050:	2320      	movs	r3, #32
 8005052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005056:	2330      	movs	r3, #48	; 0x30
 8005058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800505c:	9503      	str	r5, [sp, #12]
 800505e:	f04f 0b01 	mov.w	fp, #1
 8005062:	4637      	mov	r7, r6
 8005064:	463d      	mov	r5, r7
 8005066:	f815 3b01 	ldrb.w	r3, [r5], #1
 800506a:	b10b      	cbz	r3, 8005070 <_svfiprintf_r+0x58>
 800506c:	2b25      	cmp	r3, #37	; 0x25
 800506e:	d13e      	bne.n	80050ee <_svfiprintf_r+0xd6>
 8005070:	ebb7 0a06 	subs.w	sl, r7, r6
 8005074:	d00b      	beq.n	800508e <_svfiprintf_r+0x76>
 8005076:	4653      	mov	r3, sl
 8005078:	4632      	mov	r2, r6
 800507a:	4621      	mov	r1, r4
 800507c:	4640      	mov	r0, r8
 800507e:	f7ff ff71 	bl	8004f64 <__ssputs_r>
 8005082:	3001      	adds	r0, #1
 8005084:	f000 80a4 	beq.w	80051d0 <_svfiprintf_r+0x1b8>
 8005088:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800508a:	4453      	add	r3, sl
 800508c:	9309      	str	r3, [sp, #36]	; 0x24
 800508e:	783b      	ldrb	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f000 809d 	beq.w	80051d0 <_svfiprintf_r+0x1b8>
 8005096:	2300      	movs	r3, #0
 8005098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800509c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050a0:	9304      	str	r3, [sp, #16]
 80050a2:	9307      	str	r3, [sp, #28]
 80050a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050a8:	931a      	str	r3, [sp, #104]	; 0x68
 80050aa:	462f      	mov	r7, r5
 80050ac:	2205      	movs	r2, #5
 80050ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 80050b2:	4850      	ldr	r0, [pc, #320]	; (80051f4 <_svfiprintf_r+0x1dc>)
 80050b4:	f7fb f894 	bl	80001e0 <memchr>
 80050b8:	9b04      	ldr	r3, [sp, #16]
 80050ba:	b9d0      	cbnz	r0, 80050f2 <_svfiprintf_r+0xda>
 80050bc:	06d9      	lsls	r1, r3, #27
 80050be:	bf44      	itt	mi
 80050c0:	2220      	movmi	r2, #32
 80050c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050c6:	071a      	lsls	r2, r3, #28
 80050c8:	bf44      	itt	mi
 80050ca:	222b      	movmi	r2, #43	; 0x2b
 80050cc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80050d0:	782a      	ldrb	r2, [r5, #0]
 80050d2:	2a2a      	cmp	r2, #42	; 0x2a
 80050d4:	d015      	beq.n	8005102 <_svfiprintf_r+0xea>
 80050d6:	9a07      	ldr	r2, [sp, #28]
 80050d8:	462f      	mov	r7, r5
 80050da:	2000      	movs	r0, #0
 80050dc:	250a      	movs	r5, #10
 80050de:	4639      	mov	r1, r7
 80050e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e4:	3b30      	subs	r3, #48	; 0x30
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d94d      	bls.n	8005186 <_svfiprintf_r+0x16e>
 80050ea:	b1b8      	cbz	r0, 800511c <_svfiprintf_r+0x104>
 80050ec:	e00f      	b.n	800510e <_svfiprintf_r+0xf6>
 80050ee:	462f      	mov	r7, r5
 80050f0:	e7b8      	b.n	8005064 <_svfiprintf_r+0x4c>
 80050f2:	4a40      	ldr	r2, [pc, #256]	; (80051f4 <_svfiprintf_r+0x1dc>)
 80050f4:	1a80      	subs	r0, r0, r2
 80050f6:	fa0b f000 	lsl.w	r0, fp, r0
 80050fa:	4318      	orrs	r0, r3
 80050fc:	9004      	str	r0, [sp, #16]
 80050fe:	463d      	mov	r5, r7
 8005100:	e7d3      	b.n	80050aa <_svfiprintf_r+0x92>
 8005102:	9a03      	ldr	r2, [sp, #12]
 8005104:	1d11      	adds	r1, r2, #4
 8005106:	6812      	ldr	r2, [r2, #0]
 8005108:	9103      	str	r1, [sp, #12]
 800510a:	2a00      	cmp	r2, #0
 800510c:	db01      	blt.n	8005112 <_svfiprintf_r+0xfa>
 800510e:	9207      	str	r2, [sp, #28]
 8005110:	e004      	b.n	800511c <_svfiprintf_r+0x104>
 8005112:	4252      	negs	r2, r2
 8005114:	f043 0302 	orr.w	r3, r3, #2
 8005118:	9207      	str	r2, [sp, #28]
 800511a:	9304      	str	r3, [sp, #16]
 800511c:	783b      	ldrb	r3, [r7, #0]
 800511e:	2b2e      	cmp	r3, #46	; 0x2e
 8005120:	d10c      	bne.n	800513c <_svfiprintf_r+0x124>
 8005122:	787b      	ldrb	r3, [r7, #1]
 8005124:	2b2a      	cmp	r3, #42	; 0x2a
 8005126:	d133      	bne.n	8005190 <_svfiprintf_r+0x178>
 8005128:	9b03      	ldr	r3, [sp, #12]
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	9203      	str	r2, [sp, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	bfb8      	it	lt
 8005134:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005138:	3702      	adds	r7, #2
 800513a:	9305      	str	r3, [sp, #20]
 800513c:	4d2e      	ldr	r5, [pc, #184]	; (80051f8 <_svfiprintf_r+0x1e0>)
 800513e:	7839      	ldrb	r1, [r7, #0]
 8005140:	2203      	movs	r2, #3
 8005142:	4628      	mov	r0, r5
 8005144:	f7fb f84c 	bl	80001e0 <memchr>
 8005148:	b138      	cbz	r0, 800515a <_svfiprintf_r+0x142>
 800514a:	2340      	movs	r3, #64	; 0x40
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	fa03 f000 	lsl.w	r0, r3, r0
 8005152:	9b04      	ldr	r3, [sp, #16]
 8005154:	4303      	orrs	r3, r0
 8005156:	3701      	adds	r7, #1
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	7839      	ldrb	r1, [r7, #0]
 800515c:	4827      	ldr	r0, [pc, #156]	; (80051fc <_svfiprintf_r+0x1e4>)
 800515e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005162:	2206      	movs	r2, #6
 8005164:	1c7e      	adds	r6, r7, #1
 8005166:	f7fb f83b 	bl	80001e0 <memchr>
 800516a:	2800      	cmp	r0, #0
 800516c:	d038      	beq.n	80051e0 <_svfiprintf_r+0x1c8>
 800516e:	4b24      	ldr	r3, [pc, #144]	; (8005200 <_svfiprintf_r+0x1e8>)
 8005170:	bb13      	cbnz	r3, 80051b8 <_svfiprintf_r+0x1a0>
 8005172:	9b03      	ldr	r3, [sp, #12]
 8005174:	3307      	adds	r3, #7
 8005176:	f023 0307 	bic.w	r3, r3, #7
 800517a:	3308      	adds	r3, #8
 800517c:	9303      	str	r3, [sp, #12]
 800517e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005180:	444b      	add	r3, r9
 8005182:	9309      	str	r3, [sp, #36]	; 0x24
 8005184:	e76d      	b.n	8005062 <_svfiprintf_r+0x4a>
 8005186:	fb05 3202 	mla	r2, r5, r2, r3
 800518a:	2001      	movs	r0, #1
 800518c:	460f      	mov	r7, r1
 800518e:	e7a6      	b.n	80050de <_svfiprintf_r+0xc6>
 8005190:	2300      	movs	r3, #0
 8005192:	3701      	adds	r7, #1
 8005194:	9305      	str	r3, [sp, #20]
 8005196:	4619      	mov	r1, r3
 8005198:	250a      	movs	r5, #10
 800519a:	4638      	mov	r0, r7
 800519c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051a0:	3a30      	subs	r2, #48	; 0x30
 80051a2:	2a09      	cmp	r2, #9
 80051a4:	d903      	bls.n	80051ae <_svfiprintf_r+0x196>
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0c8      	beq.n	800513c <_svfiprintf_r+0x124>
 80051aa:	9105      	str	r1, [sp, #20]
 80051ac:	e7c6      	b.n	800513c <_svfiprintf_r+0x124>
 80051ae:	fb05 2101 	mla	r1, r5, r1, r2
 80051b2:	2301      	movs	r3, #1
 80051b4:	4607      	mov	r7, r0
 80051b6:	e7f0      	b.n	800519a <_svfiprintf_r+0x182>
 80051b8:	ab03      	add	r3, sp, #12
 80051ba:	9300      	str	r3, [sp, #0]
 80051bc:	4622      	mov	r2, r4
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <_svfiprintf_r+0x1ec>)
 80051c0:	a904      	add	r1, sp, #16
 80051c2:	4640      	mov	r0, r8
 80051c4:	f3af 8000 	nop.w
 80051c8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80051cc:	4681      	mov	r9, r0
 80051ce:	d1d6      	bne.n	800517e <_svfiprintf_r+0x166>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	065b      	lsls	r3, r3, #25
 80051d4:	f53f af35 	bmi.w	8005042 <_svfiprintf_r+0x2a>
 80051d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051da:	b01d      	add	sp, #116	; 0x74
 80051dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e0:	ab03      	add	r3, sp, #12
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	4622      	mov	r2, r4
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <_svfiprintf_r+0x1ec>)
 80051e8:	a904      	add	r1, sp, #16
 80051ea:	4640      	mov	r0, r8
 80051ec:	f000 f882 	bl	80052f4 <_printf_i>
 80051f0:	e7ea      	b.n	80051c8 <_svfiprintf_r+0x1b0>
 80051f2:	bf00      	nop
 80051f4:	080057b4 	.word	0x080057b4
 80051f8:	080057ba 	.word	0x080057ba
 80051fc:	080057be 	.word	0x080057be
 8005200:	00000000 	.word	0x00000000
 8005204:	08004f65 	.word	0x08004f65

08005208 <_printf_common>:
 8005208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800520c:	4691      	mov	r9, r2
 800520e:	461f      	mov	r7, r3
 8005210:	688a      	ldr	r2, [r1, #8]
 8005212:	690b      	ldr	r3, [r1, #16]
 8005214:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005218:	4293      	cmp	r3, r2
 800521a:	bfb8      	it	lt
 800521c:	4613      	movlt	r3, r2
 800521e:	f8c9 3000 	str.w	r3, [r9]
 8005222:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005226:	4606      	mov	r6, r0
 8005228:	460c      	mov	r4, r1
 800522a:	b112      	cbz	r2, 8005232 <_printf_common+0x2a>
 800522c:	3301      	adds	r3, #1
 800522e:	f8c9 3000 	str.w	r3, [r9]
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	0699      	lsls	r1, r3, #26
 8005236:	bf42      	ittt	mi
 8005238:	f8d9 3000 	ldrmi.w	r3, [r9]
 800523c:	3302      	addmi	r3, #2
 800523e:	f8c9 3000 	strmi.w	r3, [r9]
 8005242:	6825      	ldr	r5, [r4, #0]
 8005244:	f015 0506 	ands.w	r5, r5, #6
 8005248:	d107      	bne.n	800525a <_printf_common+0x52>
 800524a:	f104 0a19 	add.w	sl, r4, #25
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	f8d9 2000 	ldr.w	r2, [r9]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	42ab      	cmp	r3, r5
 8005258:	dc28      	bgt.n	80052ac <_printf_common+0xa4>
 800525a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800525e:	6822      	ldr	r2, [r4, #0]
 8005260:	3300      	adds	r3, #0
 8005262:	bf18      	it	ne
 8005264:	2301      	movne	r3, #1
 8005266:	0692      	lsls	r2, r2, #26
 8005268:	d42d      	bmi.n	80052c6 <_printf_common+0xbe>
 800526a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800526e:	4639      	mov	r1, r7
 8005270:	4630      	mov	r0, r6
 8005272:	47c0      	blx	r8
 8005274:	3001      	adds	r0, #1
 8005276:	d020      	beq.n	80052ba <_printf_common+0xb2>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	68e5      	ldr	r5, [r4, #12]
 800527c:	f8d9 2000 	ldr.w	r2, [r9]
 8005280:	f003 0306 	and.w	r3, r3, #6
 8005284:	2b04      	cmp	r3, #4
 8005286:	bf08      	it	eq
 8005288:	1aad      	subeq	r5, r5, r2
 800528a:	68a3      	ldr	r3, [r4, #8]
 800528c:	6922      	ldr	r2, [r4, #16]
 800528e:	bf0c      	ite	eq
 8005290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005294:	2500      	movne	r5, #0
 8005296:	4293      	cmp	r3, r2
 8005298:	bfc4      	itt	gt
 800529a:	1a9b      	subgt	r3, r3, r2
 800529c:	18ed      	addgt	r5, r5, r3
 800529e:	f04f 0900 	mov.w	r9, #0
 80052a2:	341a      	adds	r4, #26
 80052a4:	454d      	cmp	r5, r9
 80052a6:	d11a      	bne.n	80052de <_printf_common+0xd6>
 80052a8:	2000      	movs	r0, #0
 80052aa:	e008      	b.n	80052be <_printf_common+0xb6>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4652      	mov	r2, sl
 80052b0:	4639      	mov	r1, r7
 80052b2:	4630      	mov	r0, r6
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d103      	bne.n	80052c2 <_printf_common+0xba>
 80052ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c2:	3501      	adds	r5, #1
 80052c4:	e7c3      	b.n	800524e <_printf_common+0x46>
 80052c6:	18e1      	adds	r1, r4, r3
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	2030      	movs	r0, #48	; 0x30
 80052cc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052d0:	4422      	add	r2, r4
 80052d2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052da:	3302      	adds	r3, #2
 80052dc:	e7c5      	b.n	800526a <_printf_common+0x62>
 80052de:	2301      	movs	r3, #1
 80052e0:	4622      	mov	r2, r4
 80052e2:	4639      	mov	r1, r7
 80052e4:	4630      	mov	r0, r6
 80052e6:	47c0      	blx	r8
 80052e8:	3001      	adds	r0, #1
 80052ea:	d0e6      	beq.n	80052ba <_printf_common+0xb2>
 80052ec:	f109 0901 	add.w	r9, r9, #1
 80052f0:	e7d8      	b.n	80052a4 <_printf_common+0x9c>
	...

080052f4 <_printf_i>:
 80052f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052f8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80052fc:	460c      	mov	r4, r1
 80052fe:	7e09      	ldrb	r1, [r1, #24]
 8005300:	b085      	sub	sp, #20
 8005302:	296e      	cmp	r1, #110	; 0x6e
 8005304:	4617      	mov	r7, r2
 8005306:	4606      	mov	r6, r0
 8005308:	4698      	mov	r8, r3
 800530a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800530c:	f000 80b3 	beq.w	8005476 <_printf_i+0x182>
 8005310:	d822      	bhi.n	8005358 <_printf_i+0x64>
 8005312:	2963      	cmp	r1, #99	; 0x63
 8005314:	d036      	beq.n	8005384 <_printf_i+0x90>
 8005316:	d80a      	bhi.n	800532e <_printf_i+0x3a>
 8005318:	2900      	cmp	r1, #0
 800531a:	f000 80b9 	beq.w	8005490 <_printf_i+0x19c>
 800531e:	2958      	cmp	r1, #88	; 0x58
 8005320:	f000 8083 	beq.w	800542a <_printf_i+0x136>
 8005324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005328:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800532c:	e032      	b.n	8005394 <_printf_i+0xa0>
 800532e:	2964      	cmp	r1, #100	; 0x64
 8005330:	d001      	beq.n	8005336 <_printf_i+0x42>
 8005332:	2969      	cmp	r1, #105	; 0x69
 8005334:	d1f6      	bne.n	8005324 <_printf_i+0x30>
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	0605      	lsls	r5, r0, #24
 800533c:	f103 0104 	add.w	r1, r3, #4
 8005340:	d52a      	bpl.n	8005398 <_printf_i+0xa4>
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6011      	str	r1, [r2, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	da03      	bge.n	8005352 <_printf_i+0x5e>
 800534a:	222d      	movs	r2, #45	; 0x2d
 800534c:	425b      	negs	r3, r3
 800534e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005352:	486f      	ldr	r0, [pc, #444]	; (8005510 <_printf_i+0x21c>)
 8005354:	220a      	movs	r2, #10
 8005356:	e039      	b.n	80053cc <_printf_i+0xd8>
 8005358:	2973      	cmp	r1, #115	; 0x73
 800535a:	f000 809d 	beq.w	8005498 <_printf_i+0x1a4>
 800535e:	d808      	bhi.n	8005372 <_printf_i+0x7e>
 8005360:	296f      	cmp	r1, #111	; 0x6f
 8005362:	d020      	beq.n	80053a6 <_printf_i+0xb2>
 8005364:	2970      	cmp	r1, #112	; 0x70
 8005366:	d1dd      	bne.n	8005324 <_printf_i+0x30>
 8005368:	6823      	ldr	r3, [r4, #0]
 800536a:	f043 0320 	orr.w	r3, r3, #32
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	e003      	b.n	800537a <_printf_i+0x86>
 8005372:	2975      	cmp	r1, #117	; 0x75
 8005374:	d017      	beq.n	80053a6 <_printf_i+0xb2>
 8005376:	2978      	cmp	r1, #120	; 0x78
 8005378:	d1d4      	bne.n	8005324 <_printf_i+0x30>
 800537a:	2378      	movs	r3, #120	; 0x78
 800537c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005380:	4864      	ldr	r0, [pc, #400]	; (8005514 <_printf_i+0x220>)
 8005382:	e055      	b.n	8005430 <_printf_i+0x13c>
 8005384:	6813      	ldr	r3, [r2, #0]
 8005386:	1d19      	adds	r1, r3, #4
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6011      	str	r1, [r2, #0]
 800538c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005394:	2301      	movs	r3, #1
 8005396:	e08c      	b.n	80054b2 <_printf_i+0x1be>
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6011      	str	r1, [r2, #0]
 800539c:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053a0:	bf18      	it	ne
 80053a2:	b21b      	sxthne	r3, r3
 80053a4:	e7cf      	b.n	8005346 <_printf_i+0x52>
 80053a6:	6813      	ldr	r3, [r2, #0]
 80053a8:	6825      	ldr	r5, [r4, #0]
 80053aa:	1d18      	adds	r0, r3, #4
 80053ac:	6010      	str	r0, [r2, #0]
 80053ae:	0628      	lsls	r0, r5, #24
 80053b0:	d501      	bpl.n	80053b6 <_printf_i+0xc2>
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	e002      	b.n	80053bc <_printf_i+0xc8>
 80053b6:	0668      	lsls	r0, r5, #25
 80053b8:	d5fb      	bpl.n	80053b2 <_printf_i+0xbe>
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	4854      	ldr	r0, [pc, #336]	; (8005510 <_printf_i+0x21c>)
 80053be:	296f      	cmp	r1, #111	; 0x6f
 80053c0:	bf14      	ite	ne
 80053c2:	220a      	movne	r2, #10
 80053c4:	2208      	moveq	r2, #8
 80053c6:	2100      	movs	r1, #0
 80053c8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053cc:	6865      	ldr	r5, [r4, #4]
 80053ce:	60a5      	str	r5, [r4, #8]
 80053d0:	2d00      	cmp	r5, #0
 80053d2:	f2c0 8095 	blt.w	8005500 <_printf_i+0x20c>
 80053d6:	6821      	ldr	r1, [r4, #0]
 80053d8:	f021 0104 	bic.w	r1, r1, #4
 80053dc:	6021      	str	r1, [r4, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d13d      	bne.n	800545e <_printf_i+0x16a>
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	f040 808e 	bne.w	8005504 <_printf_i+0x210>
 80053e8:	4665      	mov	r5, ip
 80053ea:	2a08      	cmp	r2, #8
 80053ec:	d10b      	bne.n	8005406 <_printf_i+0x112>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	07db      	lsls	r3, r3, #31
 80053f2:	d508      	bpl.n	8005406 <_printf_i+0x112>
 80053f4:	6923      	ldr	r3, [r4, #16]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	bfde      	ittt	le
 80053fc:	2330      	movle	r3, #48	; 0x30
 80053fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005402:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005406:	ebac 0305 	sub.w	r3, ip, r5
 800540a:	6123      	str	r3, [r4, #16]
 800540c:	f8cd 8000 	str.w	r8, [sp]
 8005410:	463b      	mov	r3, r7
 8005412:	aa03      	add	r2, sp, #12
 8005414:	4621      	mov	r1, r4
 8005416:	4630      	mov	r0, r6
 8005418:	f7ff fef6 	bl	8005208 <_printf_common>
 800541c:	3001      	adds	r0, #1
 800541e:	d14d      	bne.n	80054bc <_printf_i+0x1c8>
 8005420:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005424:	b005      	add	sp, #20
 8005426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800542a:	4839      	ldr	r0, [pc, #228]	; (8005510 <_printf_i+0x21c>)
 800542c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005430:	6813      	ldr	r3, [r2, #0]
 8005432:	6821      	ldr	r1, [r4, #0]
 8005434:	1d1d      	adds	r5, r3, #4
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6015      	str	r5, [r2, #0]
 800543a:	060a      	lsls	r2, r1, #24
 800543c:	d50b      	bpl.n	8005456 <_printf_i+0x162>
 800543e:	07ca      	lsls	r2, r1, #31
 8005440:	bf44      	itt	mi
 8005442:	f041 0120 	orrmi.w	r1, r1, #32
 8005446:	6021      	strmi	r1, [r4, #0]
 8005448:	b91b      	cbnz	r3, 8005452 <_printf_i+0x15e>
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	f022 0220 	bic.w	r2, r2, #32
 8005450:	6022      	str	r2, [r4, #0]
 8005452:	2210      	movs	r2, #16
 8005454:	e7b7      	b.n	80053c6 <_printf_i+0xd2>
 8005456:	064d      	lsls	r5, r1, #25
 8005458:	bf48      	it	mi
 800545a:	b29b      	uxthmi	r3, r3
 800545c:	e7ef      	b.n	800543e <_printf_i+0x14a>
 800545e:	4665      	mov	r5, ip
 8005460:	fbb3 f1f2 	udiv	r1, r3, r2
 8005464:	fb02 3311 	mls	r3, r2, r1, r3
 8005468:	5cc3      	ldrb	r3, [r0, r3]
 800546a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800546e:	460b      	mov	r3, r1
 8005470:	2900      	cmp	r1, #0
 8005472:	d1f5      	bne.n	8005460 <_printf_i+0x16c>
 8005474:	e7b9      	b.n	80053ea <_printf_i+0xf6>
 8005476:	6813      	ldr	r3, [r2, #0]
 8005478:	6825      	ldr	r5, [r4, #0]
 800547a:	6961      	ldr	r1, [r4, #20]
 800547c:	1d18      	adds	r0, r3, #4
 800547e:	6010      	str	r0, [r2, #0]
 8005480:	0628      	lsls	r0, r5, #24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0x196>
 8005486:	6019      	str	r1, [r3, #0]
 8005488:	e002      	b.n	8005490 <_printf_i+0x19c>
 800548a:	066a      	lsls	r2, r5, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0x192>
 800548e:	8019      	strh	r1, [r3, #0]
 8005490:	2300      	movs	r3, #0
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	4665      	mov	r5, ip
 8005496:	e7b9      	b.n	800540c <_printf_i+0x118>
 8005498:	6813      	ldr	r3, [r2, #0]
 800549a:	1d19      	adds	r1, r3, #4
 800549c:	6011      	str	r1, [r2, #0]
 800549e:	681d      	ldr	r5, [r3, #0]
 80054a0:	6862      	ldr	r2, [r4, #4]
 80054a2:	2100      	movs	r1, #0
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7fa fe9b 	bl	80001e0 <memchr>
 80054aa:	b108      	cbz	r0, 80054b0 <_printf_i+0x1bc>
 80054ac:	1b40      	subs	r0, r0, r5
 80054ae:	6060      	str	r0, [r4, #4]
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	2300      	movs	r3, #0
 80054b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ba:	e7a7      	b.n	800540c <_printf_i+0x118>
 80054bc:	6923      	ldr	r3, [r4, #16]
 80054be:	462a      	mov	r2, r5
 80054c0:	4639      	mov	r1, r7
 80054c2:	4630      	mov	r0, r6
 80054c4:	47c0      	blx	r8
 80054c6:	3001      	adds	r0, #1
 80054c8:	d0aa      	beq.n	8005420 <_printf_i+0x12c>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	079b      	lsls	r3, r3, #30
 80054ce:	d413      	bmi.n	80054f8 <_printf_i+0x204>
 80054d0:	68e0      	ldr	r0, [r4, #12]
 80054d2:	9b03      	ldr	r3, [sp, #12]
 80054d4:	4298      	cmp	r0, r3
 80054d6:	bfb8      	it	lt
 80054d8:	4618      	movlt	r0, r3
 80054da:	e7a3      	b.n	8005424 <_printf_i+0x130>
 80054dc:	2301      	movs	r3, #1
 80054de:	464a      	mov	r2, r9
 80054e0:	4639      	mov	r1, r7
 80054e2:	4630      	mov	r0, r6
 80054e4:	47c0      	blx	r8
 80054e6:	3001      	adds	r0, #1
 80054e8:	d09a      	beq.n	8005420 <_printf_i+0x12c>
 80054ea:	3501      	adds	r5, #1
 80054ec:	68e3      	ldr	r3, [r4, #12]
 80054ee:	9a03      	ldr	r2, [sp, #12]
 80054f0:	1a9b      	subs	r3, r3, r2
 80054f2:	42ab      	cmp	r3, r5
 80054f4:	dcf2      	bgt.n	80054dc <_printf_i+0x1e8>
 80054f6:	e7eb      	b.n	80054d0 <_printf_i+0x1dc>
 80054f8:	2500      	movs	r5, #0
 80054fa:	f104 0919 	add.w	r9, r4, #25
 80054fe:	e7f5      	b.n	80054ec <_printf_i+0x1f8>
 8005500:	2b00      	cmp	r3, #0
 8005502:	d1ac      	bne.n	800545e <_printf_i+0x16a>
 8005504:	7803      	ldrb	r3, [r0, #0]
 8005506:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800550a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800550e:	e76c      	b.n	80053ea <_printf_i+0xf6>
 8005510:	080057c5 	.word	0x080057c5
 8005514:	080057d6 	.word	0x080057d6

08005518 <memcpy>:
 8005518:	b510      	push	{r4, lr}
 800551a:	1e43      	subs	r3, r0, #1
 800551c:	440a      	add	r2, r1
 800551e:	4291      	cmp	r1, r2
 8005520:	d100      	bne.n	8005524 <memcpy+0xc>
 8005522:	bd10      	pop	{r4, pc}
 8005524:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005528:	f803 4f01 	strb.w	r4, [r3, #1]!
 800552c:	e7f7      	b.n	800551e <memcpy+0x6>

0800552e <memmove>:
 800552e:	4288      	cmp	r0, r1
 8005530:	b510      	push	{r4, lr}
 8005532:	eb01 0302 	add.w	r3, r1, r2
 8005536:	d807      	bhi.n	8005548 <memmove+0x1a>
 8005538:	1e42      	subs	r2, r0, #1
 800553a:	4299      	cmp	r1, r3
 800553c:	d00a      	beq.n	8005554 <memmove+0x26>
 800553e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005542:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005546:	e7f8      	b.n	800553a <memmove+0xc>
 8005548:	4283      	cmp	r3, r0
 800554a:	d9f5      	bls.n	8005538 <memmove+0xa>
 800554c:	1881      	adds	r1, r0, r2
 800554e:	1ad2      	subs	r2, r2, r3
 8005550:	42d3      	cmn	r3, r2
 8005552:	d100      	bne.n	8005556 <memmove+0x28>
 8005554:	bd10      	pop	{r4, pc}
 8005556:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800555a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800555e:	e7f7      	b.n	8005550 <memmove+0x22>

08005560 <_free_r>:
 8005560:	b538      	push	{r3, r4, r5, lr}
 8005562:	4605      	mov	r5, r0
 8005564:	2900      	cmp	r1, #0
 8005566:	d045      	beq.n	80055f4 <_free_r+0x94>
 8005568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800556c:	1f0c      	subs	r4, r1, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	bfb8      	it	lt
 8005572:	18e4      	addlt	r4, r4, r3
 8005574:	f000 f8d2 	bl	800571c <__malloc_lock>
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <_free_r+0x98>)
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	4610      	mov	r0, r2
 800557e:	b933      	cbnz	r3, 800558e <_free_r+0x2e>
 8005580:	6063      	str	r3, [r4, #4]
 8005582:	6014      	str	r4, [r2, #0]
 8005584:	4628      	mov	r0, r5
 8005586:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800558a:	f000 b8c8 	b.w	800571e <__malloc_unlock>
 800558e:	42a3      	cmp	r3, r4
 8005590:	d90c      	bls.n	80055ac <_free_r+0x4c>
 8005592:	6821      	ldr	r1, [r4, #0]
 8005594:	1862      	adds	r2, r4, r1
 8005596:	4293      	cmp	r3, r2
 8005598:	bf04      	itt	eq
 800559a:	681a      	ldreq	r2, [r3, #0]
 800559c:	685b      	ldreq	r3, [r3, #4]
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	bf04      	itt	eq
 80055a2:	1852      	addeq	r2, r2, r1
 80055a4:	6022      	streq	r2, [r4, #0]
 80055a6:	6004      	str	r4, [r0, #0]
 80055a8:	e7ec      	b.n	8005584 <_free_r+0x24>
 80055aa:	4613      	mov	r3, r2
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	b10a      	cbz	r2, 80055b4 <_free_r+0x54>
 80055b0:	42a2      	cmp	r2, r4
 80055b2:	d9fa      	bls.n	80055aa <_free_r+0x4a>
 80055b4:	6819      	ldr	r1, [r3, #0]
 80055b6:	1858      	adds	r0, r3, r1
 80055b8:	42a0      	cmp	r0, r4
 80055ba:	d10b      	bne.n	80055d4 <_free_r+0x74>
 80055bc:	6820      	ldr	r0, [r4, #0]
 80055be:	4401      	add	r1, r0
 80055c0:	1858      	adds	r0, r3, r1
 80055c2:	4282      	cmp	r2, r0
 80055c4:	6019      	str	r1, [r3, #0]
 80055c6:	d1dd      	bne.n	8005584 <_free_r+0x24>
 80055c8:	6810      	ldr	r0, [r2, #0]
 80055ca:	6852      	ldr	r2, [r2, #4]
 80055cc:	605a      	str	r2, [r3, #4]
 80055ce:	4401      	add	r1, r0
 80055d0:	6019      	str	r1, [r3, #0]
 80055d2:	e7d7      	b.n	8005584 <_free_r+0x24>
 80055d4:	d902      	bls.n	80055dc <_free_r+0x7c>
 80055d6:	230c      	movs	r3, #12
 80055d8:	602b      	str	r3, [r5, #0]
 80055da:	e7d3      	b.n	8005584 <_free_r+0x24>
 80055dc:	6820      	ldr	r0, [r4, #0]
 80055de:	1821      	adds	r1, r4, r0
 80055e0:	428a      	cmp	r2, r1
 80055e2:	bf04      	itt	eq
 80055e4:	6811      	ldreq	r1, [r2, #0]
 80055e6:	6852      	ldreq	r2, [r2, #4]
 80055e8:	6062      	str	r2, [r4, #4]
 80055ea:	bf04      	itt	eq
 80055ec:	1809      	addeq	r1, r1, r0
 80055ee:	6021      	streq	r1, [r4, #0]
 80055f0:	605c      	str	r4, [r3, #4]
 80055f2:	e7c7      	b.n	8005584 <_free_r+0x24>
 80055f4:	bd38      	pop	{r3, r4, r5, pc}
 80055f6:	bf00      	nop
 80055f8:	200000a0 	.word	0x200000a0

080055fc <_malloc_r>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	1ccd      	adds	r5, r1, #3
 8005600:	f025 0503 	bic.w	r5, r5, #3
 8005604:	3508      	adds	r5, #8
 8005606:	2d0c      	cmp	r5, #12
 8005608:	bf38      	it	cc
 800560a:	250c      	movcc	r5, #12
 800560c:	2d00      	cmp	r5, #0
 800560e:	4606      	mov	r6, r0
 8005610:	db01      	blt.n	8005616 <_malloc_r+0x1a>
 8005612:	42a9      	cmp	r1, r5
 8005614:	d903      	bls.n	800561e <_malloc_r+0x22>
 8005616:	230c      	movs	r3, #12
 8005618:	6033      	str	r3, [r6, #0]
 800561a:	2000      	movs	r0, #0
 800561c:	bd70      	pop	{r4, r5, r6, pc}
 800561e:	f000 f87d 	bl	800571c <__malloc_lock>
 8005622:	4a21      	ldr	r2, [pc, #132]	; (80056a8 <_malloc_r+0xac>)
 8005624:	6814      	ldr	r4, [r2, #0]
 8005626:	4621      	mov	r1, r4
 8005628:	b991      	cbnz	r1, 8005650 <_malloc_r+0x54>
 800562a:	4c20      	ldr	r4, [pc, #128]	; (80056ac <_malloc_r+0xb0>)
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	b91b      	cbnz	r3, 8005638 <_malloc_r+0x3c>
 8005630:	4630      	mov	r0, r6
 8005632:	f000 f863 	bl	80056fc <_sbrk_r>
 8005636:	6020      	str	r0, [r4, #0]
 8005638:	4629      	mov	r1, r5
 800563a:	4630      	mov	r0, r6
 800563c:	f000 f85e 	bl	80056fc <_sbrk_r>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d124      	bne.n	800568e <_malloc_r+0x92>
 8005644:	230c      	movs	r3, #12
 8005646:	6033      	str	r3, [r6, #0]
 8005648:	4630      	mov	r0, r6
 800564a:	f000 f868 	bl	800571e <__malloc_unlock>
 800564e:	e7e4      	b.n	800561a <_malloc_r+0x1e>
 8005650:	680b      	ldr	r3, [r1, #0]
 8005652:	1b5b      	subs	r3, r3, r5
 8005654:	d418      	bmi.n	8005688 <_malloc_r+0x8c>
 8005656:	2b0b      	cmp	r3, #11
 8005658:	d90f      	bls.n	800567a <_malloc_r+0x7e>
 800565a:	600b      	str	r3, [r1, #0]
 800565c:	50cd      	str	r5, [r1, r3]
 800565e:	18cc      	adds	r4, r1, r3
 8005660:	4630      	mov	r0, r6
 8005662:	f000 f85c 	bl	800571e <__malloc_unlock>
 8005666:	f104 000b 	add.w	r0, r4, #11
 800566a:	1d23      	adds	r3, r4, #4
 800566c:	f020 0007 	bic.w	r0, r0, #7
 8005670:	1ac3      	subs	r3, r0, r3
 8005672:	d0d3      	beq.n	800561c <_malloc_r+0x20>
 8005674:	425a      	negs	r2, r3
 8005676:	50e2      	str	r2, [r4, r3]
 8005678:	e7d0      	b.n	800561c <_malloc_r+0x20>
 800567a:	428c      	cmp	r4, r1
 800567c:	684b      	ldr	r3, [r1, #4]
 800567e:	bf16      	itet	ne
 8005680:	6063      	strne	r3, [r4, #4]
 8005682:	6013      	streq	r3, [r2, #0]
 8005684:	460c      	movne	r4, r1
 8005686:	e7eb      	b.n	8005660 <_malloc_r+0x64>
 8005688:	460c      	mov	r4, r1
 800568a:	6849      	ldr	r1, [r1, #4]
 800568c:	e7cc      	b.n	8005628 <_malloc_r+0x2c>
 800568e:	1cc4      	adds	r4, r0, #3
 8005690:	f024 0403 	bic.w	r4, r4, #3
 8005694:	42a0      	cmp	r0, r4
 8005696:	d005      	beq.n	80056a4 <_malloc_r+0xa8>
 8005698:	1a21      	subs	r1, r4, r0
 800569a:	4630      	mov	r0, r6
 800569c:	f000 f82e 	bl	80056fc <_sbrk_r>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d0cf      	beq.n	8005644 <_malloc_r+0x48>
 80056a4:	6025      	str	r5, [r4, #0]
 80056a6:	e7db      	b.n	8005660 <_malloc_r+0x64>
 80056a8:	200000a0 	.word	0x200000a0
 80056ac:	200000a4 	.word	0x200000a4

080056b0 <_realloc_r>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	4607      	mov	r7, r0
 80056b4:	4614      	mov	r4, r2
 80056b6:	460e      	mov	r6, r1
 80056b8:	b921      	cbnz	r1, 80056c4 <_realloc_r+0x14>
 80056ba:	4611      	mov	r1, r2
 80056bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80056c0:	f7ff bf9c 	b.w	80055fc <_malloc_r>
 80056c4:	b922      	cbnz	r2, 80056d0 <_realloc_r+0x20>
 80056c6:	f7ff ff4b 	bl	8005560 <_free_r>
 80056ca:	4625      	mov	r5, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d0:	f000 f826 	bl	8005720 <_malloc_usable_size_r>
 80056d4:	42a0      	cmp	r0, r4
 80056d6:	d20f      	bcs.n	80056f8 <_realloc_r+0x48>
 80056d8:	4621      	mov	r1, r4
 80056da:	4638      	mov	r0, r7
 80056dc:	f7ff ff8e 	bl	80055fc <_malloc_r>
 80056e0:	4605      	mov	r5, r0
 80056e2:	2800      	cmp	r0, #0
 80056e4:	d0f2      	beq.n	80056cc <_realloc_r+0x1c>
 80056e6:	4631      	mov	r1, r6
 80056e8:	4622      	mov	r2, r4
 80056ea:	f7ff ff15 	bl	8005518 <memcpy>
 80056ee:	4631      	mov	r1, r6
 80056f0:	4638      	mov	r0, r7
 80056f2:	f7ff ff35 	bl	8005560 <_free_r>
 80056f6:	e7e9      	b.n	80056cc <_realloc_r+0x1c>
 80056f8:	4635      	mov	r5, r6
 80056fa:	e7e7      	b.n	80056cc <_realloc_r+0x1c>

080056fc <_sbrk_r>:
 80056fc:	b538      	push	{r3, r4, r5, lr}
 80056fe:	4c06      	ldr	r4, [pc, #24]	; (8005718 <_sbrk_r+0x1c>)
 8005700:	2300      	movs	r3, #0
 8005702:	4605      	mov	r5, r0
 8005704:	4608      	mov	r0, r1
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	f7fc fcb6 	bl	8002078 <_sbrk>
 800570c:	1c43      	adds	r3, r0, #1
 800570e:	d102      	bne.n	8005716 <_sbrk_r+0x1a>
 8005710:	6823      	ldr	r3, [r4, #0]
 8005712:	b103      	cbz	r3, 8005716 <_sbrk_r+0x1a>
 8005714:	602b      	str	r3, [r5, #0]
 8005716:	bd38      	pop	{r3, r4, r5, pc}
 8005718:	20000350 	.word	0x20000350

0800571c <__malloc_lock>:
 800571c:	4770      	bx	lr

0800571e <__malloc_unlock>:
 800571e:	4770      	bx	lr

08005720 <_malloc_usable_size_r>:
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f18      	subs	r0, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfbc      	itt	lt
 800572a:	580b      	ldrlt	r3, [r1, r0]
 800572c:	18c0      	addlt	r0, r0, r3
 800572e:	4770      	bx	lr

08005730 <_init>:
 8005730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005732:	bf00      	nop
 8005734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005736:	bc08      	pop	{r3}
 8005738:	469e      	mov	lr, r3
 800573a:	4770      	bx	lr

0800573c <_fini>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr
